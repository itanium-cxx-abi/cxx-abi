From daveed at edg.com  Tue May 26 17:57:34 2009
From: daveed at edg.com (David Vandevoorde)
Date: Tue, 26 May 2009 13:57:34 -0400
Subject: Deleted virtual functions
Message-ID: <E9F47C8F-02C3-48BA-8552-5A2077AEF483@edg.com>

I think the ABI should specify what should happen with deleted virtual  
functions:

	struct B {
	  virtual void f() = delete;
	};

	struct D: B {
	  virtual void f() = delete;
	};

Our preference would be for such functions to take up a slot in the  
virtual function table, and have that slot point to a new aborting ABI  
function __cxx_deleted_virtual (much like __cxa_pure_virtual).  This  
approach allows  changing a virtual function from deleted to non- 
deleted without breaking the vtable layout.

	Daveed



From jason at redhat.com  Wed May 27 17:37:58 2009
From: jason at redhat.com (Jason Merrill)
Date: Wed, 27 May 2009 13:37:58 -0400
Subject: [cxx-abi-dev] Deleted virtual functions
In-Reply-To: <E9F47C8F-02C3-48BA-8552-5A2077AEF483@edg.com>
References: <E9F47C8F-02C3-48BA-8552-5A2077AEF483@edg.com>
Message-ID: <4A1D7A76.20007@redhat.com>

That makes sense to me.

Jason


From mark at codesourcery.com  Thu May 28 06:20:39 2009
From: mark at codesourcery.com (Mark Mitchell)
Date: Thu, 28 May 2009 07:20:39 +0100
Subject: [cxx-abi-dev] Deleted virtual functions
In-Reply-To: <4A1D7A76.20007@redhat.com>
References: <E9F47C8F-02C3-48BA-8552-5A2077AEF483@edg.com> <4A1D7A76.20007@redhat.com>
Message-ID: <05D527E1-8D36-43E5-8D9D-F71041478943@codesourcery.com>

Me too.

--
Mark Mitchell
CodeSourcery
mark at codesourcery.com
(650) 331-3385 x713

On May 27, 2009, at 6:37 PM, Jason Merrill <jason at redhat.com> wrote:

> That makes sense to me.
>
> Jason


From doug.gregor at gmail.com  Thu May 28 14:43:29 2009
From: doug.gregor at gmail.com (Doug Gregor)
Date: Thu, 28 May 2009 07:43:29 -0700
Subject: [cxx-abi-dev] Deleted virtual functions
In-Reply-To: <05D527E1-8D36-43E5-8D9D-F71041478943@codesourcery.com>
References: <E9F47C8F-02C3-48BA-8552-5A2077AEF483@edg.com>
	 <4A1D7A76.20007@redhat.com>
	 <05D527E1-8D36-43E5-8D9D-F71041478943@codesourcery.com>
Message-ID: <24b520d20905280743w26a2e27bt5438c30dc7da2597@mail.gmail.com>

On Wed, May 27, 2009 at 11:20 PM, Mark Mitchell <mark at codesourcery.com> wrote:
> Me too.

I'll pile on as well: me three.

  - Doug


From daveed at edg.com  Thu May 28 14:45:55 2009
From: daveed at edg.com (David Vandevoorde)
Date: Thu, 28 May 2009 10:45:55 -0400
Subject: [cxx-abi-dev] Deleted virtual functions
In-Reply-To: <24b520d20905280743w26a2e27bt5438c30dc7da2597@mail.gmail.com>
References: <E9F47C8F-02C3-48BA-8552-5A2077AEF483@edg.com> <4A1D7A76.20007@redhat.com> <05D527E1-8D36-43E5-8D9D-F71041478943@codesourcery.com> <24b520d20905280743w26a2e27bt5438c30dc7da2597@mail.gmail.com>
Message-ID: <1A94C5C6-6935-4DA6-8F20-5E4BFCADCB3F@edg.com>


On May 28, 2009, at 10:43 AM, Doug Gregor wrote:

> On Wed, May 27, 2009 at 11:20 PM, Mark Mitchell  
> <mark at codesourcery.com> wrote:
>> Me too.
>
> I'll pile on as well: me three.


Thanks all.  I'll try to produce a spec-patch soon.

	Daveed



From daveed at edg.com  Thu May 28 20:40:57 2009
From: daveed at edg.com (David Vandevoorde)
Date: Thu, 28 May 2009 16:40:57 -0400
Subject: [cxx-abi-dev] Deleted virtual functions
In-Reply-To: <1A94C5C6-6935-4DA6-8F20-5E4BFCADCB3F@edg.com>
References: <E9F47C8F-02C3-48BA-8552-5A2077AEF483@edg.com> <4A1D7A76.20007@redhat.com> <05D527E1-8D36-43E5-8D9D-F71041478943@codesourcery.com> <24b520d20905280743w26a2e27bt5438c30dc7da2597@mail.gmail.com> <1A94C5C6-6935-4DA6-8F20-5E4BFCADCB3F@edg.com>
Message-ID: <C3F055A6-3F9E-4818-96B4-B9C807A16FBE@edg.com>

Attached are proposed diffs.

I noticed that there isn't actually a requirement to point virtual  
table entried for pure virtual functions at __cxa_pure_virtual.  Is  
that intentional or just sloppy wording?

	Daveed




-------------- next part --------------
A non-text attachment was scrubbed...
Name: deleted_funcs.diffs
Type: application/octet-stream
Size: 1811 bytes
Desc: not available
URL: <http://sourcerytools.com/pipermail/cxx-abi-dev/attachments/20090528/1747afec/attachment.obj>
-------------- next part --------------


From dhandly at cup.hp.com  Fri May 29 02:07:57 2009
From: dhandly at cup.hp.com (Dennis Handly)
Date: Thu, 28 May 2009 19:07:57 -0700 (PDT)
Subject: [cxx-abi-dev] Deleted virtual functions
Message-ID: <200905290207.TAA00958@hpcll183.cup.hp.com>

Looks good.

>From: David Vandevoorde <daveed at edg.com>
>I noticed that there isn't actually a requirement to point virtual  
>table entried for pure virtual functions at __cxa_pure_virtual.  Is  
>that intentional or just sloppy wording?

Well, why have __cxa_pure_virtual without using it?  ;-)

I have a suggestion for the signature for __cxa_pure_virtual and the new
__cxa_deleted_virtual:

extern "C" void __cxa_deleted_virtual(void *this_ptr);
extern "C" void __cxa_pure_virtual(void *this_ptr);

Where this_ptr can be cast to a dummy polymorphic class to get the class
name to print a nicer message:

// A dummy polymorphic class to make typeid() do the work below.
class pv_dummy {
public:
    virtual void dummy_func();
};
extern "C" {
extern void abort();
void __cxa_pure_virtual (void *this_ptr)
{
    pv_dummy *obj = (pv_dummy*)this_ptr;
    const char *mangled_name = typeid(*obj).name();
    const char *demangled_name = abi::__cxa_demangle(mangled_name, 0, 0, 0);
    if (!demangled_name)  // out of space?
        demangled_name = mangled_name;
    fprintf(stderr, "aCC runtime: pure virtual function called for class \"%s\".
\n", demangled_name);
    abort();
}
}

--Apple-Mail-17--1051914877
	filename=deleted_funcs.diffs
+ <li>If C::f is a pure virtual function, the corresponding virtual table
+ entry may point to __cxa_pure_virtual

Did you want to explain why you used "may"?
Is this the case of declaring it pure but still having a definition?
(for the destructor)


From daveed at edg.com  Fri May 29 02:55:57 2009
From: daveed at edg.com (David Vandevoorde)
Date: Thu, 28 May 2009 22:55:57 -0400
Subject: [cxx-abi-dev] Deleted virtual functions
In-Reply-To: <200905290207.TAA00958@hpcll183.cup.hp.com>
References: <200905290207.TAA00958@hpcll183.cup.hp.com>
Message-ID: <B7DD2504-8750-4B64-AF1C-C086C159E4BC@edg.com>


On May 28, 2009, at 10:07 PM, Dennis Handly wrote:

> Looks good.
>
>> From: David Vandevoorde <daveed at edg.com>
>> I noticed that there isn't actually a requirement to point virtual
>> table entried for pure virtual functions at __cxa_pure_virtual.  Is
>> that intentional or just sloppy wording?
>
> Well, why have __cxa_pure_virtual without using it?  ;-)


I was wondering about that.  Maybe if a pure virtual function has an  
implementation one could call that implementation?


> I have a suggestion for the signature for __cxa_pure_virtual and the  
> new
> __cxa_deleted_virtual:
>
> extern "C" void __cxa_deleted_virtual(void *this_ptr);
> extern "C" void __cxa_pure_virtual(void *this_ptr);
>
> Where this_ptr can be cast to a dummy polymorphic class to get the  
> class
> name to print a nicer message:
>
> // A dummy polymorphic class to make typeid() do the work below.
> class pv_dummy {
> public:
>    virtual void dummy_func();
> };
> extern "C" {
> extern void abort();
> void __cxa_pure_virtual (void *this_ptr)
> {
>    pv_dummy *obj = (pv_dummy*)this_ptr;
>    const char *mangled_name = typeid(*obj).name();
>    const char *demangled_name = abi::__cxa_demangle(mangled_name, 0,  
> 0, 0);
>    if (!demangled_name)  // out of space?
>        demangled_name = mangled_name;
>    fprintf(stderr, "aCC runtime: pure virtual function called for  
> class \"%s\".
> \n", demangled_name);
>    abort();
> }
> }


Nice!  But would that break backward compatibility?


>
> --Apple-Mail-17--1051914877
> 	filename=deleted_funcs.diffs
> + <li>If C::f is a pure virtual function, the corresponding virtual  
> table
> + entry may point to __cxa_pure_virtual
>
> Did you want to explain why you used "may"?


That's what I was referring to: The existing text didn't require  
entries corresponding to pure virtual functions to point to  
__cxa_pure_virtual.  So I left that uncertainty in the words I added.


> Is this the case of declaring it pure but still having a definition?
> (for the destructor)


I don't know, unfortunately.  I think I attended all the meetings and  
read all the mailing list discussions, but it doesn't ring a bell.

	Daveed



From perry at ca.ibm.com  Fri May 29 15:07:26 2009
From: perry at ca.ibm.com (Sean Perry)
Date: Fri, 29 May 2009 11:07:26 -0400
Subject: [cxx-abi-dev] Deleted virtual functions
In-Reply-To: <200905290207.TAA00958@hpcll183.cup.hp.com>
Message-ID: <OF762D46DE.EC2B255D-ON852575C5.00528015-852575C5.005314D0@ca.ibm.com>


The C linkage would be a problem on platforms that use a different calling.
The compiler is going to generate code that assumes the functions pointed
to by the virtual function table have C++ linkage.  These functions should
have C++ linkage too.

--
Sean Perry
Compiler Development
IBM Canada Lab
(905)-413-6031 (tie 313-6031), fax (905)-413-4839



                                                                           
             Dennis Handly                                                 
             <dhandly at cup.hp.c                                             
             om>                                                        To 
                                       jason at redhat.com,                   
             05/28/2009 10:07          mark at codesourcery.com               
             PM                                                         cc 
                                       cxx-abi-dev at codesourcery.com,       
                                       daveed at edg.com                      
                                                                   Subject 
                                       Re: [cxx-abi-dev] Deleted virtual   
                                       functions                           
                                                                           
                                                                           
                                                                           
                                                                           
                                                                           
                                                                           




Looks good.

>From: David Vandevoorde <daveed at edg.com>
>I noticed that there isn't actually a requirement to point virtual
>table entried for pure virtual functions at __cxa_pure_virtual.  Is
>that intentional or just sloppy wording?

Well, why have __cxa_pure_virtual without using it?  ;-)

I have a suggestion for the signature for __cxa_pure_virtual and the new
__cxa_deleted_virtual:

extern "C" void __cxa_deleted_virtual(void *this_ptr);
extern "C" void __cxa_pure_virtual(void *this_ptr);

Where this_ptr can be cast to a dummy polymorphic class to get the class
name to print a nicer message:

// A dummy polymorphic class to make typeid() do the work below.
class pv_dummy {
public:
    virtual void dummy_func();
};
extern "C" {
extern void abort();
void __cxa_pure_virtual (void *this_ptr)
{
    pv_dummy *obj = (pv_dummy*)this_ptr;
    const char *mangled_name = typeid(*obj).name();
    const char *demangled_name = abi::__cxa_demangle(mangled_name, 0, 0,
0);
    if (!demangled_name)  // out of space?
        demangled_name = mangled_name;
    fprintf(stderr, "aCC runtime: pure virtual function called for class
\"%s\".
\n", demangled_name);
    abort();
}
}

--Apple-Mail-17--1051914877
             filename=deleted_funcs.diffs
+ <li>If C::f is a pure virtual function, the corresponding virtual table
+ entry may point to __cxa_pure_virtual

Did you want to explain why you used "may"?
Is this the case of declaring it pure but still having a definition?
(for the destructor)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://sourcerytools.com/pipermail/cxx-abi-dev/attachments/20090529/05640969/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: graycol.gif
Type: image/gif
Size: 105 bytes
Desc: not available
URL: <http://sourcerytools.com/pipermail/cxx-abi-dev/attachments/20090529/05640969/attachment.gif>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: pic05484.gif
Type: image/gif
Size: 1255 bytes
Desc: not available
URL: <http://sourcerytools.com/pipermail/cxx-abi-dev/attachments/20090529/05640969/attachment-0001.gif>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: ecblank.gif
Type: image/gif
Size: 45 bytes
Desc: not available
URL: <http://sourcerytools.com/pipermail/cxx-abi-dev/attachments/20090529/05640969/attachment-0002.gif>

From daveed at edg.com  Fri May 29 15:21:56 2009
From: daveed at edg.com (David Vandevoorde)
Date: Fri, 29 May 2009 11:21:56 -0400
Subject: [cxx-abi-dev] Deleted virtual functions
In-Reply-To: <OF762D46DE.EC2B255D-ON852575C5.00528015-852575C5.005314D0@ca.ibm.com>
References: <OF762D46DE.EC2B255D-ON852575C5.00528015-852575C5.005314D0@ca.ibm.com>
Message-ID: <366D0E86-5393-469B-846A-6521BF943AB9@edg.com>


On May 29, 2009, at 11:07 AM, Sean Perry wrote:

> The C linkage would be a problem on platforms that use a different  
> calling. The compiler is going to generate code that assumes the  
> functions pointed to by the virtual function table have C++ linkage.  
> These functions should have C++ linkage too.
>

That thought crossed my mind, and then I dismissed it because  
__cxa_pure_virtual is already that way.

I think the API functions should keep C linkage, but the vtable should  
be allowed to point to a wrapper for these functions with C++ linkage.

Does that work?

	Daveed


>
> --
> Sean Perry
> Compiler Development
> IBM Canada Lab
> (905)-413-6031 (tie 313-6031), fax (905)-413-4839
>
> <graycol.gif>Dennis Handly <dhandly at cup.hp.com>
>
>
> Dennis Handly <dhandly at cup.hp.com>
> 05/28/2009 10:07 PM
>
> <ecblank.gif>
> To
> <ecblank.gif>
> jason at redhat.com, mark at codesourcery.com
> <ecblank.gif>
> cc
> <ecblank.gif>
> cxx-abi-dev at codesourcery.com, daveed at edg.com
> <ecblank.gif>
> Subject
> <ecblank.gif>
> Re: [cxx-abi-dev] Deleted virtual functions
> <ecblank.gif>	<ecblank.gif>
>
> Looks good.
>
> >From: David Vandevoorde <daveed at edg.com>
> >I noticed that there isn't actually a requirement to point virtual
> >table entried for pure virtual functions at __cxa_pure_virtual.  Is
> >that intentional or just sloppy wording?
>
> Well, why have __cxa_pure_virtual without using it?  ;-)
>
> I have a suggestion for the signature for __cxa_pure_virtual and the  
> new
> __cxa_deleted_virtual:
>
> extern "C" void __cxa_deleted_virtual(void *this_ptr);
> extern "C" void __cxa_pure_virtual(void *this_ptr);
>
> Where this_ptr can be cast to a dummy polymorphic class to get the  
> class
> name to print a nicer message:
>
> // A dummy polymorphic class to make typeid() do the work below.
> class pv_dummy {
> public:
>    virtual void dummy_func();
> };
> extern "C" {
> extern void abort();
> void __cxa_pure_virtual (void *this_ptr)
> {
>    pv_dummy *obj = (pv_dummy*)this_ptr;
>    const char *mangled_name = typeid(*obj).name();
>    const char *demangled_name = abi::__cxa_demangle(mangled_name, 0,  
> 0, 0);
>    if (!demangled_name)  // out of space?
>        demangled_name = mangled_name;
>    fprintf(stderr, "aCC runtime: pure virtual function called for  
> class \"%s\".
> \n", demangled_name);
>    abort();
> }
> }
>
> --Apple-Mail-17--1051914877
> filename=deleted_funcs.diffs
> + <li>If C::f is a pure virtual function, the corresponding virtual  
> table
> + entry may point to __cxa_pure_virtual
>
> Did you want to explain why you used "may"?
> Is this the case of declaring it pure but still having a definition?
> (for the destructor)
>

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://sourcerytools.com/pipermail/cxx-abi-dev/attachments/20090529/08b9897d/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: pic05484.gif
Type: image/gif
Size: 1255 bytes
Desc: not available
URL: <http://sourcerytools.com/pipermail/cxx-abi-dev/attachments/20090529/08b9897d/attachment.gif>

From mark at codesourcery.com  Fri May 29 15:22:14 2009
From: mark at codesourcery.com (Mark Mitchell)
Date: Fri, 29 May 2009 08:22:14 -0700
Subject: [cxx-abi-dev] Deleted virtual functions
In-Reply-To: <200905290207.TAA00958@hpcll183.cup.hp.com>
References: <200905290207.TAA00958@hpcll183.cup.hp.com>
Message-ID: <4A1FFDA6.9050808@codesourcery.com>

Dennis Handly wrote:

> Well, why have __cxa_pure_virtual without using it?  ;-)

I do not think it would be a good idea to require that a compiler put
__cxa_pure_virtual into the virtual table.  For code-size optimization,
having a simple NULL pointer is better.  (Note that some implementations
of __cxa_pure_virtual call fprintf, and thereby drag in the whole I/O
library; it's not just the cost of the __cxa_pure_virtual function
itself.)  And in some environments, there may be better functions to call.

I view __cxa_pure_virtual as a requirement on a conforming library, not
on a conforming compiler.  The run-time library must provide this
function, so that compilers that choose to use it can put it in the
virtual table.  Therefore, I believe the current "may" wording is
intentional and desirable.

I also think that precedent should be followed for the new
__cxa_deleted_virtual.  One advantage of that is that a compiler that
wants to work with an older run-time library (i.e., one that does not
contain __cxa_deleted_virtual) can use a NULL pointer.

-- 
Mark Mitchell
CodeSourcery
mark at codesourcery.com
(650) 331-3385 x713


From mark at codesourcery.com  Fri May 29 15:25:06 2009
From: mark at codesourcery.com (Mark Mitchell)
Date: Fri, 29 May 2009 08:25:06 -0700
Subject: [cxx-abi-dev] Deleted virtual functions
In-Reply-To: <366D0E86-5393-469B-846A-6521BF943AB9@edg.com>
References: <OF762D46DE.EC2B255D-ON852575C5.00528015-852575C5.005314D0@ca.ibm.com> <366D0E86-5393-469B-846A-6521BF943AB9@edg.com>
Message-ID: <4A1FFE52.3090109@codesourcery.com>

David Vandevoorde wrote:

> I think the API functions should keep C linkage, but the vtable should
> be allowed to point to a wrapper for these functions with C++ linkage.

Yes -- provided you accept my view that the requirements on these
functions are merely that the run-time library must provide them.  Then,
the compiler is free to put whatever it wants into the virtual table --
including, if necessary, a reference to a wrapper.

-- 
Mark Mitchell
CodeSourcery
mark at codesourcery.com
(650) 331-3385 x713


From daveed at edg.com  Fri May 29 15:39:59 2009
From: daveed at edg.com (David Vandevoorde)
Date: Fri, 29 May 2009 11:39:59 -0400
Subject: [cxx-abi-dev] Deleted virtual functions
In-Reply-To: <4A1FFE52.3090109@codesourcery.com>
References: <OF762D46DE.EC2B255D-ON852575C5.00528015-852575C5.005314D0@ca.ibm.com> <366D0E86-5393-469B-846A-6521BF943AB9@edg.com> <4A1FFE52.3090109@codesourcery.com>
Message-ID: <E96CAD61-B3FD-4DF3-907E-48D5F99EF62E@edg.com>


On May 29, 2009, at 11:25 AM, Mark Mitchell wrote:

> David Vandevoorde wrote:
>
>> I think the API functions should keep C linkage, but the vtable  
>> should
>> be allowed to point to a wrapper for these functions with C++  
>> linkage.
>
> Yes -- provided you accept my view that the requirements on these
> functions are merely that the run-time library must provide them.   
> Then,
> the compiler is free to put whatever it wants into the virtual table  
> --
> including, if necessary, a reference to a wrapper.


Yes, I'm fine with that.

I'll try to work up a revised patch soon.

	Daveed




From crowl at google.com  Fri May 29 19:01:22 2009
From: crowl at google.com (Lawrence Crowl)
Date: Fri, 29 May 2009 12:01:22 -0700
Subject: [cxx-abi-dev] Deleted virtual functions
In-Reply-To: <4A1FFDA6.9050808@codesourcery.com>
References: <200905290207.TAA00958@hpcll183.cup.hp.com>
	 <4A1FFDA6.9050808@codesourcery.com>
Message-ID: <29bd08b70905291201y4cf5ad08ha1ad8da4ad447fd8@mail.gmail.com>

On 5/29/09, Mark Mitchell <mark at codesourcery.com> wrote:
> Dennis Handly wrote:
> > Well, why have __cxa_pure_virtual without using it?  ;-)
>
> I do not think it would be a good idea to require that a compiler
> put __cxa_pure_virtual into the virtual table.  For code-size
> optimization, having a simple NULL pointer is better.

Why is this a concern?  The tables are in .rodata and bounded by
the number of distinct classes, which is generally quite reasonable.

> (Note that some implementations of __cxa_pure_virtual call fprintf,
> and thereby drag in the whole I/O library; it's not just the
> cost of the __cxa_pure_virtual function itself.)  And in some
> environments, there may be better functions to call.
>
> I view __cxa_pure_virtual as a requirement on a conforming library,
> not on a conforming compiler.  The run-time library must provide
> this function, so that compilers that choose to use it can put
> it in the virtual table.  Therefore, I believe the current "may"
> wording is intentional and desirable.
>
> I also think that precedent should be followed for the new
> __cxa_deleted_virtual.  One advantage of that is that a compiler
> that wants to work with an older run-time library (i.e., one that
> does not contain __cxa_deleted_virtual) can use a NULL pointer.

I am not convinced that a new compiler will be able to use an old
library in general.  Explaining when it can and cannot use an old
library often causes more problems than it fixes.

-- 
Lawrence Crowl


From mark at codesourcery.com  Fri May 29 19:19:09 2009
From: mark at codesourcery.com (Mark Mitchell)
Date: Fri, 29 May 2009 12:19:09 -0700
Subject: [cxx-abi-dev] Deleted virtual functions
In-Reply-To: <29bd08b70905291201y4cf5ad08ha1ad8da4ad447fd8@mail.gmail.com>
References: <200905290207.TAA00958@hpcll183.cup.hp.com>	 <4A1FFDA6.9050808@codesourcery.com> <29bd08b70905291201y4cf5ad08ha1ad8da4ad447fd8@mail.gmail.com>
Message-ID: <4A20352D.8000105@codesourcery.com>

Lawrence Crowl wrote:

>> I do not think it would be a good idea to require that a compiler
>> put __cxa_pure_virtual into the virtual table.  For code-size
>> optimization, having a simple NULL pointer is better.
> 
> Why is this a concern?  The tables are in .rodata and bounded by
> the number of distinct classes, which is generally quite reasonable.

On small embedded systems, every byte counts.  Period.

For example, some of the new Luminary Micro ARM-based parts have 8K
flash.  And, yes, people want to use C++ on such systems.

> I am not convinced that a new compiler will be able to use an old
> library in general. 

It may not.  But, that's up to the compiler.  If the ABI mandates that
virtual table slots for deleted virtual functions *must* contain the
address of __cxa_deleted_virtual that prevents what might be a good
implementation choice on some systems.  For example, someone might want
to be able to use deleted virtual functions on an existing Linux
distribution, without having to upgrade libstdc++.

-- 
Mark Mitchell
CodeSourcery
mark at codesourcery.com
(650) 331-3385 x713


From crowl at google.com  Fri May 29 20:11:34 2009
From: crowl at google.com (Lawrence Crowl)
Date: Fri, 29 May 2009 13:11:34 -0700
Subject: [cxx-abi-dev] Deleted virtual functions
In-Reply-To: <4A20352D.8000105@codesourcery.com>
References: <200905290207.TAA00958@hpcll183.cup.hp.com>
	 <4A1FFDA6.9050808@codesourcery.com>
	 <29bd08b70905291201y4cf5ad08ha1ad8da4ad447fd8@mail.gmail.com>
	 <4A20352D.8000105@codesourcery.com>
Message-ID: <29bd08b70905291311u47d59fd1s9aa04e78814011ef@mail.gmail.com>

On 5/29/09, Mark Mitchell <mark at codesourcery.com> wrote:
> Lawrence Crowl wrote:
> > > I do not think it would be a good idea to require that a
> > > compiler put __cxa_pure_virtual into the virtual table.
> > > For code-size optimization, having a simple NULL pointer
> > > is better.
> >
> > Why is this a concern?  The tables are in .rodata and bounded
> > by the number of distinct classes, which is generally quite
> > reasonable.
>
> On small embedded systems, every byte counts.  Period.
>
> For example, some of the new Luminary Micro ARM-based parts have
> 8K flash.  And, yes, people want to use C++ on such systems.

The issue wasn't importance, but effectiveness.

Hm.  I suppose if you are sharing virtual tables between classes
it could matter.

> > I am not convinced that a new compiler will be able to use an
> > old library in general.
>
> It may not.  But, that's up to the compiler.  If the ABI mandates
> that virtual table slots for deleted virtual functions *must*
> contain the address of __cxa_deleted_virtual that prevents
> what might be a good implementation choice on some systems.
> For example, someone might want to be able to use deleted virtual
> functions on an existing Linux distribution, without having to
> upgrade libstdc++.

I do not object to the flexibility.  However, I would prefer the
choice to require the __cxa_deleted_virtual be available to the
programmer.  Admittedly, this is quality-of-implementation.

-- 
Lawrence Crowl


From mark at codesourcery.com  Fri May 29 20:17:33 2009
From: mark at codesourcery.com (Mark Mitchell)
Date: Fri, 29 May 2009 13:17:33 -0700
Subject: [cxx-abi-dev] Deleted virtual functions
In-Reply-To: <29bd08b70905291311u47d59fd1s9aa04e78814011ef@mail.gmail.com>
References: <200905290207.TAA00958@hpcll183.cup.hp.com>	 <4A1FFDA6.9050808@codesourcery.com>	 <29bd08b70905291201y4cf5ad08ha1ad8da4ad447fd8@mail.gmail.com>	 <4A20352D.8000105@codesourcery.com> <29bd08b70905291311u47d59fd1s9aa04e78814011ef@mail.gmail.com>
Message-ID: <4A2042DD.3050308@codesourcery.com>

Lawrence Crowl wrote:

> Hm.  I suppose if you are sharing virtual tables between classes
> it could matter.

It matters, period.  It's a few bytes, and when you only have a few
thousand of them, you count every one.

-- 
Mark Mitchell
CodeSourcery
mark at codesourcery.com
(650) 331-3385 x713


From dhandly at cup.hp.com  Sat May 30 04:56:17 2009
From: dhandly at cup.hp.com (Dennis Handly)
Date: Fri, 29 May 2009 21:56:17 -0700 (PDT)
Subject: [cxx-abi-dev] Deleted virtual functions
Message-ID: <200905300456.VAA07353@hpcll183.cup.hp.com>

>From: David Vandevoorde <daveed at edg.com>
>Maybe if a pure virtual function has an  
>implementation one could call that implementation?

Yes but only in the sources that have a key function or if that implementation
is defined everywhere.

>> void __cxa_pure_virtual (void *this_ptr)

>But would that break backward compatibility?
	Daveed

Not on my implementation where C and C++ calling conventions are the same.
Perhaps for the ABI document.
Though it could be added as an engineering note. :-)

But it would be a good idea for this new function.

>From: Sean Perry <perry at ca.ibm.com>
>The C linkage would be a problem on platforms that use a different calling.

It won't be any worse than now.  And that function will abort anyway
and already has the wrong number of parms.

>The compiler is going to generate code that assumes the functions pointed
>to by the virtual function table have C++ linkage.  These functions should
>have C++ linkage too.
Sean Perry

>From: Mark Mitchell <mark at codesourcery.com>
>I do not think it would be a good idea to require that a compiler put
>__cxa_pure_virtual into the virtual table.  For code-size optimization,
>having a simple NULL pointer is better.

Ok.  And NULL is constant, a function pointer/descriptor isn't.

>(Note that some implementations of __cxa_pure_virtual call fprintf, and
>thereby drag in the whole I/O library; it's not just the cost of the
>__cxa_pure_virtual function itself.)

I don't see this as an issue.  If there is a __cxa_pure_virtual that
calls fprintf the cost is already paid?  At least in a shared lib
implementation.

>I view __cxa_pure_virtual as a requirement on a conforming library, not
>on a conforming compiler.

Ok.

>One advantage of that is that a compiler that
>wants to work with an older run-time library (i.e., one that does not
>contain __cxa_deleted_virtual) can use a NULL pointer.
Mark Mitchell

I assume the Standard says that if you manage to call that function, it's
your tough luck?  ;-)

Are we going to explain that "may" in detail in the ABI so we don't have to
have this mail exchange again?

>From: David Vandevoorde <daveed at edg.com>
>That thought crossed my mind, and then I dismissed it because  
>__cxa_pure_virtual is already that way.

Yes.

>I think the API functions should keep C linkage, but the vtable should  
>be allowed to point to a wrapper for these functions with C++ linkage.
>Does that work?
	Daveed

Sure.

>From: Mark Mitchell <mark at codesourcery.com>
>Yes -- provided you accept my view that the requirements on these
>functions are merely that the run-time library must provide them.  Then,
>the compiler is free to put whatever it wants into the virtual table --
>including, if necessary, a reference to a wrapper.

Sure.

>From: Lawrence Crowl <crowl at google.com>
>Why is this a concern?  The tables are in .rodata and bounded by
>the number of distinct classes, which is generally quite reasonable.

No they aren't always for my implementation.  You can only put vtables
in .rodata by using advanced AI technology and getting the user to promise
where the functions are.
I.e. in the current executable and not in some other shlibs.
One bad external function blows the whole vtable.

Note we use function descriptors and not plabels.  The later could
use a pointer to read/write data.

>Explaining when it can and cannot use an old library often causes more
>problems than it fixes.
Lawrence Crowl

I assume you are talking about all of the other new incompatible features
in the new Standard.

>From: Lawrence Crowl <crowl at google.com>
>I do not object to the flexibility.  However, I would prefer the
>choice to require the __cxa_deleted_virtual be available to the
>programmer.  Admittedly, this is quality-of-implementation.

And that's why I want to be able to print the class name in the error
message.  Rather than getting a signal.


From mark at codesourcery.com  Sun May 31 16:10:26 2009
From: mark at codesourcery.com (Mark Mitchell)
Date: Sun, 31 May 2009 09:10:26 -0700
Subject: [cxx-abi-dev] Deleted virtual functions
In-Reply-To: <200905300456.VAA07353@hpcll183.cup.hp.com>
References: <200905300456.VAA07353@hpcll183.cup.hp.com>
Message-ID: <4A22ABF2.5070109@codesourcery.com>

Dennis Handly wrote:

> Not on my implementation where C and C++ calling conventions are the same.

Given the precedent set with __cxa_pure_virtual, I think we should just
stick with extern "C".  Having half a solution isn't really very
interesting.  If we care about implementations where C and C++ linkage
are incompatible, we should go through the document, find places where
that assumption shows, and add new entry points as necessary.  (We
cannot of course remove the existing functions, but we could add new
functions with C++ linkage.)

But, are there are at this point any implementations for which C and C++
linkage are incompatible in terms of calling conventions?  If this is
just a theoretical concern, then we should leave it alone; that the ABI
constrains new implementations which wish to follow the ABI is not an
inherent problem.

>> (Note that some implementations of __cxa_pure_virtual call fprintf, and
>> thereby drag in the whole I/O library; it's not just the cost of the
>> __cxa_pure_virtual function itself.)
> 
> I don't see this as an issue.  If there is a __cxa_pure_virtual that
> calls fprintf the cost is already paid?  At least in a shared lib
> implementation.

Yes -- but for small embedded systems there are no shared libraries.

> I assume the Standard says that if you manage to call that function, it's
> your tough luck?  ;-)

Yes.

> Are we going to explain that "may" in detail in the ABI so we don't have to
> have this mail exchange again?

We can ask Daveed if he will add a note to his drafting. :-)  If not, I
can add one.

-- 
Mark Mitchell
CodeSourcery
mark at codesourcery.com
(650) 331-3385 x713


From crowl at google.com  Sun May 31 21:42:33 2009
From: crowl at google.com (Lawrence Crowl)
Date: Sun, 31 May 2009 14:42:33 -0700
Subject: [cxx-abi-dev] Deleted virtual functions
In-Reply-To: <200905300456.VAA07353@hpcll183.cup.hp.com>
References: <200905300456.VAA07353@hpcll183.cup.hp.com>
Message-ID: <29bd08b70905311442n61922ea0p416dc752226b3b41@mail.gmail.com>

On 5/29/09, Dennis Handly <dhandly at cup.hp.com> wrote:
> > Explaining when it can and cannot use an old library often
> > causes more problems than it fixes.
> Lawrence Crowl
>
> I assume you are talking about all of the other new incompatible
> features in the new Standard.

Yes, the whole language and library combination.  As implementors,
we are accustomed to thinking in terms of piecemeal compatibility.
Most programmers are not, and so confusion arises.

-- 
Lawrence Crowl


