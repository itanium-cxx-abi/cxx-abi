From mark at codesourcery.com  Wed Oct  7 22:10:55 2009
From: mark at codesourcery.com (Mark Mitchell)
Date: Wed, 07 Oct 2009 15:10:55 -0700
Subject: [cxx-abi-dev] Mangling C++0x Lambdas
In-Reply-To: <53BA1F85-423B-4462-A0F0-5365450D9F41@edg.com>
References: <325117E2-DBE7-488C-B8C7-554A3B80F54E@edg.com>	 <24b520d20812151000n586ad5e4yee947efbaa43774e@mail.gmail.com>	 <29bd08b70812151202jb9e9d24n2f2816edde9a3055@mail.gmail.com> <24b520d20812151240j7d6dc575t8109cc7e4e446839@mail.gmail.com> <49491D36.6010308@cs.tamu.edu> <A63A5AAD-5ECC-4143-ABC7-57F908AEEF69@edg.com> <047E28BE-88E0-4ED1-8DCF-7319D0708662@edg.com> <20DEB312-E433-4847-9092-0208D3DD5660@edg.com> <30EE21E0-FDF6-471D-8A1E-180580BB75C1@edg.com> <49C27637.1090204@codesourcery.com> <04D69AFA-96FF-4612-98C2-072A562EB916@edg.com> <2DBA2615-6CD8-45FA-B146-81F9DD198CB7@edg.com> <167875D3-F9C9-4DD0-AFC5-522A881F99D9@edg.com> <8B186783-6955-437B-8B47-C048BB14FAB2@edg.com> <4ABA8635.5040008@redhat.com> <53BA1F85-423B-4462-A0F0-5365450D9F41@edg.com>
Message-ID: <4ACD11EF.2000701@codesourcery.com>

David Vandevoorde wrote:

>> Could we change the mangling of closures in default arguments to count
>> from left to right like the mangling for function parameters that
>> appear in late-specified return types?
> 
> Unless there is a compelling reason to do so, we'd rather not: We have
> already shipped a version with the mangling as specified (and that
> mangling is a tiny bit more compact).

Since it seemed everyone was happy, I've checked in the version that
Daveed posted here:

http://www.codesourcery.com/archives/cxx-abi-dev/msg02153.html

Thanks,

-- 
Mark Mitchell
CodeSourcery
mark at codesourcery.com
(650) 331-3385 x713


From jason at redhat.com  Thu Oct  8 13:37:56 2009
From: jason at redhat.com (Jason Merrill)
Date: Thu, 08 Oct 2009 09:37:56 -0400
Subject: [cxx-abi-dev] Mangling C++0x Lambdas
In-Reply-To: <4ACD11EF.2000701@codesourcery.com>
References: <325117E2-DBE7-488C-B8C7-554A3B80F54E@edg.com>	 <24b520d20812151000n586ad5e4yee947efbaa43774e@mail.gmail.com>	 <29bd08b70812151202jb9e9d24n2f2816edde9a3055@mail.gmail.com> <24b520d20812151240j7d6dc575t8109cc7e4e446839@mail.gmail.com> <49491D36.6010308@cs.tamu.edu> <A63A5AAD-5ECC-4143-ABC7-57F908AEEF69@edg.com> <047E28BE-88E0-4ED1-8DCF-7319D0708662@edg.com> <20DEB312-E433-4847-9092-0208D3DD5660@edg.com> <30EE21E0-FDF6-471D-8A1E-180580BB75C1@edg.com> <49C27637.1090204@codesourcery.com> <04D69AFA-96FF-4612-98C2-072A562EB916@edg.com> <2DBA2615-6CD8-45FA-B146-81F9DD198CB7@edg.com> <167875D3-F9C9-4DD0-AFC5-522A881F99D9@edg.com> <8B186783-6955-437B-8B47-C048BB14FAB2@edg.com> <4ABA8635.5040008@redhat.com> <53BA1F85-423B-4462-A0F0-5365450D9F41@edg.com> <4ACD11EF.2000701@codesourcery.com>
Message-ID: <4ACDEB34.3090701@redhat.com>

On 10/07/2009 06:10 PM, Mark Mitchell wrote:
> Since it seemed everyone was happy, I've checked in the version that
> Daveed posted here:
>
> http://www.codesourcery.com/archives/cxx-abi-dev/msg02153.html

And it's now implemented in G++ as well.

Jason


From janis187 at us.ibm.com  Tue Oct 13 21:05:35 2009
From: janis187 at us.ibm.com (Janis Johnson)
Date: Tue, 13 Oct 2009 14:05:35 -0700
Subject: decimal float argument passing
Message-ID: <1255467935.5960.8.camel@janis-laptop>

I'm not subscribed to this list and didn't see Daveed's response to my
mail asking how to request a change to the C++ ABI document requiring
the decimal classes defined in TR 24733 to be passed the same as the
corresponding native decimal float scalar types.  I'm ready to write
a patch against the ABI document; where is it?

Janis




From mark at codesourcery.com  Tue Oct 13 21:36:53 2009
From: mark at codesourcery.com (Mark Mitchell)
Date: Tue, 13 Oct 2009 14:36:53 -0700
Subject: [cxx-abi-dev] decimal float argument passing
In-Reply-To: <1255467935.5960.8.camel@janis-laptop>
References: <1255467935.5960.8.camel@janis-laptop>
Message-ID: <4AD4F2F5.7040503@codesourcery.com>

Janis Johnson wrote:

> I'm not subscribed to this list and didn't see Daveed's response to my
> mail asking how to request a change to the C++ ABI document requiring
> the decimal classes defined in TR 24733 to be passed the same as the
> corresponding native decimal float scalar types.  I'm ready to write
> a patch against the ABI document; where is it?

The "source code" is just this:

http://www.codesourcery.com/public/cxx-abi/abi.html

It was originally in some other format, but when it moved from SGI to
CodeSourcery, all we got was the HTML.  And ugly HTML it is.  But, you
will get by... :-)

-- 
Mark Mitchell
CodeSourcery
mark at codesourcery.com
(650) 331-3385 x713


From janis187 at us.ibm.com  Tue Oct 13 22:51:12 2009
From: janis187 at us.ibm.com (Janis Johnson)
Date: Tue, 13 Oct 2009 15:51:12 -0700
Subject: patch to C++ ABI doc for decimal float classes
Message-ID: <1255474272.5960.10.camel@janis-laptop>

This patch to the C++ ABI document provides exceptions to the usual
function calling convention and mangling rules to treat the decimal
classes defined in TR 24733 the same as the corresponding native
scalar types.  Please consider it and, if it's acceptable, apply it.

Janis Johnson

--- abi.html.orig	2009-10-13 15:36:16.000000000 -0700
+++ abi.html	2009-10-13 15:46:08.000000000 -0700
@@ -2577,7 +2577,12 @@
 <p>
 In general, C++ value parameters are handled just like C parameters.
 This includes class type parameters passed wholly or partially in registers.
-However, in the special case where the parameter type has a non-trivial
+There are, however, some special cases.
+</p><ol type="1">
+<p>
+</p><li>
+<p>
+In the special case where the parameter type has a non-trivial
 copy constructor or destructor,
 the caller must allocate space for a temporary copy,
 and pass the resulting copy by reference (below).
@@ -2622,7 +2627,16 @@
 If necessary (e.g. if the parameter was allocated on the heap),
 the caller deallocates space after return and destruction.
 
+<p></p> </li></ul>
+<li>
+In the case where the parameter type is class
+<code>std::decimal::decimal32</code>, <code>std::decimal::decimal64</code>,
+or <code>std::decimal::decimal128</code> as defined in TR 24733, the
+parameter is passed the same as the corresponding native decimal
+floating-point scalar type.
+<p></p>
 </li></ul>
+</ol>
 
 
 <p>
@@ -2663,6 +2677,12 @@
 The callee constructs the return value into this temporary.
 
 </p><p>
+Another exception is that a return value type of class
+<code>std::decimal::decimal32</code>, <code>std::decimal::decimal64</code>,
+or <code>std::decimal::decimal128</code> as defined in TR 24733 is returned
+the same as the corresponding native decimal floating-point scalar type.
+
+</p><p>
 A result of an empty class type will be returned as though it were
 a struct containing a single char,
 i.e. <code>struct S { char c; };</code>.
@@ -4343,6 +4363,13 @@
   &lt;class-enum-type&gt; ::= &lt;name&gt;
 </font></code></pre>
 
+<p>
+An exception, however, is that class <code>std::decimal::decimal32</code>,
+<code>std::decimal::decimal64</code>, or <code>std::decimal::decimal128</code>
+as defined in TR 24733 uses the same encoding as the corresponding native
+decimal-floating point scalar type.
+
+</p><p>
 Unnamed class, union, and enum types that aren't closure types, that
 haven't acquired a "name for linkage purposes" (through a typedef), and
 that aren't anonymous union types, follow




From jason at redhat.com  Fri Oct 23 17:33:54 2009
From: jason at redhat.com (Jason Merrill)
Date: Fri, 23 Oct 2009 10:33:54 -0700
Subject: Tweak to mangling spec
Message-ID: <4AE1E902.7090502@redhat.com>

The mangling spec currently has

   <template-args> ::= I <template-arg>+ E

but we've gotten a bug report 
(http://gcc.gnu.org/bugzilla/show_bug.cgi?id=40808) that requires 
mangling of a dependent template-id with no template args; the above 
should be changed to

   <template-args> ::= I <template-arg>* E

Jason


From mark at codesourcery.com  Fri Oct 23 21:53:52 2009
From: mark at codesourcery.com (Mark Mitchell)
Date: Fri, 23 Oct 2009 14:53:52 -0700
Subject: [cxx-abi-dev] Tweak to mangling spec
In-Reply-To: <4AE1E902.7090502@redhat.com>
References: <4AE1E902.7090502@redhat.com>
Message-ID: <4AE225F0.5090003@codesourcery.com>

Jason Merrill wrote:

> but we've gotten a bug report
> (http://gcc.gnu.org/bugzilla/show_bug.cgi?id=40808) that requires
> mangling of a dependent template-id with no template args; the above
> should be changed to
> 
>   <template-args> ::= I <template-arg>* E

Makes sense to me.  If there are no objections within a few days, I'll
check in that change.

Thanks,

-- 
Mark Mitchell
CodeSourcery
mark at codesourcery.com
(650) 331-3385 x713


From jason at redhat.com  Tue Oct 27 23:04:22 2009
From: jason at redhat.com (Jason Merrill)
Date: Tue, 27 Oct 2009 19:04:22 -0400
Subject: [cxx-abi-dev] Mangling C++0x Lambdas
In-Reply-To: <8B186783-6955-437B-8B47-C048BB14FAB2@edg.com>
References: <325117E2-DBE7-488C-B8C7-554A3B80F54E@edg.com>	 <24b520d20812151000n586ad5e4yee947efbaa43774e@mail.gmail.com>	 <29bd08b70812151202jb9e9d24n2f2816edde9a3055@mail.gmail.com> <24b520d20812151240j7d6dc575t8109cc7e4e446839@mail.gmail.com> <49491D36.6010308@cs.tamu.edu> <A63A5AAD-5ECC-4143-ABC7-57F908AEEF69@edg.com> <047E28BE-88E0-4ED1-8DCF-7319D0708662@edg.com> <20DEB312-E433-4847-9092-0208D3DD5660@edg.com> <30EE21E0-FDF6-471D-8A1E-180580BB75C1@edg.com> <49C27637.1090204@codesourcery.com> <04D69AFA-96FF-4612-98C2-072A562EB916@edg.com> <2DBA2615-6CD8-45FA-B146-81F9DD198CB7@edg.com> <167875D3-F9C9-4DD0-AFC5-522A881F99D9@edg.com> <8B186783-6955-437B-8B47-C048BB14FAB2@edg.com>
Message-ID: <4AE77C76.1020806@redhat.com>

The obvious change to make the op() of a [] lambda a static member 
function changes the mangling, since the function is no longer "const". 
  And, of course, it changes the calling convention, since there's no 
'this' argument anymore, so I don't think it's worthwhile to add a fake 
"const" to the mangling.

It would be possible to leave it as a non-static member function and 
have the conversion op return a helper function, but it seems early to 
be locking down the lambda ABI.  We should also discuss closure layout, 
particularly of capture by reference.

Jason



From daveed at edg.com  Wed Oct 28 19:16:55 2009
From: daveed at edg.com (David Vandevoorde)
Date: Wed, 28 Oct 2009 15:16:55 -0400
Subject: [cxx-abi-dev] Mangling C++0x Lambdas
In-Reply-To: <4AE77C76.1020806@redhat.com>
References: <325117E2-DBE7-488C-B8C7-554A3B80F54E@edg.com>	 <24b520d20812151000n586ad5e4yee947efbaa43774e@mail.gmail.com>	 <29bd08b70812151202jb9e9d24n2f2816edde9a3055@mail.gmail.com> <24b520d20812151240j7d6dc575t8109cc7e4e446839@mail.gmail.com> <49491D36.6010308@cs.tamu.edu> <A63A5AAD-5ECC-4143-ABC7-57F908AEEF69@edg.com> <047E28BE-88E0-4ED1-8DCF-7319D0708662@edg.com> <20DEB312-E433-4847-9092-0208D3DD5660@edg.com> <30EE21E0-FDF6-471D-8A1E-180580BB75C1@edg.com> <49C27637.1090204@codesourcery.com> <04D69AFA-96FF-4612-98C2-072A562EB916@edg.com> <2DBA2615-6CD8-45FA-B146-81F9DD198CB7@edg.com> <167875D3-F9C9-4DD0-AFC5-522A881F99D9@edg.com> <8B186783-6955-437B-8B47-C048BB14FAB2@edg.com> <4AE77C76.1020806@redhat.com>
Message-ID: <BD4A8CFB-5125-46D7-89AF-F6AEF0228DC9@edg.com>


On Oct 27, 2009, at 7:04 PM, Jason Merrill wrote:

> The obvious change to make the op() of a [] lambda a static member  
> function changes the mangling, since the function is no longer  
> "const".


I don't think that you can make that change in general: One can form  
pointer-to-member constants for the closure's operator().

(The "Unified Function Syntax" proposal that intended to make it valid  
got shot down in Santa Cruz last week.)

	Daveed



>  And, of course, it changes the calling convention, since there's no  
> 'this' argument anymore, so I don't think it's worthwhile to add a  
> fake "const" to the mangling.
>
> It would be possible to leave it as a non-static member function and  
> have the conversion op return a helper function, but it seems early  
> to be locking down the lambda ABI.  We should also discuss closure  
> layout, particularly of capture by reference.
>
> Jason
>



From jason at redhat.com  Thu Oct 29 04:47:14 2009
From: jason at redhat.com (Jason Merrill)
Date: Thu, 29 Oct 2009 00:47:14 -0400
Subject: [cxx-abi-dev] Mangling C++0x Lambdas
In-Reply-To: <BD4A8CFB-5125-46D7-89AF-F6AEF0228DC9@edg.com>
References: <325117E2-DBE7-488C-B8C7-554A3B80F54E@edg.com>	 <24b520d20812151000n586ad5e4yee947efbaa43774e@mail.gmail.com>	 <29bd08b70812151202jb9e9d24n2f2816edde9a3055@mail.gmail.com> <24b520d20812151240j7d6dc575t8109cc7e4e446839@mail.gmail.com> <49491D36.6010308@cs.tamu.edu> <A63A5AAD-5ECC-4143-ABC7-57F908AEEF69@edg.com> <047E28BE-88E0-4ED1-8DCF-7319D0708662@edg.com> <20DEB312-E433-4847-9092-0208D3DD5660@edg.com> <30EE21E0-FDF6-471D-8A1E-180580BB75C1@edg.com> <49C27637.1090204@codesourcery.com> <04D69AFA-96FF-4612-98C2-072A562EB916@edg.com> <2DBA2615-6CD8-45FA-B146-81F9DD198CB7@edg.com> <167875D3-F9C9-4DD0-AFC5-522A881F99D9@edg.com> <8B186783-6955-437B-8B47-C048BB14FAB2@edg.com> <4AE77C76.1020806@redhat.com> <BD4A8CFB-5125-46D7-89AF-F6AEF0228DC9@edg.com>
Message-ID: <4AE91E52.6090908@redhat.com>

On 10/28/2009 03:16 PM, David Vandevoorde wrote:
> (The "Unified Function Syntax" proposal that intended to make it valid
> got shot down in Santa Cruz last week.)

I was figuring we'd see the lambda conversion piece again next meeting, 
since it seemed uncontroversial.

Jason


