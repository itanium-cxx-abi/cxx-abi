[From nobody Thu Mar  8 00:04:14 2012
X-Mozilla-Status2: 00000000
Message-ID: &lt;392420F0.F570DFC1@zko.dec.com&gt;
Date: Thu, 18 May 2000 12:57:20 -0400
From: Coleen Phillimore &lt;coleen@zko.dec.com&gt;
Organization: Compaq C/C++ Development
X-Mailer: Mozilla 4.72 [en] (X11; I; OSF1 V4.0 alpha)
X-Accept-Language: en
MIME-Version: 1.0
To: Mark Mitchell &lt;mark@codesourcery.com&gt;
Subject: Re: VTT clarification
References: &lt;20000517144554R.mitchell@codesourcery.com&gt;
	&lt;3923311F.A3BF6A8E@sgi.com&gt; &lt;20000517172045W.mitchell@codesourcery.com&gt;
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

Mark Mitchell wrote:
&gt; 
&gt; &gt;&gt;&gt;&gt;&gt; &quot;Jim&quot; == Jim Dehnert &lt;dehnert@sgi.com&gt; writes:
&gt; 
&gt;     Jim&gt; A virtual primary base may move in a further-derived type.
&gt;     Jim&gt; Does that matter, i.e. would it change the VTT layout when
&gt;     Jim&gt; embedded in a VTT for a more-derived type?

I don't think it would.

&gt; 
&gt; I think that's why the note talks about non-virtual primary bases.  I
&gt; think it's precisely the non-virtual primary bases for which we could
&gt; (or should) elide secondary vptrs.

Yes, there should be another condition for including a secondary vptr, and
that should be that the base is not a primary base.  I think that might
clear things up.  Since there's no secondary vtables for primary bases,
there doesn't need to be a secondary vptr in the VTT.

Note that even bases which are primary bases, are considered for the set
of bases which have a VTT.   That is so their RTTI comes out pointing to
the primary base RTTI, rather than derived base RTTI.

&gt; 
&gt; Again, I'm afraid we're optimizing rather prematurely.  In particular,
&gt; the bit:
&gt; 
&gt;     For each subobject X with either (a) virtual bases or (b) virtual
&gt;     function declarations overridden along a virtual path between the
&gt;     declaration and D, the address of the secondary vtable for X-in-D.
&gt; 
&gt; seems a little extreme.  The calculation of how a function is
&gt; overridden is non-trivial, increasing the potential for errors and
&gt; incompatibilities, all to save a few words in the VTT.  I'm not
&gt; confident that's a good tradeoff.

What part of this do you consider an optimization?  Do you think we should
include all secondary vptr's in the VTT, rather than the ones that meet
condition (b) and not (a) above?

The cost of putting all the secondary vptrs in the VTT, is that when
you embed the class as a base class in a more derived class VTT, you have
to either create a construction vtable for all the secondary vptrs, or
use the algorithm in (b) to create some construction vtbls and some of
the the vptrs in the VTT point to (something else...).

The first construction vtable proposal was simpler but had more construction
vtables, but we decided to use this layout instead.  It's sort of late to
change this so late in the specification.

&gt; 
&gt; On the one hand, we need to implement this stuff now and see that it
&gt; works.  On the other hand, if we're going to simplify these things,
&gt; then there's little point in doing the implementation only to remove
&gt; it later.  So, it would be good if we resolve this, and the vcall
&gt; offset issue I raised yesterday, ASAP.

There already *is* an implementation of this.  If you have an alpha linux
box, download the compiler.  I think it's too late in the game to change
this to something simpler and the simpler plan was already scrapped in
favor of saving space in .data, which most of the members of this group
were in support of.

Coleen
&gt; 
&gt; I apologize for missing last week's meeting -- I know that was a more
&gt; appropriate forum for this kind of discussion.
&gt; 
&gt; Thanks,
&gt; 
&gt; --
&gt; Mark Mitchell                   mark@codesourcery.com
&gt; CodeSourcery, LLC               http://www.codesourcery.com

-- 
-----------------------------------------------------------------------
Coleen Phillimore                  | mailto:coleen@zko.dec.com
Compaq Computer Corp.   Nashua, NH | COMPAQ C++ Compiler Development
-----------------------------------------------------------------------
]