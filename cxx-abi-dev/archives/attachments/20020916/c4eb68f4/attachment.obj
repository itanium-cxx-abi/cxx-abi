Index: abi.html
===================================================================
RCS file: /usr/local/Repository/cxx-abi/abi.html,v
retrieving revision 1.29
diff -c -p -r1.29 abi.html
*** abi.html	2002/09/06 20:59:07	1.29
--- abi.html	2002/09/16 19:58:23
*************** Structure:
*** 1184,1194 ****
  </ul>
  
  <p>
! The class has a virtual table for each proper base class
! that has a virtual table.
! These secondary virtual tables for the class
! are constructed from copies of the base class complete object virtual tables.
! The entries are the same, except:
  
  <ul>
  <p>
--- 1184,1193 ----
  </ul>
  
  <p>
! 
! The class has a virtual table for each proper base class that has a
! virtual table.  These secondary virtual table for a base class B has the
! same contents as the primary virtual table for B, except that:
  
  <ul>
  <p>
*************** we shall refer to the virtual table for 
*** 1212,1255 ****
  The virtual pointer of each base subobject of an object of the
  derived class will point to the corresponding base virtual table in this set.
  
- <p>
- The virtual table copied from the primary base class is also called the
- primary virtual table;
- it is addressed by the virtual table pointer at the top of the object.
- The other virtual tables of the class are called secondary virtual tables;
- they are addressed by virtual table pointers inside the object.
- 
  <p>
! Following the function pointer entries that correspond
! to those of the primary base class,
! the primary virtual table holds the following additional entries
! at its tail:
! <ul>
! <li> Entries for virtual functions introduced by this class,
!      i.e. those not declared by any of its bases.
! 
! <li> Entries for overridden virtual functions not already present
!      in the virtual table of the primary base class (if any),
!      called replicated entries because they are already
!      in the secondary virtual tables of the class.
! 
! <li> Entries for overridden virtual functions from the primary
!      base class,
!      only if the result types are different (covariant).
!      For purposes of this case,
!      the two types are considered different if one of them is a
!      non-primary or virtual base class of the other.
!      (If the base is primary, no result pointer adjustment is required.
!      But if it is virtual,
!      it may not be primary in a more-derived class hierarchy.)
  </ul>
  
! The primary virtual table, therefore,
! has the base class functions appearing before the derived class functions,
! with the derived class functions from all three sets above appearing in
! declaration order.
  The primary virtual table can be viewed as two virtual tables accessed
  from a shared virtual table pointer. 
  
  <p>
  <img src=warning.gif alt="<b>NOTE</b>:">
--- 1211,1243 ----
  The virtual pointer of each base subobject of an object of the
  derived class will point to the corresponding base virtual table in this set.
  
  <p>
! The primary virtual table for the derived class contains entries for
! each of the functions in the primary base class virtual table,
! replaced by new overriding functions as appropriate.  Following these
! entries, there is an entry for each virtual function declared in the
! derived class (in declaration order) for which one of the following
! two conditions holds:
! <ul>
! <li> The virtual function does not override any function already
!      appearing in the virtual table.
! 
! <li> The virtual function overrides a function (or functions) appearing
!      in the virtual table, but the return type of the overrider is
!      substantively different from the return type of the function(s)
!      already present.  If the return types are different, they are
!      both pointer-to-class types, or both reference-to-class types.
!      Let B and D denote the classes, where D is derived from B.  The
!      types are substantively different if B is a virtual base or is
!      not an indirect primary base of D.
  </ul>
  
! <p>
! <img src=warning.gif alt="<b>NOTE</b>:">
! <i>
  The primary virtual table can be viewed as two virtual tables accessed
  from a shared virtual table pointer. 
+ </i>
  
  <p>
  <img src=warning.gif alt="<b>NOTE</b>:">
*************** we use two mechanisms,
*** 4540,4547 ****
  a substitution encoding to eliminate repetition of name components,
  and abbreviations for certain common names.
  Each non-terminal in the grammar above for which &lt;substitution>
! appears on the RHS, types, names, and qualified name prefixes,
! is both a source of future substitutions
  and a candidate for being substituted.
  There are two exceptions that appear to be substitution
  candidates from the grammar, but are explicitly excluded:
--- 4528,4534 ----
  a substitution encoding to eliminate repetition of name components,
  and abbreviations for certain common names.
  Each non-terminal in the grammar above for which &lt;substitution>
! appears on the right-hand side is both a source of future substitutions
  and a candidate for being substituted.
  There are two exceptions that appear to be substitution
  candidates from the grammar, but are explicitly excluded:
*************** For example:
*** 4614,4633 ****
     "_ZN1N1TIiiE2mfES0_IddE": Ret? N::T&lt;int, int>::mf(N::T&lt;double, double>)
  </pre></code>
  
! since at the point where S0_ appears:
  <code><pre>
     "S_" == N (qualifier is less recent than qualified entity)
     "S0_" == N::T (template-id comes before template)
  	(int is builtin, and isn't considered)
     "S1_" == N::T&lt;int, int>
- 
- </pre></code>
- 
- After this point, the numbering continues:
- <code><pre>
     "S2_" == N::T&lt;double, double>
-    "S3_" == N::T&lt;int, int>::mf(N::T&lt;double, double>)
- 
  </pre></code>
  
  <p>
--- 4601,4613 ----
     "_ZN1N1TIiiE2mfES0_IddE": Ret? N::T&lt;int, int>::mf(N::T&lt;double, double>)
  </pre></code>
  
! since the substitutions generated for this name are:
  <code><pre>
     "S_" == N (qualifier is less recent than qualified entity)
     "S0_" == N::T (template-id comes before template)
  	(int is builtin, and isn't considered)
     "S1_" == N::T&lt;int, int>
     "S2_" == N::T&lt;double, double>
  </pre></code>
  
  <p>
*************** unwind table location.
*** 4894,4899 ****
--- 4874,4884 ----
  <a name=revisions>
  <h2> Appendix R: Revision History </h2>
  <p> <hr> <p>
+ 
+ <p>
+ <font color=blue>[020916]</font>
+ Clarify ordering of functions in virtual function table.  Correct
+ mangling substitution example.
  
  <p>
  <font color=blue>[020906]</font>
