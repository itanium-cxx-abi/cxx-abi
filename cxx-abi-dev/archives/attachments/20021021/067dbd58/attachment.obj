Index: abi.html
===================================================================
RCS file: /usr/local/Repository/cxx-abi/abi.html,v
retrieving revision 1.38
diff -c -5 -p -r1.38 abi.html
*** abi.html	21 Oct 2002 16:29:40 -0000	1.38
--- abi.html	21 Oct 2002 20:11:34 -0000
*************** it means T itself as well as all of the 
*** 158,167 ****
--- 158,186 ----
  directly or indirectly, virtually or non-virtually.
  We use the term&nbsp; <i>proper base class</i>
  to exclude T itself from the list.
  
  <p>
+ <dt> <i>base object destructor</i> of a class T</dt>
+ <dd>
+ A function that runs the destructors for non-static data members of T and
+ non-virtual direct base classes of T.
+ 
+ <p>
+ <dt> <i>complete object destructor</i> of a class T</dt>
+ <dd>
+ A function that, in addition to the actions required of a base
+ object destructor, runs the destructors for the virtual base classes of T.
+ 
+ <p>
+ <dt> <i>deleting destructor</i> of a class T</dt>
+ <dd>
+ A function that, in addition to the actions required of a complete
+ object destructor, calls the appropriate deallocation function
+ (i.e,. <code>operator delete</code>) for T.
+ 
+ <p>
  <dt> <i>direct base class order</i> </dt>
  <dd>
  When the direct base classes of a class are viewed as an ordered set,
  the order assumed is the order declared, left-to-right.
  
*************** The entry in the embedded primary virtua
*** 1088,1098 ****
  that adjusts the result pointer before returning.
  
  <p>
  The entries for virtual destructors are actually pairs of entries.
  The first destructor,
! called the non-deleting destructor,
  performs the destruction without calling delete() on the object.
  The second destructor,
  called the deleting destructor,
  calls delete() after destroying the object.
  Both destroy any virtual bases;
--- 1107,1117 ----
  that adjusts the result pointer before returning.
  
  <p>
  The entries for virtual destructors are actually pairs of entries.
  The first destructor,
! called the complete object destructor,
  performs the destruction without calling delete() on the object.
  The second destructor,
  called the deleting destructor,
  calls delete() after destroying the object.
  Both destroy any virtual bases;
*************** the construction virtual table parameter
*** 2988,2997 ****
--- 3007,3024 ----
  subobject constructor,
  and the base class subobject constructors use
  their complete object virtual tables for initialization.
  
  <p>
+ If a class has a non-virtual destructor, and a deleting destructor is
+ emitted for that class, the deleting destructor must correctly
+ handle the case that the <code>this</code> pointer is
+ <code>NULL</code>.  All other destructors, including deleting
+ destructors for classes with a virtual destructor, may assume that the
+ <code>this</code> pointer is not <code>NULL</code>.
+ 
+ <p>
  <i>
  Suppose we have a subobject class D that needs a construction virtual table,
  derived from a base B that needs a construction virtual table as part of D,
  and possibly from others that do not need construction virtual tables.
  Then the sub-VTT and constructor code for D would look like the following:
*************** as weak symbols.
*** 4812,4835 ****
  Constructors and destructors for a class, whether implicitly-defined
  or user-defined, are emitted under the same rules as other functions.
  That is, user-defined constructors or destructors, unless the function
  is declared inline, or has internal linkage, are emitted where
  defined, with their complete, and base object variants.  For
! destructors, the deleting variant is emitted as well.  A user-defined
! constructor or destructor with non-inline, internal linkage is emitted
! where defined, with only the variants actually referenced.
! Implicitly-defined or inline user-defined constructors and destructors
! are emitted where referenced, each in its own COMDAT group identified
! by the constructor or destructor name.
  
  <p>
! This ABI does not require the generation or use of allocating constructors,
! although it specifies names for them if an implementation chooses to use them.
! If the object where a constructor is defined may be compiled by
! another implementation,
! an implementation using it must emit it whereever referenced,
! in a COMDAT group identified by the constructor name.
  
  <p>
  <a name=vague-itemplate></a>
  <h4> 5.2.7 Instantiated Templates</h4>
  
--- 4839,4863 ----
  Constructors and destructors for a class, whether implicitly-defined
  or user-defined, are emitted under the same rules as other functions.
  That is, user-defined constructors or destructors, unless the function
  is declared inline, or has internal linkage, are emitted where
  defined, with their complete, and base object variants.  For
! destructors, in classes with a virtual destructor, the deleting
! variant is emitted as well.  A user-defined constructor or destructor
! with non-inline, internal linkage is emitted where defined, with only
! the variants actually referenced.  Implicitly-defined or inline
! user-defined constructors and destructors are emitted where
! referenced, each in its own COMDAT group identified by the constructor
! or destructor name.
  
  <p>
! This ABI does not require the generation or use of allocating
! constructors or deleting destructors for classes without a virtual
! destructor.  However, if an implementation emits such functions, it
! must use the external names specified in this ABI.  If such a function
! has external linkage, it must be emitted wherever referenced, in a
! COMDAT group whose name is the external name of the function.
  
  <p>
  <a name=vague-itemplate></a>
  <h4> 5.2.7 Instantiated Templates</h4>
  
