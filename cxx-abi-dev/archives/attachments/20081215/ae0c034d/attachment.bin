*** abi.html.~7~	2008-12-08 15:52:49.000000000 -0500
--- abi.html	2008-12-15 19:58:59.000000000 -0500
*************** the <code>decltype</code> type was parse
*** 4222,4227 ****
--- 4222,4229 ----
                   ::= De # IEEE 754r decimal floating point (128 bits)
                   ::= Df # IEEE 754r decimal floating point (32 bits)
                   ::= Dh # IEEE 754r half-precision floating point (16 bits)
+                  ::= Di # char32_t
+                  ::= Ds # char16_t
  		 ::= u &lt;source-name&gt;	# vendor extended type
  
  </code></font></a></pre>
*************** Template argument lists appear after the
*** 4382,4399 ****
  and are bracketed by I/E.
  This is used in names for specializations in particular,
  but also in types and scope identification.
  
  </p><pre><font color="blue"><code>
    &lt;template-args&gt; ::= I &lt;template-arg&gt;+ E
    &lt;template-arg&gt; ::= &lt;type&gt;			# type or template
! 		 ::= X &lt;expression&gt; E		# expression
                   ::= &lt;expr-primary&gt;             # simple expressions
                   ::= sp &lt;expression&gt;            # pack expansion of (C++0x)
  
    &lt;expression&gt; ::= &lt;<i>unary</i> operator-name&gt; &lt;expression&gt;
  	       ::= &lt;<i>binary</i> operator-name&gt; &lt;expression&gt; &lt;expression&gt;
  	       ::= &lt;<i>trinary</i> operator-name&gt; &lt;expression&gt; &lt;expression&gt; &lt;expression&gt;
!                ::= st &lt;type&gt;
                 ::= &lt;template-param&gt;
                 ::= sr &lt;type&gt; &lt;unqualified-name&gt;                   # dependent name
                 ::= sr &lt;type&gt; &lt;unqualified-name&gt; &lt;template-args&gt;   # dependent template-id
--- 4384,4407 ----
  and are bracketed by I/E.
  This is used in names for specializations in particular,
  but also in types and scope identification.
+ Template argument packs are bracketed by additional I/E to distinguish them from other arguments.
  
  </p><pre><font color="blue"><code>
    &lt;template-args&gt; ::= I &lt;template-arg&gt;+ E
    &lt;template-arg&gt; ::= &lt;type&gt;			# type or template
! 		 ::= X &lt;expression&gt; E	        # expression
                   ::= &lt;expr-primary&gt;             # simple expressions
+   		 ::= I &lt;template-arg&gt;* E        # argument pack
                   ::= sp &lt;expression&gt;            # pack expansion of (C++0x)
  
    &lt;expression&gt; ::= &lt;<i>unary</i> operator-name&gt; &lt;expression&gt;
  	       ::= &lt;<i>binary</i> operator-name&gt; &lt;expression&gt; &lt;expression&gt;
  	       ::= &lt;<i>trinary</i> operator-name&gt; &lt;expression&gt; &lt;expression&gt; &lt;expression&gt;
!                ::= cl &lt;expression&gt;* E	        # call
!                ::= cv &lt;type&gt; &lt;expression&gt;* E                         # type conversion
!                ::= st &lt;type&gt;		        # sizeof
! 	       ::= sT &lt;type&gt;		        # lvalue of specified type
! 	       ::= sR &lt;type&gt;		        # rvalue of specified type
                 ::= &lt;template-param&gt;
                 ::= sr &lt;type&gt; &lt;unqualified-name&gt;                   # dependent name
                 ::= sr &lt;type&gt; &lt;unqualified-name&gt; &lt;template-args&gt;   # dependent template-id
*************** but also in types and scope identificati
*** 4402,4408 ****
  
    &lt;expr-primary&gt; ::= L &lt;type&gt; &lt;<i>value</i> number&gt; E                   # integer literal
                   ::= L &lt;type &lt;<i>value</i> float&gt; E                     # floating literal
!                  ::= L &lt;mangled-name&gt; E                           # external name
  
  </code></font></pre>
  
--- 4410,4416 ----
  
    &lt;expr-primary&gt; ::= L &lt;type&gt; &lt;<i>value</i> number&gt; E                   # integer literal
                   ::= L &lt;type &lt;<i>value</i> float&gt; E                     # floating literal
!                  ::= L &lt;mangled-name&gt; E                          # external name
  
  </code></font></pre>
  
*************** For example:
*** 4457,4464 ****
  
  <p>
  An expression, e.g., "B&lt;(J+1)/2&gt;",
! is encoded with a prefix traversal of the operators involved,
! delimited by "X...E".
  The operators are encoded using their two letter mangled names.
  For example, "B&lt;(J+1)/2&gt;", if J is the third template parameter,
  becomes "1BI Xdv pl T1_ Li1E Li2E E E"
--- 4465,4471 ----
  
  <p>
  An expression, e.g., "B&lt;(J+1)/2&gt;",
! is encoded with a prefix traversal of the operators involved.
  The operators are encoded using their two letter mangled names.
  For example, "B&lt;(J+1)/2&gt;", if J is the third template parameter,
  becomes "1BI Xdv pl T1_ Li1E Li2E E E"
*************** it represents the source token stream.
*** 4471,4476 ****
--- 4478,4486 ----
  (C++ Standard reference 14.5.5.1 p. 5.)
  
  </p><p>
+ An expression used as a template argument is delimited by "X...E".
+ 
+ </p><p>
  If an expression is a qualified-name, and the qualifying scope is a
  dependent type, one of the <code>sr</code> productions is used, rather
  than the <code>&lt;mangled-name&gt;</code> production.  If the qualified
*************** are available, the mangling chosen is th
*** 4479,4484 ****
--- 4489,4518 ----
  version.
  
  </p><p>
+ The <code>sT</code> and <code>sR</code> forms are used within the
+ C++0x <code>decltype</code> forms <code>DT</code> and <code>Dt</code>.
+ Within these contexts, the value of the expression doesn't matter, only the
+ type, so we express the type of the expression directly in some cases.
+ This is done for all non-type-dependent expressions, and the following
+ forms of type-dependent expressions, for which the type can always be
+ described other than in terms of the expression even if it is dependent,
+ and therefore is said to have <i>describable type</i>:
+ 
+ </p><p>
+ <ul>
+   <li>An expression that names a variable, function, function parameter,
+   enumerator, data member or template non-type parameter from an enclosing
+   function or the current instantiation.</li>
+   <li>A cast (C-style, functional or *_cast).</li>
+   <li>A literal.</li>
+   <li>A new-expression.</li>
+   <li>A unary <code>*</code> expression where the operand has describable type.</li>
+ </ul>
+ 
+ If the expression is an lvalue, the <code>sT</code> mangling is used;
+ otherwise the <code>sR</code> mangling.
+ 
+ </p><p>
  <a name="mangling-scope">
  </a></p><h4><a name="mangling-scope"> 5.1.6 Scope Encoding </a></h4>
  
*************** unwind table location.
*** 4967,4972 ****
--- 5001,5010 ----
  significance should be attached to the form of the revision number; it
  is simply a identifying number.</a></p>
  
+ <p><font color="blue">[081210]</font>
+ Add manglings for type stub expressions, call expressions, char*_t, and
+ N-argument functional casts.  Change argument pack mangling.</p>
+ 
  <p>
  <a name="revisions"><font color="blue">[081208]</font>
  Add mangling for ISO 18037 fixed-point types.
