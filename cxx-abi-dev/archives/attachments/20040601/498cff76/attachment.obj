extern "C" int printf(const char *, ...);
extern "C" void memset(void *, int, int);
#define BITSIZE 1
struct B0     {
        int b0 :1;
};
struct B1 : public B0 {
        int b1 :10;
};

struct B2 : public B1  {
	int b2 :1; 
};

struct B3 : public B2  {
	int b3 :1; 
};

struct B4 : public B3  {
	int b4 :6; 
};


void hexdumpbit(const char * comment, const void * a, int size, int delimit) {
        printf("--%s--- dumping %d bytes-----\n", comment, size);
        const char * p = (const char *) a;
        for (int i=0; i< size; ++i ) {
                printf("%s", (0 != (p[i]&0x80))? "1":"0");
                printf("%s", (0 != (p[i]&0x40))? "1":"0");
                printf("%s", (0 != (p[i]&0x20))? "1":"0");
                printf("%s", (0 != (p[i]&0x10))? "1":"0");
                printf("%s", (0 != (p[i]&0x08))? "1":"0");
                printf("%s", (0 != (p[i]&0x04))? "1":"0");
                printf("%s", (0 != (p[i]&0x02))? "1":"0");
                printf("%s ", (0 != (p[i]&0x01))? "1":"0");
                if (0 == (i+1)%delimit) printf("\n");
        }
        printf("\n");
}
int main() {
  B4 b4;
  memset(&b4,0, sizeof b4); b4.b0=-1;  hexdumpbit("b4.b0", &b4, sizeof b4, 4);
  memset(&b4,0, sizeof b4); b4.b1=-1;  hexdumpbit("b4.b1", &b4, sizeof b4, 4);
  memset(&b4,0, sizeof b4); b4.b2=-1;  hexdumpbit("b4.b2", &b4, sizeof b4, 4);
  memset(&b4,0, sizeof b4); b4.b3=-1;  hexdumpbit("b4.b3", &b4, sizeof b4, 4);
  memset(&b4,0, sizeof b4); b4.b4=-1;  hexdumpbit("b4.b4", &b4, sizeof b4, 4);
  return 0;
}



