*** abi.html.~10~	2008-12-17 11:48:24.000000000 -0500
--- abi.html	2008-12-17 11:48:32.000000000 -0500
*************** version.
*** 4492,4502 ****
  The <code>sT</code> and <code>sR</code> forms are used within the
  C++0x <code>decltype</code> forms <code>DT</code> and <code>Dt</code>.
  Within these contexts, the value of the expression doesn't matter, only the
! type, so we express the type of the expression directly in some cases.
! This is done for all non-type-dependent expressions, and the following
! forms of type-dependent expressions, for which the type can always be
! described other than in terms of the expression even if it is dependent,
! and therefore is said to have <i>describable type</i>:
  
  </p><p>
  <ul>
--- 4492,4503 ----
  The <code>sT</code> and <code>sR</code> forms are used within the
  C++0x <code>decltype</code> forms <code>DT</code> and <code>Dt</code>.
  Within these contexts, the value of the expression doesn't matter, only the
! type, so we just mangle the type of the expression directly as an
! expression stub in some cases.  This is done for all non-type-dependent
! expressions, and the following forms of type-dependent expressions, for
! which the type can always be described other than in terms of the
! expression even if it is dependent, and therefore is said to
! have <i>describable type</i>:
  
  </p><p>
  <ul>
*************** and therefore is said to have <i>describ
*** 4509,4516 ****
    <li>A unary <code>*</code> expression where the operand has describable type.</li>
  </ul>
  
  If the expression is an lvalue, the <code>sT</code> mangling is used;
! otherwise the <code>sR</code> mangling.
  
  </p><p>
  <a name="mangling-scope">
--- 4510,4523 ----
    <li>A unary <code>*</code> expression where the operand has describable type.</li>
  </ul>
  
+ A variable or new-expression which uses the
+ <code>auto</code> type specifier has describable type if and only if its
+ initializer is an expression with describable type.
+ </p><p>
  If the expression is an lvalue, the <code>sT</code> mangling is used;
! otherwise the <code>sR</code> mangling.  If the immediate operand
! of <code>decltype</code> has describable type, the type is mangled directly,
! omitting the decltype and expression type stub manglings.
  
  </p><p>
  <a name="mangling-scope">
