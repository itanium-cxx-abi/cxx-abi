// RTTI support for -*- C++ -*-
// Copyright (C) 1994, 1995, 1996, 1997, 1998, 2000 Free Software Foundation

// This file is part of GNU CC.
//
// GNU CC is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2, or (at your option)
// any later version.
// 
// GNU CC is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with GNU CC; see the file COPYING.  If not, write to
// the Free Software Foundation, 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.

// As a special exception, you may use this file as part of a free software
// library without restriction.  Specifically, if other files instantiate
// templates or use macros or inline functions from this file, or you compile
// this file and link it with other files to produce an executable, this
// file does not by itself cause the resulting executable to be covered by
// the GNU General Public License.  This exception does not however
// invalidate any other reasons why the executable file might be covered by
// the GNU General Public License.

// __GXX_ABI_VERSION distinguishes the ABI that is being used. Values <100
// indicate the `old' abi, which grew as C++ was defined. Values >=100
// indicate the `new' abi, which is a cross vendor C++ abi, documented at
// `http://reality.sgi.com/dehnert_engr/cxx/'.

#ifndef __TYPEINFO__
#define __TYPEINFO__

#pragma interface "typeinfo"

//#include <exception>
//#include "p2-incl/p2types.h"
#define boolean         int


extern "C++" {

#if defined(__GXX_ABI_VERSION) && __GXX_ABI_VERSION >= 100
namespace __cxxabiv1
{
  class __class_type_info;
} // namespace __cxxabiv1
#endif

namespace std {
class type_info {
public:
  // Destructor. Being the first non-inline virtual function, this controls in
  // which translation unit the vtable is emitted. The compiler makes use of
  // that information to know where to emit the runtime-mandated type_info
  // structures in the new-abi.
  virtual ~type_info ();

private:
  // Assigning type_info is not supported.  made private.
  type_info& operator= (const type_info&);
  type_info (const type_info&);

protected:
  const char *__name;

protected:
  type_info (const char *__n): __name (__n) { }

public:
  // the public interface
#if !defined(__GXX_ABI_VERSION) || __GXX_ABI_VERSION < 100
  // In old abi, there can be multiple instances of a type_info object for one
  // type. Uniqueness must use the _name value, not object address.
  boolean before (const type_info& arg) const;
  const char* name () const
    { return __name; }
  boolean operator== (const type_info& __arg) const;
  boolean operator!= (const type_info& __arg) const
    { return !operator== (__arg); }

#else
  // In new abi we can rely on type_info's NTBS being unique,
  // and therefore address comparisons are sufficient.
  boolean before (const type_info& __arg) const
    { return __name < __arg.__name; }
  const char* name () const
    { return __name; }
  bool operator== (const type_info& __arg) const
    { return __name == __arg.__name; }
  bool operator!= (const type_info& __arg) const
    { return !operator== (__arg); }
#endif

  // the internal interface
#if defined(__GXX_ABI_VERSION) && __GXX_ABI_VERSION >= 100
public:
  // return true if this is a pointer type of some kind
  virtual bool __is_pointer_p () const;
  // return true if this is a function type
  virtual bool __is_function_p () const;

  // Try and catch a thrown type. Store an adjusted pointer to the caught type
  // in THR_OBJ. If THR_TYPE is not a pointer type, then THR_OBJ points to the
  // thrown object. If THR_TYPE is a pointer type, then THR_OBJ is the pointer
  // itself. OUTER indicates the number of outer pointers, and whether they
  // were const qualified.
  virtual bool __do_catch (const type_info *__thr_type, void **__thr_obj,
                         unsigned __outer) const;

  // internally used during catch matching
  virtual bool __do_upcast (const __cxxabiv1::__class_type_info *__target,
			    void **__obj_ptr) const;
#endif
};
/*
class bad_cast : public exception {
public:
  bad_cast() { }
  virtual ~bad_cast() { }
};

class bad_typeid : public exception {
 public:
  bad_typeid () { }
  virtual ~bad_typeid () { }
};
*/

}

} // extern "C++"
#endif
