*** ia64_abi_preSFINAE.html	Tue Jun 29 11:31:12 2010
--- ia64_abi_SFINAE.html	Wed Jun 30 11:27:52 2010
***************
*** 201,218 ****
  Note that the traversal may be preorder or postorder.
  Unless otherwise specified,
  preorder (derived classes before their bases) is intended.
  
  <p>
  <dt> <i>morally virtual</i> </dt>
  <dd>
  A subobject X is a <i>morally virtual</i> base of Y if X is either a
  virtual base of Y, or the direct or indirect base of a virtual base of
  Y.
  
  <p>
- <a name="q3"></a>
  <dt> <i>nearly empty class</i> </dt>
  <dd>
  A class that contains a virtual pointer, but no other data except
  (possibly) virtual bases.  In particular, it:
  <ul>
--- 201,234 ----
  Note that the traversal may be preorder or postorder.
  Unless otherwise specified,
  preorder (derived classes before their bases) is intended.
  
  <p>
+ <a name="instantiation-dependent"></a>
+ <dt> <i>instantiation-dependent</i> </dt>
+ <dd>
+ An expression is <i>instantiation-dependent</i> if it is type-dependent or value-dependent,
+ or it has a subexpression that is type-dependent or value-dependent.  For example, if
+ <code>p</code> is a type-dependent identifier, the expression <code>sizeof(sizeof(p))</code>
+ is neither type-dependent, nor value-dependent, but it is instantiation-dependent (and could
+ turn out to be invalid if after substitution of template arguments <code>p</code> turns out to
+ have an incomplete type).
+ 
+ Similarly, a type expressed in source code is <i>instantiation-dependent</i> if the source
+ form includes an <i>instantiation-dependent</i> expression.  For example, the type form
+ <code>double[sizeof(sizeof(p))]</code> (with <code>p</code> a type dependent identifier)
+ is instantiation-dependent.
+ </dl>
+ 
+ <p>
  <dt> <i>morally virtual</i> </dt>
  <dd>
  A subobject X is a <i>morally virtual</i> base of Y if X is either a
  virtual base of Y, or the direct or indirect base of a virtual base of
  Y.
  
  <p>
  <dt> <i>nearly empty class</i> </dt>
  <dd>
  A class that contains a virtual pointer, but no other data except
  (possibly) virtual bases.  In particular, it:
  <ul>
***************
*** 300,311 ****
  <dt> <i>virtual table group</i> </dt>
  <dd>
  The primary virtual table for a class along with all of the associated
  secondary virtual tables for its proper base classes.
  
- </dl>
- 
  <p> <hr> <p>
  <a name="limits">
  <h3> 1.2 Limits </h3>
  
  <p>
--- 316,325 ----
***************
*** 3922,3932 ****
  
  Thus, a name is mangled by prefixing "_Z" to an encoding of its name,
  and in the case of functions its type (to support overloading).
  At this top level,
  function types do not have the special delimiter characters required
! when nested (see below).
  The type is omitted for variables and static data members.
  
  <p>
  For the purposes of mangling, the name of an anonymous union is
  considered to be the name of the first named data member found by a
--- 3936,3951 ----
  
  Thus, a name is mangled by prefixing "_Z" to an encoding of its name,
  and in the case of functions its type (to support overloading).
  At this top level,
  function types do not have the special delimiter characters required
! when nested (see below).  Furthermore, in the case of instances (or
! explicit specializations) of function templates and member function
! templates (but not ordinary member functions of class templates), the 
! <code>&lt;bare-function-type></code> encoding is that of the type
! expressed in the template (i.e., one likely involving template
! parameters).
  The type is omitted for variables and static data members.
  
  <p>
  For the purposes of mangling, the name of an anonymous union is
  considered to be the name of the first named data member found by a
***************
*** 3975,3984 ****
--- 3994,4004 ----
  		  ::= N [&lt;CV-qualifiers>] &lt;template-prefix> &lt;template-args> E
  
      &lt;prefix> ::= &lt;prefix> &lt;unqualified-name>
  	     ::= &lt;template-prefix> &lt;template-args>
               ::= &lt;template-param>
+              ::= &lt;decltype>
  	     ::= # empty
  	     ::= &lt;substitution>
               ::= &lt;prefix> &lt;data-member-prefix>
  
      &lt;template-prefix> ::= &lt;prefix> &lt;<i>template</i> unqualified-name>
***************
*** 4017,4027 ****
  <p>
  Operators appear as function names,
  and in nontype template argument expressions.
  Unlike Cfront,
  unary and binary operators using the same symbol have different encodings.
! All operators are encoded using exactly two letters,
  the first of which is lowercase.
  
  <pre><font color=blue><code>
    &lt;operator-name> ::= nw	# new           
  		  ::= na	# new[]
--- 4037,4047 ----
  <p>
  Operators appear as function names,
  and in nontype template argument expressions.
  Unlike Cfront,
  unary and binary operators using the same symbol have different encodings.
! Most operators are encoded using exactly two letters,
  the first of which is lowercase.
  
  <pre><font color=blue><code>
    &lt;operator-name> ::= nw	# new           
  		  ::= na	# new[]
***************
*** 4060,4071 ****
  		  ::= le	# <=            
  		  ::= ge	# >=            
  		  ::= nt	# !             
  		  ::= aa	# &&            
  		  ::= oo	# ||            
! 		  ::= pp	# ++            
! 		  ::= mm	# --            
  		  ::= cm	# ,             
  		  ::= pm	# ->*           
  		  ::= pt	# ->            
  		  ::= cl	# ()            
  		  ::= ix	# []            
--- 4080,4091 ----
  		  ::= le	# <=            
  		  ::= ge	# >=            
  		  ::= nt	# !             
  		  ::= aa	# &&            
  		  ::= oo	# ||            
! 		  ::= pp	# ++ (postfix in &lt;expression> context)
! 		  ::= mm	# -- (postfix in &lt;expression> context)           
  		  ::= cm	# ,             
  		  ::= pm	# ->*           
  		  ::= pt	# ->            
  		  ::= cl	# ()            
  		  ::= ix	# []            
***************
*** 4074,4084 ****
  		  ::= sz	# sizeof (an expression)
                    ::= at        # alignof (a type)
                    ::= az        # alignof (an expression)
  		  ::= cv &lt;type>	# (cast)        
  		  ::= v &lt;digit> &lt;source-name>	# vendor extended operator
- 
  </pre></font></code>
  
  <p>
  Vendors who define builtin extended operators (e.g. <code>__imag</code>)
  shall encode them as a 'v' prefix followed by
--- 4094,4103 ----
***************
*** 4206,4215 ****
--- 4225,4235 ----
  	 ::= &lt;class-enum-type>
  	 ::= &lt;array-type>
  	 ::= &lt;pointer-to-member-type>
  	 ::= &lt;template-param>
  	 ::= &lt;template-template-param> &lt;template-args>
+ 	 ::= &lt;decltype>
  	 ::= &lt;substitution> # See <a href=#mangling-compression>Compression</a> below
  
  </pre></font></code>
  
  <p>
***************
*** 4279,4301 ****
  if and only if it also treats it as a distinguishing attribute for
  overloading purposes.
  This ABI does not specify that choice.
  </i>
  
- <p>
- C++0x pack expansions are prefixed with <code>Dp</code>. The
- C++0x <code>decltype</code> type is prefixed with
- either <code>Dt</code> or <code>DT</code>, depending on how
- the <code>decltype</code> type was parsed.
- 
- <pre><font color="blue"><code>
-  &lt;type&gt;  ::= Dp &lt;type&gt;          # pack expansion of (C++0x)
-          ::= Dt &lt;expression&gt; E  # decltype of an id-expression or class member access (C++0x)
-          ::= DT &lt;expression&gt; E  # decltype of an expression (C++0x)
- </code></font></pre>
- 
- 
  <a name="mangling-builtin">
  <p>
  Builtin types are represented by single-letter codes:
  
  <pre><font color=blue><code>
--- 4299,4308 ----
***************
*** 4324,4336 ****
                   ::= De # IEEE 754r decimal floating point (128 bits)
                   ::= Df # IEEE 754r decimal floating point (32 bits)
                   ::= Dh # IEEE 754r half-precision floating point (16 bits)
                   ::= Di # char32_t
                   ::= Ds # char16_t
                   ::= Dn # std::nullptr_t (i.e., decltype(nullptr))
  		 ::= u &lt;source-name>	# vendor extended type
- 
  </pre></font></code>
  
  <p>
  Vendors who define builtin extended types shall encode them
  as a 'u' prefix followed by the name in &lt;length,ID> form.
--- 4331,4343 ----
                   ::= De # IEEE 754r decimal floating point (128 bits)
                   ::= Df # IEEE 754r decimal floating point (32 bits)
                   ::= Dh # IEEE 754r half-precision floating point (16 bits)
                   ::= Di # char32_t
                   ::= Ds # char16_t
+                  ::= Da # auto (in dependent new-expressions)
                   ::= Dn # std::nullptr_t (i.e., decltype(nullptr))
  		 ::= u &lt;source-name>	# vendor extended type
  </pre></font></code>
  
  <p>
  Vendors who define builtin extended types shall encode them
  as a 'u' prefix followed by the name in &lt;length,ID> form.
***************
*** 4392,4405 ****
  </pre></font></code>
  
  <p>
  When a function parameter is a C++0x function parameter pack, its type
  is mangled with <code>Dp &lt;type&gt;</code>, i.e., its type is a pack
! expansion.
  </p>
  
  <p>
  A class, union, or enum type is simply a name,
  It may be a simple &lt;unqualified-name>,
  with or without a template argument list,
  or a more complex &lt;nested-name>.
  Thus, it is encoded like a function name,
--- 4399,4440 ----
  </pre></font></code>
  
  <p>
  When a function parameter is a C++0x function parameter pack, its type
  is mangled with <code>Dp &lt;type&gt;</code>, i.e., its type is a pack
! expansion:
! <pre><font color="blue"><code> &lt;type&gt;  ::= Dp &lt;type&gt;          # pack expansion (C++0x)
! </code></font></pre>
  </p>
  
  <p>
+ The C++0x <code>decltype</code> type is encoded with
+ either <code>Dt</code> or <code>DT</code>, depending on how
+ the <code>decltype</code> type was parsed.  (See farther <a href=#expressions>below</a> for
+ the encoding of expressions.)
+ 
+ <pre><font color="blue"><code> &lt;decltype&gt;  ::= Dt &lt;expression&gt; E  # decltype of an id-expression or class member access (C++0x)
+              ::= DT &lt;expression&gt; E  # decltype of an expression (C++0x)
+ </code></font></pre>
+ If the operand expression of <code>decltype</code> is not
+ <a href=#instantiation-dependent>instantiation-dependent</a>
+ then the resulting type is encoded directly.  For example:
+ <code><pre>
+           int x;
+           template&lt;class T> auto f(T p)->decltype(x);
+             // The return type in the mangling of the template signature
+             // is encoded as "i".
+           template&lt;class T> auto f(T p)->decltype(p);
+             // The return type in the mangling of the template signature
+             // is encoded as "Dtfp_E".
+           void g(int);
+           template&lt;class T> auto f(T p)->decltype(g(p));
+             // The return type in the mangling of the template signature
+             // is encoded as "DTcl1gfp_E".
+ </pre></code>
+ 
+ <p>
  A class, union, or enum type is simply a name,
  It may be a simple &lt;unqualified-name>,
  with or without a template argument list,
  or a more complex &lt;nested-name>.
  Thus, it is encoded like a function name,
***************
*** 4485,4495 ****
  
  <p>
  When function and member function template instantiations reference
  the template parameters in their parameter/result types,
  the template parameter number is encoded,
! with the sequence T_, T0_, ...
  Class template parameter references are mangled using the standard
  mangling for the actual parameter type,
  typically a substitution.
  Note that a template parameter reference is a substitution candidate,
  distinct from the type (or other substitutible entity)
--- 4520,4536 ----
  
  <p>
  When function and member function template instantiations reference
  the template parameters in their parameter/result types,
  the template parameter number is encoded,
! with the sequence T_, T0_, ...  For example:
! <pre><code>
!     template&lt;class T> void f(T) {}
!     template void f(int);
!       // Mangled as "_Z1fIiEvT_".
! </code></pre>
! 
  Class template parameter references are mangled using the standard
  mangling for the actual parameter type,
  typically a substitution.
  Note that a template parameter reference is a substitution candidate,
  distinct from the type (or other substitutible entity)
***************
*** 4519,4566 ****
  and are bracketed by I/E.  This is used in names for specializations
  in particular, but also in types and scope identification.  Template
  argument packs are bracketed by additional I/E to distinguish them
  from other arguments.
  
  <pre><font color=blue><code>
    &lt;template-args> ::= I &lt;template-arg>+ E
  
!   &lt;template-arg> ::= &lt;type>                                        # type or template
!                  ::= X &lt;expression&gt; E                              # expression
!                  ::= &lt;expr-primary>                                # simple expressions
!                  ::= I &lt;template-arg&gt;* E                           # argument pack
!                  ::= sp &lt;expression&gt;                               # pack expansion of (C++0x)
  
    &lt;expression> ::= &lt;<i>unary</i> operator-name> &lt;expression>
                 ::= &lt;<i>binary</i> operator-name> &lt;expression> &lt;expression>
!                ::= &lt;<i>trinary</i> operator-name> &lt;expression> &lt;expression> &lt;expression>
!                ::= cl &lt;expression&gt;+ E                              # call
!                ::= cv &lt;type&gt; &lt;expression&gt;                          # conversion with one argument
!                ::= cv &lt;type&gt; _ &lt;expression&gt;* E                     # conversion with a different number of arguments
!                ::= st &lt;type&gt;                                       # sizeof (a type)
!                ::= at &lt;type&gt;                                       # alignof (a type)
                 ::= &lt;template-param>
                 ::= &lt;function-param&gt;
!                ::= sr &lt;type> &lt;unqualified-name>                    # dependent name
!                ::= sr &lt;type> &lt;unqualified-name> &lt;template-args>    # dependent template-id
!                ::= dt &lt;expression&gt; &lt;unqualified-name&gt;              # expr.name
!                ::= dt &lt;expression&gt; &lt;unqualified-name&gt; &lt;template-args&gt;
!                ::= pt &lt;expression&gt; &lt;unqualified-name&gt;              # expr->name
!                ::= pt &lt;expression&gt; &lt;unqualified-name&gt; &lt;template-args&gt;
!                ::= on &lt;operator-name&gt;                              # dependent operator-function-id
!                ::= on &lt;operator-name&gt; &lt;template-args&gt;              # dependent operator template-id
!                ::= &lt;source-name&gt;                                   # dependent name
!                ::= &lt;source-name&gt; &lt;template-args&gt;                   # dependent template-id
!                ::= sZ &lt;template-param&gt;                             # size of a parameter pack
                 ::= &lt;expr-primary>
  
!   &lt;expr-primary> ::= L &lt;type> &lt;<i>value</i> number> E                     # integer literal
!                  ::= L &lt;type&gt; &lt;<i>value</i> float> E                      # floating literal
!                  ::= L &lt;mangled-name&gt; E                            # external name
  
  </pre></code></font>
  
  <p>
  Type arguments appear using their regular encoding.
  For example, the template class "A&lt;char, float>" is encoded as "1AIcfE".
  A slightly more involved example is
  a dependent function parameter type "A&lt;T2>::X"
--- 4560,4648 ----
  and are bracketed by I/E.  This is used in names for specializations
  in particular, but also in types and scope identification.  Template
  argument packs are bracketed by additional I/E to distinguish them
  from other arguments.
  
+ <a name="expressions">
  <pre><font color=blue><code>
    &lt;template-args> ::= I &lt;template-arg>+ E
  
!   &lt;template-arg> ::= &lt;type>                                             # type or template
!                  ::= X &lt;expression&gt; E                                   # expression
!                  ::= &lt;expr-primary>                                     # simple expressions
!                  ::= I &lt;template-arg&gt;* E                                # argument pack
!                  ::= sp &lt;expression&gt;                                    # pack expansion (C++0x)
  
    &lt;expression> ::= &lt;<i>unary</i> operator-name> &lt;expression>
                 ::= &lt;<i>binary</i> operator-name> &lt;expression> &lt;expression>
!                ::= &lt;<i>ternary</i> operator-name> &lt;expression> &lt;expression> &lt;expression>
!                ::= cl &lt;expression&gt;+ E                                   # call
!                ::= cv &lt;type&gt; &lt;expression&gt;                               # conversion with one argument
!                ::= cv &lt;type&gt; _ &lt;expression&gt;* E                          # conversion with a different number of arguments
!                ::= [gs] nw &lt;expression&gt;* _ &lt;type&gt; E                     # new (expr-list) type
!                ::= [gs] nw &lt;expression&gt;* _ &lt;type&gt; &lt;initializer&gt;         # new (expr-list) type (init)
!                ::= [gs] na &lt;expression&gt;* _ &lt;type&gt; E                     # new[] (expr-list) type
!                ::= [gs] na &lt;expression&gt;* _ &lt;type&gt; &lt;initializer&gt;         # new[] (expr-list) type (init)
!                ::= [gs] dl &lt;expression&gt;                                 # delete expression
!                ::= [gs] da &lt;expression&gt;                                 # delete[] expression
!                ::= pp_ &lt;expression&gt;                                     # prefix ++
!                ::= mm_ &lt;expression&gt;                                     # prefix --
!                ::= ti &lt;type&gt;                                            # typeid (type)
!                ::= te &lt;expression&gt;                                      # typeid (expression)
!                ::= dc &lt;type&gt; &lt;expression&gt;                               # dynamic_cast&lt;type&gt; (expression)
!                ::= sc &lt;type&gt; &lt;expression&gt;                               # static_cast&lt;type&gt; (expression)
!                ::= cc &lt;type&gt; &lt;expression&gt;                               # const_cast&lt;type&gt; (expression)
!                ::= rc &lt;type&gt; &lt;expression&gt;                               # reinterpret_cast&lt;type&gt; (expression)
!                ::= st &lt;type&gt;                                            # sizeof (a type)
!                ::= at &lt;type&gt;                                            # alignof (a type)
                 ::= &lt;template-param>
                 ::= &lt;function-param&gt;
!                ::= dt &lt;expression&gt; &lt;unresolved-name&gt;                    # expr.name
!                ::= pt &lt;expression&gt; &lt;unresolved-name&gt;                    # expr-&gt;name
!                ::= ds &lt;expression&gt; &lt;expression&gt;                         # expr.*expr
!                ::= sZ &lt;template-param&gt;                                  # size of a parameter pack
!                ::= tw &lt;expression&gt;                                      # throw expression
!                ::= tr                                                   # throw with no operand (rethrow)
!                ::= &lt;unresolved-name&gt;                                    # f(p), N::f(p), ::f(p),
!                                                                         # freestanding dependent name (e.g., T::x),
!                                                                         # objectless nonstatic member reference
                 ::= &lt;expr-primary>
  
!   &lt;unresolved-name&gt; ::= [gs] &lt;base-unresolved-name&gt;                     # x or (with "gs") ::x
!                     ::= sr &lt;unresolved-type&gt; &lt;base-unresolved-name&gt;     # T::x / decltype(p)::x
!                     ::= srN &lt;unresolved-type> &lt;unresolved-qualifier-level>+ E &lt;base-unresolved-name>
!                                                                         # T::N::x /decltype(p)::N::x
!                     ::= [gs] sr &lt;unresolved-qualifier-level&gt;+ E &lt;base-unresolved-name&gt;  
!                                                                         # A::x, N::y, A&lt;T&gt;::z; "gs" means leading "::"
! 
!   &lt;unresolved-type> ::= &lt;template-param>
!                     ::= &lt;decltype>
! 
!   &lt;unresolved-qualifier-level&gt; ::= &lt;source-name&gt; [ &lt;template-args&gt; ]
! 
!   &lt;base-unresolved-name&gt; ::= &lt;source-name&gt;                              # unresolved name
!                          ::= &lt;source-name&gt; &lt;template-args&gt;              # unresolved template-id
!                          ::= on &lt;operator-name&gt;                         # unresolved operator-function-id
!                          ::= on &lt;operator-name&gt; &lt;template-args&gt;         # unresolved operator template-id
!                          ::= dn &lt;unresolved-name&gt;                       # destructor name; e.g. ~X or ~T::X
! 
!   &lt;expr-primary> ::= L &lt;type> &lt;<i>value</i> number> E                          # integer literal
!                  ::= L &lt;type&gt; &lt;<i>value</i> float> E                           # floating literal
!                  ::= L &lt;<i>character</i> builtin-type&gt; E                       # string literal
! 		 ::= L &lt;type&gt; &lt;<i>real-part</i> float&gt; _ &lt;<i>imag-part</i> float&gt; E   # complex floating point literal (C 2000)
!                  ::= L &lt;mangled-name&gt; E                                 # external name
  
+   &lt;initializer&gt; ::= pi &lt;expression&gt;* E                                  # parenthesized initialization
  </pre></code></font>
  
+ <p>A production for &lt;expression> that directly specifies an operation code (e.g., for the <code>-></code> operator)
+ takes precedence over one that is expressed in terms of (unary/binary/ternary) &lt;operator-name>.
+ </p>
+ <p>The optional "<code>gs</code>" prefix on some of the productions indicates that the corresponding
+ source construct (name, new-expression, or delete-expression) includes a global-scope qualifier 
+ (e.g., <code>::x</code>).
+ </p>
  <p>
  Type arguments appear using their regular encoding.
  For example, the template class "A&lt;char, float>" is encoded as "1AIcfE".
  A slightly more involved example is
  a dependent function parameter type "A&lt;T2>::X"
***************
*** 4572,4581 ****
--- 4654,4664 ----
  Literal arguments, e.g. "A&lt;42L>",
  are encoded with their type and value.
  Negative integer values are preceded with "n";
  for example, "A&lt;-42L>" becomes "1AILln42EE".
  The bool value false is encoded as 0, true as 1.
+ The pointer literal nullptr is encoded as an integer zero of type std::nullptr_t (i.e., "LDn0E").
  
  <p>
  Floating-point literals are encoded using a fixed-length lowercase
  hexadecimal string corresponding to the internal representation (IEEE
  on Itanium), high-order bytes first, without leading zeroes.  For
***************
*** 4586,4595 ****
--- 4669,4684 ----
  type name followed by the encoding of the numeric value of the literal
  in its base integral type
  (which deals with values that don't have names declared in the type).
  
  <p>
+ String literals are encoded using the builtin type of an element of the array
+ (cv-qualifiers are stripped from the array element type).
+ For example, L"abc" ("array [4] of const wchar_t")
+ is encoded as "LwE" (a wide string literal of unspecified size and value).
+ 
+ <p>
  A reference to an entity with external linkage is encoded with
  "L&lt;mangled name>E".
  For example:
  <code><pre>
            void foo(char); // mangled as _Z3fooc
***************
*** 4611,4638 ****
  </pre></code>
  
  <p>
  An expression, e.g., "B&lt;(J+1)/2>", is encoded with a prefix
  traversal of the operators involved.  The operators are encoded using
! their two letter mangled names.  For example, "B&lt;(J+1)/2>", if J is
  the third template parameter, becomes "1BI Xdv pl T1_ Li1E Li2E E E"
  (the blanks are present only to visualize the decomposition).  Note
! that the expression is mangled without constant folding or other
  simplification, and without parentheses, which are implicit in the
  prefix representation.  Except for the parentheses, therefore, it
  represents the source token stream.  (C++ Standard reference 14.5.5.1
  p. 5.)  An expression used as a template argument is delimited by
  "X...E".
  </p>
  
  <p>
! If an expression is a qualified-name, and the qualifying scope is a
! dependent type, one of the <code>sr</code> productions is used, rather
! than the <code>&lt;mangled-name></code> production.  If the qualified
! name refers to an operator for which both unary and binary manglings
! are available, the mangling chosen is the mangling for the binary
! version.
  </p>
  
  <a name="mangling-scope">
  <h4> 5.1.6 Scope Encoding </h4>
  
--- 4700,4789 ----
  </pre></code>
  
  <p>
  An expression, e.g., "B&lt;(J+1)/2>", is encoded with a prefix
  traversal of the operators involved.  The operators are encoded using
! their usual encoding (a two-letter code in most cases).
! For example, "B&lt;(J+1)/2>", if J is
  the third template parameter, becomes "1BI Xdv pl T1_ Li1E Li2E E E"
  (the blanks are present only to visualize the decomposition).  Note
! that, unless explicitly stated otherwise, the expression is mangled
! without constant folding or other
  simplification, and without parentheses, which are implicit in the
  prefix representation.  Except for the parentheses, therefore, it
  represents the source token stream.  (C++ Standard reference 14.5.5.1
  p. 5.)  An expression used as a template argument is delimited by
  "X...E".
  </p>
  
  <p>
! If the operand of a <code>sizeof</code> or <code>alignof</code> operator
! is not <a href=#instantiation-dependent>instantiation-dependent</a>
! it is encoded as an integer literal reflecting the result of the
! operator.  If the result of the operator is implicitly converted to
! a known integer type, that type is used for the literal; otherwise,
! the type of <code>std::size_t</code> or <code>std::ptrdiff_t</code> is used.
! For example:
! <code><pre>
!           template&lt;class T, int N> struct S1 {};
!           template&lt;class T, T N> struct S2 {};
!           template&lt;class T> void f(S1&lt;T, sizeof(long double)>);
!             // The sizeof(...) is not instantiation-dependent, and converted to int:
!             // the result is encoded as "Li16E" for 16-byte long double types.
!           template&lt;class T> void f(S2&lt;T, sizeof(long double)>);
!             // The sizeof(...) is not instantiation-dependent, and converted to an
!             // unknown type: the result is encoded as "Lm16E" for 16-byte long double
!             // types and std::size_t a synonym for "unsigned long".
!           template&lt;class T> void f(S2&lt;T, sizeof(T*)>);
!             // The sizeof(...) is instantiation-dependent (even though its value may
!             // be known if all pointers have the same size): It is encoded as "stPT_".
! </pre></code>
! </p>
! 
! <p>
! When encoding template signatures, a name appearing in the source code
! cannot always be resolved to a specific entity: In such cases the
! <code>&lt;mangled-name></code> production (via 
! <code>&lt;expr-primary></code>) does not apply, and instead the
! <code>&lt;unresolved-name></code> encoding is used.  For example:
! <code><pre>
!           template&lt;class T> auto f(T p)->decltype(p->x);
!             // The return type in the mangling of the template signature
!             // is encoded as "Dtptfp_1xE".
!           template&lt;class T> auto f(T p)->decltype(T::X::y);
!             // The return type in the mangling of the template signature
!             // is encoded as "DtsrNT_1XE1yE" (note how &lt;type> is a
!             // &lt;nested-name> for T::X in this case).
!           template&lt;class T> auto f(T p)->decltype(p->::A::B::x);
!             // The return type in the mangling of the template signature
!             // is encoded as "DTptfp_gssr1A1BE1xE".
!           template&lt;class T> auto f(T p)->decltype(p->x)::Y;
!             // The return type in the mangling of the template signature
!             // is encoded as "NDTptfp_1xE1YE".
! </pre></code>
! In the case of member selection operations, the <code>&lt;unresolved-name></code> 
! is used even if the indicated member is actually known.
! That production is also used for references to nonstatic members with no
! associated expression designating the enclosing object (a C++0x feature).
! For example:
! <code><pre>          struct Q { int x; } q;
!           template&lt;class T> auto f(T p)->decltype(p.x + q.x);
!             // The return type in the mangling of the template signature
!             // is encoded as "DTpldtfp_1xdtL_Z1qE1xE".
!           template&lt;class T> auto f(T p)->decltype(p.x + Q::x);
!             // The return type in the mangling of the template signature
!             // is encoded as "DTpldtfp_1xsr1Q1xEE".
! </pre></code>
! If the <code>&lt;unresolved-name></code> refers to an operator for
! which both unary and binary manglings are available, the mangling
! chosen is the mangling for the binary version.
! For example:
! <code><pre>
!           template&lt;class T> auto f(T p)->decltype(&T::operator-);
!             // The return type in the mangling of the template signature
!             // is encoded as "DTadsrT_onmiE".
! </pre></code>
  </p>
  
  <a name="mangling-scope">
  <h4> 5.1.6 Scope Encoding </h4>
  
***************
*** 4658,4668 ****
    &lt;discriminator> := _ &lt;<i>non-negative</i> number>      # when number < 10
                    := __ &lt;<i>non-negative</i> number> _   # when number >= 10
  </font></pre></code>
  
  <p>
! The first production is used for named local static objects and classes,
  which are identified by their "names" as encoded relative to the closest
  enclosing function.  In case of unnamed local types (excluding unnamed
  types that have acquired a "name for linkage purposes"), the "name" the
  unqualified name is encoded as an &lt;unnamed-type-name> of
  the form
--- 4809,4819 ----
    &lt;discriminator> := _ &lt;<i>non-negative</i> number>      # when number < 10
                    := __ &lt;<i>non-negative</i> number> _   # when number >= 10
  </font></pre></code>
  
  <p>
! The first production in &lt;local-name&gt; is used for named local static objects and classes,
  which are identified by their "names" as encoded relative to the closest
  enclosing function.  In case of unnamed local types (excluding unnamed
  types that have acquired a "name for linkage purposes"), the "name" the
  unqualified name is encoded as an &lt;unnamed-type-name> of
  the form
***************
*** 4714,4724 ****
  	}
  </pre></code>
  
  
  <p>
! The second production is used for string literals.
  The discriminator is used only if there is more than one,
  for the second and subsequent ones.
  In this case &lt;number> is n - 2,
  if this is the nth distinct string literal, in lexical order,
  appearing in the function.
--- 4865,4875 ----
  	}
  </pre></code>
  
  
  <p>
! The second production in &lt;local-name&gt; is used for string literals.
  The discriminator is used only if there is more than one,
  for the second and subsequent ones.
  In this case &lt;number> is n - 2,
  if this is the nth distinct string literal, in lexical order,
  appearing in the function.
***************
*** 5474,5484 ****
  Clarify ordering of functions in virtual function table.  Correct
  mangling substitution example.
  
  <p>
  <font color=blue>[020906]</font>
! Add trinary expression variant.  Remove use of &quot;low-order&quot;
  to describe bytes in guard variables.
  
  <p>
  <font color=blue>[020827]</font>
  Clarify definition of nearly empty class, dsize, nvsize, nvalign.
--- 5625,5635 ----
  Clarify ordering of functions in virtual function table.  Correct
  mangling substitution example.
  
  <p>
  <font color=blue>[020906]</font>
! Add ternary expression variant.  Remove use of &quot;low-order&quot;
  to describe bytes in guard variables.
  
  <p>
  <font color=blue>[020827]</font>
  Clarify definition of nearly empty class, dsize, nvsize, nvalign.
