From jason at redhat.com  Tue Feb 19 17:18:35 2002
From: jason at redhat.com (Jason Merrill)
Date: Tue, 19 Feb 2002 17:18:35 +0000
Subject: [cxx-abi-dev] Pointer to member function mangling
In-Reply-To: <wvlofjc5ak2.fsf@prospero.cambridge.redhat.com> (Jason
 Merrill's message of "Wed, 30 Jan 2002 11:43:09 +0000")
References: <wvlofjc5ak2.fsf@prospero.cambridge.redhat.com>
Message-ID: <wvleljh4cgk.fsf@prospero.cambridge.redhat.com>

>>>>> "Jason" == Jason Merrill <jason at redhat.com> writes:

> My question has to do with encoding a cv-qualified pointer to member
> function type, i.e.

>   void (A::*)() const

> What do other compilers produce?  What do other demanglers expect?

> g++ currently emits

>   MK1AFvvE

> or, member of class "const A" of type "function of (void) returning void".
> I don't see how this can be deduced from the above text.  

> IMO more consistent with the language semantics would be

>   M1AKFvvE

> or, member of A of type "function of (void) const returning void".  The C++
> standard states unambiguously that the cv-quals are part of the function
> type.

As an additional data point, the Intel ia64 compiler (Version 5.0.1, Build
20010705) produces

    M1AFvvE

or, member of A of type "function of (void) returning void".  Which I think
we can all agree is wrong; the const doesn't appear anywhere.

Does anyone have access to an HP compiler for comparison?  Is anyone at HP
still reading this list?

Jason


From mark at codesourcery.com  Tue Feb 19 17:26:55 2002
From: mark at codesourcery.com (Mark Mitchell)
Date: Tue, 19 Feb 2002 09:26:55 -0800
Subject: [cxx-abi-dev] Pointer to member function mangling
In-Reply-To: <wvleljh4cgk.fsf@prospero.cambridge.redhat.com>
References: <wvlofjc5ak2.fsf@prospero.cambridge.redhat.com>
 <wvleljh4cgk.fsf@prospero.cambridge.redhat.com>
Message-ID: <23500000.1014139614@gandalf.codesourcery.com>

> As an additional data point, the Intel ia64 compiler (Version 5.0.1, Build
> 20010705) produces
>
>     M1AFvvE
>
> or, member of A of type "function of (void) returning void".  Which I
> think we can all agree is wrong; the const doesn't appear anywhere.

Yes; I actually already reported this problem to Intel.

> Does anyone have access to an HP compiler for comparison?  Is anyone at HP
> still reading this list?

I will have access to an HP compiler soon; probably within a few days.

Alain is no longer at HP, and Christophe is no longer part of the C++
front end development team, so I'm not sure if anyone at HP is still
reading the list.

--
Mark Mitchell                   mark at codesourcery.com
CodeSourcery, LLC               http://www.codesourcery.com



From mark at codesourcery.com  Tue Feb 19 17:49:29 2002
From: mark at codesourcery.com (Mark Mitchell)
Date: Tue, 19 Feb 2002 09:49:29 -0800
Subject: [cxx-abi-dev] Pointer to member function mangling
In-Reply-To: <200202191742.g1JHgi414557@dink.rsn.hp.com>
References: <200202191742.g1JHgi414557@dink.rsn.hp.com>
Message-ID: <27090000.1014140969@gandalf.codesourcery.com>



--On Tuesday, February 19, 2002 11:42:44 AM -0600 "Randall P. Meyer" 
<meyer at rsn.hp.com> wrote:

> If you send me an example, I'll pass it through our compiler...

[I've copied this to the list, so that when you reply everyone will
be able to see the answer.]

Please provide the mangling that aCC uses for "f" in the following:

  struct A {};

  void f(void (A::*)() const) {}

Thank you,

--
Mark Mitchell                   mark at codesourcery.com
CodeSourcery, LLC               http://www.codesourcery.com



From meyer at rsn.hp.com  Tue Feb 19 17:57:05 2002
From: meyer at rsn.hp.com (Randall P. Meyer)
Date: Tue, 19 Feb 2002 11:57:05 -0600 (CST)
Subject: [cxx-abi-dev] Pointer to member function mangling
In-Reply-To: <27090000.1014140969@gandalf.codesourcery.com> from "Mark Mitchell" at Feb 19, 2002 09:49:29 AM
Message-ID: <200202191757.g1JHv5s14595@dink.rsn.hp.com>

_Z1fM1AKFvvE

> 
> 
> 
> --On Tuesday, February 19, 2002 11:42:44 AM -0600 "Randall P. Meyer" 
> <meyer at rsn.hp.com> wrote:
> 
> > If you send me an example, I'll pass it through our compiler...
> 
> [I've copied this to the list, so that when you reply everyone will
> be able to see the answer.]
> 
> Please provide the mangling that aCC uses for "f" in the following:
> 
>   struct A {};
> 
>   void f(void (A::*)() const) {}
> 
> Thank you,
> 
> --
> Mark Mitchell                   mark at codesourcery.com
> CodeSourcery, LLC               http://www.codesourcery.com
> 
> 



From mark at codesourcery.com  Tue Feb 19 18:15:20 2002
From: mark at codesourcery.com (Mark Mitchell)
Date: Tue, 19 Feb 2002 10:15:20 -0800
Subject: [cxx-abi-dev] Pointer to member function mangling
In-Reply-To: <200202191757.g1JHv5s14595@dink.rsn.hp.com>
References: <200202191757.g1JHv5s14595@dink.rsn.hp.com>
Message-ID: <28630000.1014142519@gandalf.codesourcery.com>



--On Tuesday, February 19, 2002 11:57:05 AM -0600 "Randall P. Meyer" 
<meyer at rsn.hp.com> wrote:

> _Z1fM1AKFvvE

Bummer.  I was hoping that aCC would do the same as the G++ so
that we could agree on that, independent of whether it's abstractly
the prettiest thing or not.

Now it looks like we have a legitimate controversy.

Since G++ 3.1 is going to contain a few ABI fixes already, I think
the easiest solution is probably to change G++ to match aCC.

Jason, do you agree?

--
Mark Mitchell                   mark at codesourcery.com
CodeSourcery, LLC               http://www.codesourcery.com



From jason at redhat.com  Tue Feb 19 20:56:43 2002
From: jason at redhat.com (Jason Merrill)
Date: Tue, 19 Feb 2002 20:56:43 +0000
Subject: [cxx-abi-dev] Pointer to member function mangling
In-Reply-To: <28630000.1014142519@gandalf.codesourcery.com> (Mark Mitchell's
 message of "Tue, 19 Feb 2002 10:15:20 -0800")
References: <200202191757.g1JHv5s14595@dink.rsn.hp.com>
	<28630000.1014142519@gandalf.codesourcery.com>
Message-ID: <wvl664t42d0.fsf@prospero.cambridge.redhat.com>

>>>>> "Mark" == Mark Mitchell <mark at codesourcery.com> writes:

> Since G++ 3.1 is going to contain a few ABI fixes already, I think
> the easiest solution is probably to change G++ to match aCC.

> Jason, do you agree?

Yes.  I already have a patch.

Jason


From mark at codesourcery.com  Tue Feb 19 21:05:35 2002
From: mark at codesourcery.com (Mark Mitchell)
Date: Tue, 19 Feb 2002 13:05:35 -0800
Subject: [cxx-abi-dev] Pointer to member function mangling
In-Reply-To: <wvl664t42d0.fsf@prospero.cambridge.redhat.com>
References: <200202191757.g1JHv5s14595@dink.rsn.hp.com>
 <28630000.1014142519@gandalf.codesourcery.com>
 <wvl664t42d0.fsf@prospero.cambridge.redhat.com>
Message-ID: <34480000.1014152735@gandalf.codesourcery.com>



--On Tuesday, February 19, 2002 08:56:43 PM +0000 Jason Merrill 
<jason at redhat.com> wrote:

>>>>>> "Mark" == Mark Mitchell <mark at codesourcery.com> writes:
>
>> Since G++ 3.1 is going to contain a few ABI fixes already, I think
>> the easiest solution is probably to change G++ to match aCC.
>
>> Jason, do you agree?
>
> Yes.  I already have a patch.

Cool-o.

--
Mark Mitchell                   mark at codesourcery.com
CodeSourcery, LLC               http://www.codesourcery.com



From jason at redhat.com  Wed Feb 20 00:23:22 2002
From: jason at redhat.com (Jason Merrill)
Date: Wed, 20 Feb 2002 00:23:22 +0000
Subject: [cxx-abi-dev] Pointer to member function mangling
In-Reply-To: <34480000.1014152735@gandalf.codesourcery.com> (Mark Mitchell's
 message of "Tue, 19 Feb 2002 13:05:35 -0800")
References: <200202191757.g1JHv5s14595@dink.rsn.hp.com>
	<28630000.1014142519@gandalf.codesourcery.com>
	<wvl664t42d0.fsf@prospero.cambridge.redhat.com>
	<34480000.1014152735@gandalf.codesourcery.com>
Message-ID: <wvl1yfh2e85.fsf@prospero.cambridge.redhat.com>

>>>>> "Mark" == Mark Mitchell <mark at codesourcery.com> writes:

> --On Tuesday, February 19, 2002 08:56:43 PM +0000 Jason Merrill
> <jason at redhat.com> wrote:

>>>>>>> "Mark" == Mark Mitchell <mark at codesourcery.com> writes:
>> 
>>> Since G++ 3.1 is going to contain a few ABI fixes already, I think
>>> the easiest solution is probably to change G++ to match aCC.
>> 
>>> Jason, do you agree?
>> 
>> Yes.  I already have a patch.

Here's a patch to the ABI spec.  The first hunk just fixes an html problem.

-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: text/x-patch
Size: 1728 bytes
Desc: not available
URL: <http://sourcerytools.com/pipermail/cxx-abi-dev/attachments/20020220/2b4f4b44/attachment.bin>

From sabre at nondot.org  Wed Feb 20 02:08:43 2002
From: sabre at nondot.org (Chris Lattner)
Date: Tue, 19 Feb 2002 20:08:43 -0600 (CST)
Subject: [cxx-abi-dev] Pointer to member function mangling
In-Reply-To: <wvl1yfh2e85.fsf@prospero.cambridge.redhat.com>
Message-ID: <Pine.LNX.4.30.0202192007170.27411-100000@nondot.org>

> Here's a patch to the ABI spec.  The first hunk just fixes an html problem.

--- 4373,4380 ----
  When the dimension is an expression involving template parameters,
  the second production is used.
  Thus, the declarations:
+ <pre><code>    template&lt;int I&gt; void foo (int (&)[I + 1]) { }
+     template void foo&lt;2&gt; (int (&)[3]);

To be pedantic, the two "(&)"s should each be "(&amp;)"...

-Chris




From mark at codesourcery.com  Wed Feb 20 14:42:28 2002
From: mark at codesourcery.com (Mark Mitchell)
Date: Wed, 20 Feb 2002 06:42:28 -0800
Subject: Mistake in C++ ABI substitution rules?
In-Reply-To: <3C72D4BA.77E7125F@apple.com>
References: <3C72D4BA.77E7125F@apple.com>
Message-ID: <52290000.1014216148@gandalf.codesourcery.com>

Stan --

  I've forwarded your mail to the C++ ABI mailing list:

    cxx-abi-dev at codesourcery.com

--On Tuesday, February 19, 2002 02:42:02 PM -0800 Stan Shebs 
<shebs at apple.com> wrote:

> One of our tasks in migrating Darwin / Mac OS X to use GCC 3.x is
> to provide a way to load I/O drivers written in C++ and compiled
> with GCC 2.95.  (Yeah yeah, bad idea, but the deed is done, and
> alternative is to compile the kernel's I/O subsystem with 2.95
> forever, I'll work hard to avoid that fate.)
>
> Anyway, to translate the symbols we have a homemade 2.95 compat
> demangler (written using a spec I handed to the kernel hacker,
> poor guy) feeding into a remangler written using the spec at
> http://www.codesourcery.com/cxx-abi/abi.html#mangling.  So far
> so good, we have something that actually does the right thing
> most of the time.  However, there is a troublesome point in the
> substitution rules for the new C++ ABI, where it says
>
> "Logically, the substitutable components of a mangled name are
> considered left-to-right, components before the composite structure
> of which they are a part. If a component has been encountered
> before, it is substituted as described below. This decision is
> independent of whether its components have been substituted,
> so an implementation MAY OPTIMIZE by considering large structures
> for substitution before their components. If a component has not
> been encountered before, its mangling is identified, and it is
> added to a dictionary of substitution candidates. No entity is
> added to the dictionary twice." (emphasis mine)

I think that "may" should be "must".

Thoughts?

--
Mark Mitchell                   mark at codesourcery.com
CodeSourcery, LLC               http://www.codesourcery.com



From jbuck at synopsys.COM  Wed Feb 20 17:57:30 2002
From: jbuck at synopsys.COM (Joe Buck)
Date: Wed, 20 Feb 2002 09:57:30 -0800 (PST)
Subject: Mistake in C++ ABI substitution rules?
In-Reply-To: <52290000.1014216148@gandalf.codesourcery.com> from "Mark Mitchell" at Feb 20, 2002 06:42:28 AM
Message-ID: <200202201757.JAA23109@atrus.synopsys.com>

> > "Logically, the substitutable components of a mangled name are
> > considered left-to-right, components before the composite structure
> > of which they are a part. If a component has been encountered
> > before, it is substituted as described below. This decision is
> > independent of whether its components have been substituted,
> > so an implementation MAY OPTIMIZE by considering large structures
> > for substitution before their components. If a component has not
> > been encountered before, its mangling is identified, and it is
> > added to a dictionary of substitution candidates. No entity is
> > added to the dictionary twice." (emphasis mine)

Mark writes:
> I think that "may" should be "must".

If all the folks who implemented the ABI interpreted it that way, we
have no problem with s/may/must/.  But if some did not, then we don't
have a portable ABI, someone will have to make changes.


From mark at codesourcery.com  Wed Feb 20 18:14:00 2002
From: mark at codesourcery.com (Mark Mitchell)
Date: Wed, 20 Feb 2002 10:14:00 -0800
Subject: Mistake in C++ ABI substitution rules?
In-Reply-To: <200202201757.JAA23109@atrus.synopsys.com>
References: <200202201757.JAA23109@atrus.synopsys.com>
Message-ID: <63240000.1014228840@gandalf.codesourcery.com>

> If all the folks who implemented the ABI interpreted it that way, we
> have no problem with s/may/must/.  But if some did not, then we don't
> have a portable ABI, someone will have to make changes.

I strongly believe that all vendors have implemented the substitution
semantics.  I know that Intel, GCC, and HP have all implemented these
rules.

Like many things about the ABI, the name-mangling rules are not nearly
as clear as I would like.  Whenever I say something like this, Jason
reminds me that I could fix the spec, and then I find myself
insufficiently motivated.

Unfortunately, the little unclarities mean that corner cases do come
up where things are not compatible.

--
Mark Mitchell                   mark at codesourcery.com
CodeSourcery, LLC               http://www.codesourcery.com



From mark at codesourcery.com  Wed Feb 20 18:23:59 2002
From: mark at codesourcery.com (Mark Mitchell)
Date: Wed, 20 Feb 2002 10:23:59 -0800
Subject: [cxx-abi-dev] Pointer to member function mangling
In-Reply-To: <wvl1yfh2e85.fsf@prospero.cambridge.redhat.com>
References: <200202191757.g1JHv5s14595@dink.rsn.hp.com>
 <28630000.1014142519@gandalf.codesourcery.com>
 <wvl664t42d0.fsf@prospero.cambridge.redhat.com>
 <34480000.1014152735@gandalf.codesourcery.com>
 <wvl1yfh2e85.fsf@prospero.cambridge.redhat.com>
Message-ID: <64860000.1014229439@gandalf.codesourcery.com>



--On Wednesday, February 20, 2002 12:23:22 AM +0000 Jason Merrill 
<jason at redhat.com> wrote:

>>>>>> "Mark" == Mark Mitchell <mark at codesourcery.com> writes:
>
>> --On Tuesday, February 19, 2002 08:56:43 PM +0000 Jason Merrill
>> <jason at redhat.com> wrote:
>
>>>>>>>> "Mark" == Mark Mitchell <mark at codesourcery.com> writes:
>>>
>>>> Since G++ 3.1 is going to contain a few ABI fixes already, I think
>>>> the easiest solution is probably to change G++ to match aCC.
>>>
>>>> Jason, do you agree?
>>>
>>> Yes.  I already have a patch.
>
> Here's a patch to the ABI spec.  The first hunk just fixes an html
> problem.

I applied your patch, with Chris' additional fix for &amp;.

--
Mark Mitchell                   mark at codesourcery.com
CodeSourcery, LLC               http://www.codesourcery.com



From dehnert at transmeta.com  Wed Feb 20 22:53:27 2002
From: dehnert at transmeta.com (Jim Dehnert)
Date: Wed, 20 Feb 2002 14:53:27 -0800
Subject: [cxx-abi-dev] Re: Mistake in C++ ABI substitution rules?
References: <200202201757.JAA23109@atrus.synopsys.com>
Message-ID: <3C7428E7.8B513C64@transmeta.com>

It was certainly intended as must.  My mistake, probably.  As Joe
points out, it's not portable otherwise, so there's not much choice.

Jim


Joe Buck wrote:
> 
> > > "Logically, the substitutable components of a mangled name are
> > > considered left-to-right, components before the composite structure
> > > of which they are a part. If a component has been encountered
> > > before, it is substituted as described below. This decision is
> > > independent of whether its components have been substituted,
> > > so an implementation MAY OPTIMIZE by considering large structures
> > > for substitution before their components. If a component has not
> > > been encountered before, its mangling is identified, and it is
> > > added to a dictionary of substitution candidates. No entity is
> > > added to the dictionary twice." (emphasis mine)
> 
> Mark writes:
> > I think that "may" should be "must".
> 
> If all the folks who implemented the ABI interpreted it that way, we
> have no problem with s/may/must/.  But if some did not, then we don't
> have a portable ABI, someone will have to make changes.


From loewis at mail.hu-berlin.de  Thu Feb 21 11:09:51 2002
From: loewis at mail.hu-berlin.de (Martin von Loewis)
Date: 21 Feb 2002 12:09:51 +0100
Subject: [cxx-abi-dev] Re: Mistake in C++ ABI substitution rules?
In-Reply-To: <52290000.1014216148@gandalf.codesourcery.com>
References: <3C72D4BA.77E7125F@apple.com>
	<52290000.1014216148@gandalf.codesourcery.com>
Message-ID: <j4ofijrszk.fsf@informatik.hu-berlin.de>

Mark Mitchell <mark at codesourcery.com> writes:

> I think that "may" should be "must".

I think the intention was always that you MUST apply compression if
possible. Without that, there is no chance of interoperable mangling.

Regards,
Martin



From ddd at cup.hp.com  Sun Feb 24 06:49:55 2002
From: ddd at cup.hp.com (Christophe de Dinechin)
Date: Sat, 23 Feb 2002 22:49:55 -0800
Subject: [cxx-abi-dev] Pointer to member function mangling
In-Reply-To: <wvleljh4cgk.fsf@prospero.cambridge.redhat.com>
Message-ID: <B6361DEA-28F2-11D6-AF5C-000393576EFA@cup.hp.com>

Although I'm no longer a member of the C++ team, I still read the list. 
But I was on vacation this week. I guess Randy is now the official 
"owner".

As Randy replied, aCC emits M1AKFvvE.


Regards,
Christophe

On Tuesday, February 19, 2002, at 09:18 AM, Jason Merrill wrote:

>>>>>> "Jason" == Jason Merrill <jason at redhat.com> writes:
>
>> My question has to do with encoding a cv-qualified pointer to member
>> function type, i.e.
>
>>   void (A::*)() const
>
>> What do other compilers produce?  What do other demanglers expect?
>
>> g++ currently emits
>
>>   MK1AFvvE
>
>> or, member of class "const A" of type "function of (void) returning 
>> void".
>> I don't see how this can be deduced from the above text.
>
>> IMO more consistent with the language semantics would be
>
>>   M1AKFvvE
>
>> or, member of A of type "function of (void) const returning void".  
>> The C++
>> standard states unambiguously that the cv-quals are part of the 
>> function
>> type.
>
> As an additional data point, the Intel ia64 compiler (Version 5.0.1, 
> Build
> 20010705) produces
>
>     M1AFvvE
>
> or, member of A of type "function of (void) returning void".  Which I 
> think
> we can all agree is wrong; the const doesn't appear anywhere.
>
> Does anyone have access to an HP compiler for comparison?  Is anyone at 
> HP
> still reading this list?
>
> Jason
>



From ddd at cup.hp.com  Sun Feb 24 06:54:27 2002
From: ddd at cup.hp.com (Christophe de Dinechin)
Date: Sat, 23 Feb 2002 22:54:27 -0800
Subject: [cxx-abi-dev] Pointer to member function mangling
In-Reply-To: <28630000.1014142519@gandalf.codesourcery.com>
Message-ID: <57F48BEE-28F3-11D6-AF5C-000393576EFA@cup.hp.com>

Well, I'd also recommend that G++ match aCC :-), but we still need to 
fix our demangler:

% c++filt
_ZNK1B1fEM1AKFvvE
B::f( void (  const)() A::* ) const


Regards,
Christophe

On Tuesday, February 19, 2002, at 10:15 AM, Mark Mitchell wrote:

>
>
> --On Tuesday, February 19, 2002 11:57:05 AM -0600 "Randall P. Meyer" 
> <meyer at rsn.hp.com> wrote:
>
>> _Z1fM1AKFvvE
>
> Bummer.  I was hoping that aCC would do the same as the G++ so
> that we could agree on that, independent of whether it's abstractly
> the prettiest thing or not.
>
> Now it looks like we have a legitimate controversy.
>
> Since G++ 3.1 is going to contain a few ABI fixes already, I think
> the easiest solution is probably to change G++ to match aCC.
>
> Jason, do you agree?
>
> --
> Mark Mitchell                   mark at codesourcery.com
> CodeSourcery, LLC               http://www.codesourcery.com
>
>



From ddd at cup.hp.com  Sun Feb 24 07:15:33 2002
From: ddd at cup.hp.com (Christophe de Dinechin)
Date: Sat, 23 Feb 2002 23:15:33 -0800
Subject: [cxx-abi-dev] Re: Mistake in C++ ABI substitution rules?
In-Reply-To: <52290000.1014216148@gandalf.codesourcery.com>
Message-ID: <4B06FCC6-28F6-11D6-8D78-000393576EFA@cup.hp.com>

Mark,


I believe that the "may" here (and the whole sentence) was intended to 
cover the internal data structures used for mangling, rather than the 
result. In other words, the result must be compressed ("If a component 
has been encountered, it IS substituted as described below"). But the 
spec doesn't force you to recognize the structure internally ahead of 
time.

As I remember it, an ordering problem arose when we discussed 
implementations. For instance, aCC has a unique internal "type token" 
that it builds quite early. We wanted to make it possible for aCC to use 
the type token as the key in the dictionary, which would correspond to 
the optimization of "considering large structures for substitution 
before their components". But we did not want to impose such a "type 
token" on other compilers just for mangling reasons.


Regards,
Christophe

On Wednesday, February 20, 2002, at 06:42 AM, Mark Mitchell wrote:

> Stan --
>
>  I've forwarded your mail to the C++ ABI mailing list:
>
>    cxx-abi-dev at codesourcery.com
>
> --On Tuesday, February 19, 2002 02:42:02 PM -0800 Stan Shebs 
> <shebs at apple.com> wrote:
>
>> One of our tasks in migrating Darwin / Mac OS X to use GCC 3.x is
>> to provide a way to load I/O drivers written in C++ and compiled
>> with GCC 2.95.  (Yeah yeah, bad idea, but the deed is done, and
>> alternative is to compile the kernel's I/O subsystem with 2.95
>> forever, I'll work hard to avoid that fate.)
>>
>> Anyway, to translate the symbols we have a homemade 2.95 compat
>> demangler (written using a spec I handed to the kernel hacker,
>> poor guy) feeding into a remangler written using the spec at
>> http://www.codesourcery.com/cxx-abi/abi.html#mangling.  So far
>> so good, we have something that actually does the right thing
>> most of the time.  However, there is a troublesome point in the
>> substitution rules for the new C++ ABI, where it says
>>
>> "Logically, the substitutable components of a mangled name are
>> considered left-to-right, components before the composite structure
>> of which they are a part. If a component has been encountered
>> before, it is substituted as described below. This decision is
>> independent of whether its components have been substituted,
>> so an implementation MAY OPTIMIZE by considering large structures
>> for substitution before their components. If a component has not
>> been encountered before, its mangling is identified, and it is
>> added to a dictionary of substitution candidates. No entity is
>> added to the dictionary twice." (emphasis mine)
>
> I think that "may" should be "must".
>
> Thoughts?
>
> --
> Mark Mitchell                   mark at codesourcery.com
> CodeSourcery, LLC               http://www.codesourcery.com
>
>



From shebs at apple.com  Tue Feb 26 04:27:13 2002
From: shebs at apple.com (Stan Shebs)
Date: Mon, 25 Feb 2002 20:27:13 -0800
Subject: [cxx-abi-dev] Re: Mistake in C++ ABI substitution rules?
References: <200202201757.JAA23109@atrus.synopsys.com> <3C7428E7.8B513C64@transmeta.com>
Message-ID: <3C7B0EA2.8145BB72@apple.com>

Thanks all - the "must" interpretation seemed most sensible to me too.

Incidentally, the kernel guy now reports that he has a remangler
capable of converting all the 2.95 mangled symbols in Darwin kernel
and drivers to their 3.1 counterparts.  Next is to try booting a
3.1-compiled kernel and see what happens when the 3.1 base classes
actually load the 2.95-compiled derived classes that make up the
drivers...

Stan

Jim Dehnert wrote:
> 
> It was certainly intended as must.  My mistake, probably.  As Joe
> points out, it's not portable otherwise, so there's not much choice.
> 
> Jim
> 
> Joe Buck wrote:
> >
> > > > "Logically, the substitutable components of a mangled name are
> > > > considered left-to-right, components before the composite structure
> > > > of which they are a part. If a component has been encountered
> > > > before, it is substituted as described below. This decision is
> > > > independent of whether its components have been substituted,
> > > > so an implementation MAY OPTIMIZE by considering large structures
> > > > for substitution before their components. If a component has not
> > > > been encountered before, its mangling is identified, and it is
> > > > added to a dictionary of substitution candidates. No entity is
> > > > added to the dictionary twice." (emphasis mine)
> >
> > Mark writes:
> > > I think that "may" should be "must".
> >
> > If all the folks who implemented the ABI interpreted it that way, we
> > have no problem with s/may/must/.  But if some did not, then we don't
> > have a portable ABI, someone will have to make changes.


From dehnert at transmeta.com  Tue Feb 26 05:10:40 2002
From: dehnert at transmeta.com (Jim Dehnert)
Date: Mon, 25 Feb 2002 21:10:40 -0800
Subject: [cxx-abi-dev] Re: Mistake in C++ ABI substitution rules?
References: <200202201757.JAA23109@atrus.synopsys.com> <3C7428E7.8B513C64@transmeta.com> <3C7B0EA2.8145BB72@apple.com>
Message-ID: <3C7B18D0.D7B72BBD@transmeta.com>

Stan Shebs wrote:
> 
> Thanks all - the "must" interpretation seemed most sensible to me too.

I assume you've also seen Christophe's explanation, which, based on my
flaky memory, is probably correct.  Re-reading this carefully, note that
the result that one gets is actually independent of whether the described
optimization has taken place -- whether or not you have taken the effort
of substituting for the components before considering a containing structure,
the decision to substitute is based on the structure having been encoded
earlier, not on whether the (partially-substituted or not) manglings are
the same.  So the current wording is correct.  The optimization MAY be
applied to the implementation, but will not change the mangling.

Jim

> Jim Dehnert wrote:
> >
> > It was certainly intended as must.  My mistake, probably.  As Joe
> > points out, it's not portable otherwise, so there's not much choice.
> >
> > Jim
> >
> > Joe Buck wrote:
> > >
> > > > > "Logically, the substitutable components of a mangled name are
> > > > > considered left-to-right, components before the composite structure
> > > > > of which they are a part. If a component has been encountered
> > > > > before, it is substituted as described below. This decision is
> > > > > independent of whether its components have been substituted,
> > > > > so an implementation MAY OPTIMIZE by considering large structures
> > > > > for substitution before their components. If a component has not
> > > > > been encountered before, its mangling is identified, and it is
> > > > > added to a dictionary of substitution candidates. No entity is
> > > > > added to the dictionary twice." (emphasis mine)
> > >
> > > Mark writes:
> > > > I think that "may" should be "must".
> > >
> > > If all the folks who implemented the ABI interpreted it that way, we
> > > have no problem with s/may/must/.  But if some did not, then we don't
> > > have a portable ABI, someone will have to make changes.

-- 
-	    Jim Dehnert		dehnert at transmeta.com
	    (408)919-6984	dehnertj at acm.org


