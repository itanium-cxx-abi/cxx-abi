From premanand.rao at hp.com  Fri Aug  8 14:19:04 2008
From: premanand.rao at hp.com (PremAnand M Rao)
Date: Fri, 08 Aug 2008 10:19:04 -0400
Subject: [cxx-abi-dev] Discuss DFP mangling was(Re: [cxx-abi-dev] C++0x:
 mangling of char16_t and char32_t)
In-Reply-To: <OF6EE9F411.1E71E06E-ON85257443.001E0B48-85257443.001E3221@ca.ibm.com>
References: <OF6EE9F411.1E71E06E-ON85257443.001E0B48-85257443.001E3221@ca.ibm.com>
Message-ID: <489C55D8.8080907@hp.com>

Sorry for taking longer than we thought, but here is the "fine tuned" 
document that Michael was referring to.  Looking forward to comments and 
feedback.

Thank you,
PremAnand.

Michael Wong wrote:
> I will be sending a document for comment shortly. We believe we have 
> general agreement, and will do fine tuning through the document. Look 
> for it soon.
> Thanks.
> 
> Michael Wong
> XL C++ Compiler kernel Development
> IBM Canada Ltd., C2/KD2/8200/MKM
> 8200 Warden Avenue
> Markham, Ontario L6G 1C7
> W:905-413-3283 F:905-413-4839
> Boost test results 
> http://www-1.ibm.com/support/docview.wss?rs=2239&context=SSJT9L&uid=swg27006911 
> <http://www-1.ibm.com/support/docview.wss?rs=2239&context=SSJT9L&uid=swg27006911>
> C/C++ Compilers Support Page 
> http://www.ibm.com/software/awdtools/ccompilers/support/
> C/C++ Feature Request Interface 
> http://www.ibm.com/support/docview.wss?uid=swg27005811
> XL Fortran Compiler Support Page 
> http://www.ibm.com/software/awdtools/fortran/xlfortran/support/
> XL Fortran Feature Request Interface 
> http://www.ibm.com/support/docview.wss?uid=swg27005812
> Inactive hide details for Jason Merrill <jason at redhat.com>Jason Merrill 
> <jason at redhat.com>
> 
> 
>                         *Jason Merrill <jason at redhat.com>*
> 
>                         05/07/2008 02:08 PM
> 
> 	
> 
> To
> 	
> Michael Wong/Toronto/IBM at IBMCA
> 
> cc
> 	
> "cxx-abi-dev at codesourcery.com" <cxx-abi-dev at codesourcery.com>
> 
> Subject
> 	
> Re: [cxx-abi-dev] Discuss DFP mangling was(Re: [cxx-abi-dev] C++0x: 
> mangling of char16_t and char32_t)
> 
> 	
> 
> 
> What came out of this discussion?
> 
> Jason
> 
> 


From premanand.rao at hp.com  Fri Aug  8 14:23:45 2008
From: premanand.rao at hp.com (PremAnand M Rao)
Date: Fri, 08 Aug 2008 10:23:45 -0400
Subject: [cxx-abi-dev] Discuss DFP mangling was(Re: [cxx-abi-dev] C++0x:
 mangling of char16_t and char32_t)
In-Reply-To: <OF6EE9F411.1E71E06E-ON85257443.001E0B48-85257443.001E3221@ca.ibm.com>
References: <OF6EE9F411.1E71E06E-ON85257443.001E0B48-85257443.001E3221@ca.ibm.com>
Message-ID: <489C56F1.8070506@hp.com>

Sorry for taking longer than we thought, but here is the "fine tuned" 
document that Michael was referring to.  Looking forward to comments and 
feedback.

Thank you,
PremAnand.

Michael Wong wrote:
> I will be sending a document for comment shortly. We believe we have 
> general agreement, and will do fine tuning through the document. Look 
> for it soon.
> Thanks.
> 
> Michael Wong
> XL C++ Compiler kernel Development
> IBM Canada Ltd., C2/KD2/8200/MKM
> 8200 Warden Avenue
> Markham, Ontario L6G 1C7
> W:905-413-3283 F:905-413-4839
> Boost test results 
> http://www-1.ibm.com/support/docview.wss?rs=2239&context=SSJT9L&uid=swg27006911 
> <http://www-1.ibm.com/support/docview.wss?rs=2239&context=SSJT9L&uid=swg27006911>
> C/C++ Compilers Support Page 
> http://www.ibm.com/software/awdtools/ccompilers/support/
> C/C++ Feature Request Interface 
> http://www.ibm.com/support/docview.wss?uid=swg27005811
> XL Fortran Compiler Support Page 
> http://www.ibm.com/software/awdtools/fortran/xlfortran/support/
> XL Fortran Feature Request Interface 
> http://www.ibm.com/support/docview.wss?uid=swg27005812
> Inactive hide details for Jason Merrill <jason at redhat.com>Jason Merrill 
> <jason at redhat.com>
> 
> 
>                         *Jason Merrill <jason at redhat.com>*
> 
>                         05/07/2008 02:08 PM
> 
> 	
> 
> To
> 	
> Michael Wong/Toronto/IBM at IBMCA
> 
> cc
> 	
> "cxx-abi-dev at codesourcery.com" <cxx-abi-dev at codesourcery.com>
> 
> Subject
> 	
> Re: [cxx-abi-dev] Discuss DFP mangling was(Re: [cxx-abi-dev] C++0x: 
> mangling of char16_t and char32_t)
> 
> 	
> 
> 
> What came out of this discussion?
> 
> Jason
> 
> 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: dfpmangling-mod.doc
Type: application/msword
Size: 46592 bytes
Desc: not available
URL: <http://sourcerytools.com/pipermail/cxx-abi-dev/attachments/20080808/886d5ed2/attachment.doc>

From michaelw at ca.ibm.com  Tue Aug 19 13:12:46 2008
From: michaelw at ca.ibm.com (Michael Wong)
Date: Tue, 19 Aug 2008 09:12:46 -0400
Subject: Possibly ambiguous mangling of extern "C" functions
Message-ID: <OF5CBE7D60.3706C488-ON852574AA.00472534-852574AA.004870CB@ca.ibm.com>

The example in question is at the end of "5.1.5 Type encodings".  of 
http://www.codesourcery.com/public/cxx-abi/abi.html.

In this example, it is using an extern "C" function as a parameter to a 
class template. There are two problems:
1. Should there be full mangling, partial mangling, or no mangling of the 
extern 'C" function as a template parameter?
2. Should there be an X...E (after the I and before the L) since there is 
a <expr-primary> production under <template-arg> that makes that the case.

Here is the example I actually used:

extern "C" bool IsEmpty(char *); // (un)mangled as IsEmpty
template<bool (&)(char *)> struct CB { static int x; };
// CB<IsEmpty> is mangled as "2CBIL_Z7IsEmptyEE"
int *p = &CB<IsEmpty>::x;


The example is shown without any supporting rules in the spec which makes 
it hard to justify other then an intuition, and it is shown with just the 
_Z7 prefix mangling on the function. It does not mangle the function 
parameter, which may be OK if the group decides it is so since extern "C" 
function can't be overloaded anyway and you can't have it with different 
parameters. But then why bother to mangle it at all?

Checking various versions of GNU also shows different mangling with the 
latest that I have (4.1.2) deviating the most from the example. I show the 
example with and without the extern "C".

gcc (GCC) 4.1.2 20071124 (Red Hat 4.1.2-42)
with extern "C":
_ZN2CBILZ7IsEmptyEE1xE <== GCC missing X and has the Z (but no underscore)

without extern "C":
_ZN2CBILZ7IsEmptyPcEE1xE <=== This is close but it is still missing the X 
and has no _Z

gcc (GCC) 3.3.4
with extern "C":
_ZN2CBIXL7IsEmptyEEE1xE <== Older GCC has the X, but leaves out the _Z or 
Z (same as us with extern "C"), indicating no mangling, but it has the 7

without extern "C":
_ZN2CBIXL_Z7IsEmptyPcEEE1xE <== This one looks OK, same as us without 
extern "C"

Anybody can report what EDG/Intel generates? Thanks.

Michael Wong
XL C++ Compiler kernel Development
IBM Canada Ltd., C2/KD2/8200/MKM
8200 Warden Avenue
Markham, Ontario  L6G 1C7
W:905-413-3283 F:905-413-4839
Boost test results   
http://www-1.ibm.com/support/docview.wss?rs=2239&context=SSJT9L&uid=swg27006911

C/C++ Compilers Support Page   
http://www.ibm.com/software/awdtools/ccompilers/support/
C/C++ Feature Request Interface     
http://www.ibm.com/support/docview.wss?uid=swg27005811
XL Fortran Compiler Support Page     
http://www.ibm.com/software/awdtools/fortran/xlfortran/support/
XL Fortran Feature Request Interface     
http://www.ibm.com/support/docview.wss?uid=swg27005812
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://sourcerytools.com/pipermail/cxx-abi-dev/attachments/20080819/de6b72c9/attachment.html>

From dhandly at cup.hp.com  Wed Aug 20 02:37:48 2008
From: dhandly at cup.hp.com (Dennis Handly)
Date: Tue, 19 Aug 2008 19:37:48 -0700 (PDT)
Subject: [cxx-abi-dev] Possibly ambiguous mangling of extern "C" functions
Message-ID: <200808200237.TAA11802@hpcll183.cup.hp.com>

>From: Michael Wong <michaelw at ca.ibm.com>
>it is using an extern "C" function as a parameter to a 
>class template. There are two problems:
>1. Should there be full mangling, partial mangling, or no mangling of the 
>extern "C" function as a template parameter?
2. Should there be an X...E (after the I and before the L) since there is 
a <expr-primary> production under <template-arg> that makes that the case.

extern "C" bool IsEmpty(char*); // (un)mangled as IsEmpty
template<bool (&)(char*)> struct CB { static int x; };
int *p = &CB<IsEmpty>::x;

>which may be OK if the group decides it is so since extern "C" 
>function can't be overloaded anyway and you can't have it with different 
>parameters. But then why bother to mangle it at all?

Mangle IsEmpty as a parm?  You have to put something there.

>Checking various versions of GNU also shows different mangling with the 
>_ZN2CBILZ7IsEmptyEE1xE    extern "C"
>_ZN2CBILZ7IsEmptyPcEE1xE  extern "C++"

These don't demangle with GNU c++filt 2.17.

>_ZN2CBIXL7IsEmptyEEE1xE      extern "C"
>_ZN2CBIXL_Z7IsEmptyPcEEE1xE  extern "C++"

Only the last demangles with GNU c++filt 2.17.

>Anybody can report what EDG/Intel generates?
Michael Wong

Raw EDG gives:  _ZN2CBIXL_Z7IsEmptyEEE1xE

With strict mode EDG and the default aCC6, it doesn't seem to like it at all:
error #2434: a reference of type "bool (&)(char*)" (not const-qualified)
             cannot be initialized with a value of type "bool (char*) C"

That "C" means extern "C".

So it appears EDG says your example is illegal?
Perhaps because it is reusing a function for initialization for template
arg validation??

To get this to work, I have to use a typedef:

#ifdef WORK
extern "C" {
typedef bool (&RBF)(char*);
}
template<RBF> struct CB { static int x; };
#else
template<bool (&)(char*)> struct CB { static int x; };
#endif

And this gives: _ZN2CBIXL_Z7IsEmptyEEE1xE


From daveed at edg.com  Tue Aug 19 23:17:02 2008
From: daveed at edg.com (David Vandevoorde)
Date: Tue, 19 Aug 2008 19:17:02 -0400
Subject: [cxx-abi-dev] Possibly ambiguous mangling of extern "C" functions
In-Reply-To: <OF5CBE7D60.3706C488-ON852574AA.00472534-852574AA.004870CB@ca.ibm.com>
References: <OF5CBE7D60.3706C488-ON852574AA.00472534-852574AA.004870CB@ca.ibm.com>
Message-ID: <A5C00ECD-619F-4C3E-AE57-C590F6FF55F6@edg.com>


On Aug 19, 2008, at 9:12 AM, Michael Wong wrote:

> The example in question is at the end of "5.1.5 Type encodings".  of
> http://www.codesourcery.com/public/cxx-abi/abi.html.
>
> In this example, it is using an extern "C" function as a parameter  
> to a
> class template. There are two problems:
> 1. Should there be full mangling, partial mangling, or no mangling  
> of the
> extern 'C" function as a template parameter?
> 2. Should there be an X...E (after the I and before the L) since  
> there is
> a <expr-primary> production under <template-arg> that makes that the  
> case.
>
> Here is the example I actually used:
>
> extern "C" bool IsEmpty(char *); // (un)mangled as IsEmpty
> template<bool (&)(char *)> struct CB { static int x; };
> // CB<IsEmpty> is mangled as "2CBIL_Z7IsEmptyEE"
> int *p = &CB<IsEmpty>::x;


Normally, we issue the following error on that example:

"t.c", line 4: error: a reference of type "bool (&)(char *)" (not
           const-qualified) cannot be initialized with a value of type
           "bool (char *) C"
   int *p = &CB<IsEmpty>::x;
                ^

which I think is right.

When I enable the emulation of GCC, we accept it and mangle it as  
_ZN2CBIXL_Z7IsEmptyEEE1xE.

We also have a mode to emulate what we consider "GNU ABI bugs".  When  
I enable that, we generate _ZN2CBIXL7IsEmptyEEE1xE.

	Daveed



From crowl at google.com  Tue Aug 19 23:46:21 2008
From: crowl at google.com (Lawrence Crowl)
Date: Tue, 19 Aug 2008 16:46:21 -0700
Subject: [cxx-abi-dev] Possibly ambiguous mangling of extern "C" functions
In-Reply-To: <OF5CBE7D60.3706C488-ON852574AA.00472534-852574AA.004870CB@ca.ibm.com>
References: <OF5CBE7D60.3706C488-ON852574AA.00472534-852574AA.004870CB@ca.ibm.com>
Message-ID: <29bd08b70808191646j711ce531x1b7f86f95dc6bf78@mail.gmail.com>

On 8/19/08, Michael Wong <michaelw at ca.ibm.com> wrote:
> The example in question is at the end of "5.1.5 Type encodings".  of
> http://www.codesourcery.com/public/cxx-abi/abi.html.
>
> In this example, it is using an extern "C" function as a parameter to a
> class template. There are two problems:
> 1. Should there be full mangling, partial mangling, or no mangling of the
> extern 'C" function as a template parameter?
> 2. Should there be an X...E (after the I and before the L) since there is a
> <expr-primary> production under <template-arg> that makes that the case.
>
> Here is the example I actually used:
>
> extern "C" bool IsEmpty(char *); // (un)mangled as IsEmpty
>  template<bool (&)(char *)> struct CB { static int x; };
>  // CB<IsEmpty> is mangled as "2CBIL_Z7IsEmptyEE"
>  int *p = &CB<IsEmpty>::x;
>
>
> The example is shown without any supporting rules in the spec which makes it
> hard to justify other then an intuition, and it is shown with just the _Z7
> prefix mangling on the function. It does not mangle the function parameter,
> which may be OK if the group decides it is so since extern "C" function
> can't be overloaded anyway and you can't have it with different parameters.
> But then why bother to mangle it at all?

The mangling must distinguish between an extern "C" function and an
extern "C++" function of the same signature.  You cannot have both in
the same translation unit, but you can have both in the same program.

Some form of mangling for the C function is required to ensure that
one can parse the containing name.

>
> Checking various versions of GNU also shows different mangling with the
> latest that I have (4.1.2) deviating the most from the example. I show the
> example with and without the extern "C".
>
> gcc (GCC) 4.1.2 20071124 (Red Hat 4.1.2-42)
> with extern "C":
> _ZN2CBILZ7IsEmptyEE1xE <== GCC missing X and has the Z (but no underscore)
>
> without extern "C":
> _ZN2CBILZ7IsEmptyPcEE1xE <=== This is close but it is still missing the X
> and has no _Z
>
> gcc (GCC) 3.3.4
> with extern "C":
> _ZN2CBIXL7IsEmptyEEE1xE <== Older GCC has the X, but leaves out the _Z or Z
> (same as us with extern "C"), indicating no mangling, but it has the 7
>
> without extern "C":
> _ZN2CBIXL_Z7IsEmptyPcEEE1xE <== This one looks OK, same as us without extern
> "C"
>
> Anybody can report what EDG/Intel generates? Thanks.
>
>  Michael Wong
>  XL C++ Compiler kernel Development
>  IBM Canada Ltd., C2/KD2/8200/MKM
>  8200 Warden Avenue
>  Markham, Ontario  L6G 1C7
>  W:905-413-3283 F:905-413-4839
>  Boost test results
> http://www-1.ibm.com/support/docview.wss?rs=2239&context=SSJT9L&uid=swg27006911
>  C/C++ Compilers Support Page
> http://www.ibm.com/software/awdtools/ccompilers/support/
>  C/C++ Feature Request Interface
> http://www.ibm.com/support/docview.wss?uid=swg27005811
>  XL Fortran Compiler Support Page
> http://www.ibm.com/software/awdtools/fortran/xlfortran/support/
>  XL Fortran Feature Request Interface
> http://www.ibm.com/support/docview.wss?uid=swg27005812


-- 
Lawrence Crowl


From mark at codesourcery.com  Wed Aug 20 08:19:02 2008
From: mark at codesourcery.com (Mark Mitchell)
Date: Wed, 20 Aug 2008 09:19:02 +0100
Subject: [cxx-abi-dev] Possibly ambiguous mangling of extern "C" functions
In-Reply-To: <A5C00ECD-619F-4C3E-AE57-C590F6FF55F6@edg.com>
References: <OF5CBE7D60.3706C488-ON852574AA.00472534-852574AA.004870CB@ca.ibm.com> <A5C00ECD-619F-4C3E-AE57-C590F6FF55F6@edg.com>
Message-ID: <48ABD376.5030300@codesourcery.com>

David Vandevoorde wrote:

>> extern "C" bool IsEmpty(char *); // (un)mangled as IsEmpty
>> template<bool (&)(char *)> struct CB { static int x; };
>> // CB<IsEmpty> is mangled as "2CBIL_Z7IsEmptyEE"
>> int *p = &CB<IsEmpty>::x;

> Normally, we issue the following error on that example:
> 
> "t.c", line 4: error: a reference of type "bool (&)(char *)" (not
>           const-qualified) cannot be initialized with a value of type
>           "bool (char *) C"

Yes, that's the right error.  G++ has never implemented extern "C" 
function *types*, so doesn't issue this kind of error.  There are extern 
"C" functions, but the linkage isn't part of the type per se.  This is a 
known bug.

So, now we're talking about mangling for an invalid C++ program, which 
is outside the scope of the ABI.

> When I enable the emulation of GCC, we accept it and mangle it as 
> _ZN2CBIXL_Z7IsEmptyEEE1xE.
> 
> We also have a mode to emulate what we consider "GNU ABI bugs".  When I 
> enable that, we generate _ZN2CBIXL7IsEmptyEEE1xE.

The GCC output is actually:

_ZN2CBILZ7IsEmptyEE1xE

Indeed, GCC does not generate the "X...E" form here.  Instead, it uses 
the expr-primary production directly from the template-arg rule, which 
makes sense since there is no complex expression here.  However, I do 
think that G++ is in error not to omit the underscore before the Z.

-- 
Mark Mitchell
CodeSourcery
mark at codesourcery.com
(650) 331-3385 x713


From jhs at edg.com  Wed Aug 20 12:45:36 2008
From: jhs at edg.com (John H. Spicer)
Date: Wed, 20 Aug 2008 08:45:36 -0400
Subject: [cxx-abi-dev] Possibly ambiguous mangling of extern "C" functions
In-Reply-To: <48ABD376.5030300@codesourcery.com>
References: <OF5CBE7D60.3706C488-ON852574AA.00472534-852574AA.004870CB@ca.ibm.com> <A5C00ECD-619F-4C3E-AE57-C590F6FF55F6@edg.com> <48ABD376.5030300@codesourcery.com>
Message-ID: <6CAA6039-F741-4C9A-BD48-007C2D96045B@edg.com>


On Aug 20, 2008, at 4:19 AM, Mark Mitchell wrote:

> David Vandevoorde wrote:
>
>>> extern "C" bool IsEmpty(char *); // (un)mangled as IsEmpty
>>> template<bool (&)(char *)> struct CB { static int x; };
>>> // CB<IsEmpty> is mangled as "2CBIL_Z7IsEmptyEE"
>>> int *p = &CB<IsEmpty>::x;
>
>> Normally, we issue the following error on that example:
>> "t.c", line 4: error: a reference of type "bool (&)(char *)" (not
>>          const-qualified) cannot be initialized with a value of type
>>          "bool (char *) C"
>
> Yes, that's the right error.  G++ has never implemented extern "C"  
> function *types*, so doesn't issue this kind of error.  There are  
> extern "C" functions, but the linkage isn't part of the type per  
> se.  This is a known bug.
>
> So, now we're talking about mangling for an invalid C++ program,  
> which is outside the scope of the ABI.

There is a well-formed varient of this case though:

extern "C" {
bool IsEmpty(char *); // (un)mangled as IsEmpty
typedef bool (&ref_func)(char *);
}
template<ref_func> struct CB { static int x; };
int *p = &CB<IsEmpty>::x;

John Spicer
Edison Design Group
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://sourcerytools.com/pipermail/cxx-abi-dev/attachments/20080820/6edc8468/attachment.html>

From michaelw at ca.ibm.com  Tue Aug 26 21:31:19 2008
From: michaelw at ca.ibm.com (Michael Wong)
Date: Tue, 26 Aug 2008 17:31:19 -0400
Subject: [cxx-abi-dev] Possibly ambiguous mangling of extern "C" functions
In-Reply-To: <6CAA6039-F741-4C9A-BD48-007C2D96045B@edg.com>
Message-ID: <OF0EC02983.4BCC57F4-ON852574B1.00750622-852574B1.007639E2@ca.ibm.com>


Thanks all for the discussion. This case was taken pretty much from the C++
ABI spec.

So it sounds like the spec is OK, in that a valid variant of the case as
Dennis Handly and John Spicer shown below, should be mangled as:
_ZN2CBIL_Z7IsEmptyEE1xE

SO we have:
1. GCC 4.1.2 is in error by missing the _
2. the rest of us are in error by adding the X ...E


Michael Wong
XL C++ Compiler kernel Development
IBM Canada Ltd., C2/KD2/8200/MKM
8200 Warden Avenue
Markham, Ontario  L6G 1C7
W:905-413-3283 F:905-413-4839
Boost test results
http://www-1.ibm.com/support/docview.wss?rs=2239&context=SSJT9L&uid=swg27006911

C/C++ Compilers Support Page
http://www.ibm.com/software/awdtools/ccompilers/support/
C/C++ Feature Request Interface
http://www.ibm.com/support/docview.wss?uid=swg27005811
XL Fortran Compiler Support Page
http://www.ibm.com/software/awdtools/fortran/xlfortran/support/
XL Fortran Feature Request Interface
http://www.ibm.com/support/docview.wss?uid=swg27005812


                                                                                 
                                                                                 
                                                                                 
        Re: [cxx-abi-dev] Possibly ambiguous mangling of extern "C" functions    
                                                                                 
                                                                                 
        John H. Spicer                                                           
                      to:                                                        
                        Mark Mitchell                                            
                                                             08/20/2008 09:11 AM 
                                                                                 
                                                                                 
                                                                                 
                                                                                 
        Cc:                                                                      
           David Vandevoorde, Michael Wong, cxx-abi-dev                          
                                                                                 
                                                                                 
                                                                                 
                                                                                 







On Aug 20, 2008, at 4:19 AM, Mark Mitchell wrote:

      David Vandevoorde wrote:

                  extern "C" bool IsEmpty(char *); // (un)mangled as
                  IsEmpty
                  template<bool (&)(char *)> struct CB { static int x; };
                  // CB<IsEmpty> is mangled as "2CBIL_Z7IsEmptyEE"
                  int *p = &CB<IsEmpty>::x;

            Normally, we issue the following error on that example:
            "t.c", line 4: error: a reference of type "bool (&)(char *)"
            (not
                     const-qualified) cannot be initialized with a value of
            type
                     "bool (char *) C"

      Yes, that's the right error.  G++ has never implemented extern "C"
      function *types*, so doesn't issue this kind of error.  There are
      extern "C" functions, but the linkage isn't part of the type per se.
      This is a known bug.

      So, now we're talking about mangling for an invalid C++ program,
      which is outside the scope of the ABI.

There is a well-formed varient of this case though:

extern "C" {
bool IsEmpty(char *); // (un)mangled as IsEmpty
typedef bool (&ref_func)(char *);
}
template<ref_func> struct CB { static int x; };
int *p = &CB<IsEmpty>::x;

John Spicer
Edison Design Group
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://sourcerytools.com/pipermail/cxx-abi-dev/attachments/20080826/e42c077c/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: graycol.gif
Type: image/gif
Size: 105 bytes
Desc: not available
URL: <http://sourcerytools.com/pipermail/cxx-abi-dev/attachments/20080826/e42c077c/attachment.gif>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: pic31992.gif
Type: image/gif
Size: 1255 bytes
Desc: not available
URL: <http://sourcerytools.com/pipermail/cxx-abi-dev/attachments/20080826/e42c077c/attachment-0001.gif>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: ecblank.gif
Type: image/gif
Size: 45 bytes
Desc: not available
URL: <http://sourcerytools.com/pipermail/cxx-abi-dev/attachments/20080826/e42c077c/attachment-0002.gif>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: 1E899343.gif
Type: image/gif
Size: 821 bytes
Desc: not available
URL: <http://sourcerytools.com/pipermail/cxx-abi-dev/attachments/20080826/e42c077c/attachment-0003.gif>

