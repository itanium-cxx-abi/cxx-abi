From dhandly at cup.hp.com  Sat Aug 11 06:37:05 2007
From: dhandly at cup.hp.com (Dennis Handly)
Date: Fri, 10 Aug 2007 23:37:05 -0700 (PDT)
Subject: Fw: [cxx-abi-dev] Decimal Floating Point mangling was(Fw:  [cxx-abi-dev] C++0x: Mangling of rvalue reference type)s
Message-ID: <200708110637.XAA26832@hpcll183.hp.com>

>From: Michael Wong <michaelw at ca.ibm.com>
>While I believe this encoding is slightly better, unfortunately, we have 
>productized this based on the earlier agreement ...

>I realize this is not the best encoding, but many other single letter 
>encoding do not represent their actual names.

I thought the Standards committee is still deciding whether decimal
floating point is a builtin type or a class?

The later would just be encoded as length then name.
Of course this can be handled as "5.1.7 Compression ... abbreviations for
certain common names".

And this form is mentioned:
... the following catalog of abbreviations of the form "Sx" are used:

Or we just go with what Michael has and documented it well and point to
the "right" way to do it next time??  (And who to blame.  ;-)


From michaelw at ca.ibm.com  Wed Aug 15 14:04:05 2007
From: michaelw at ca.ibm.com (Michael Wong)
Date: Wed, 15 Aug 2007 10:04:05 -0400
Subject: Fw: [cxx-abi-dev] Decimal Floating Point mangling was(Fw:  [cxx-abi-dev] C++0x: Mangling
 of rvalue reference type)s
In-Reply-To: <200708110637.XAA26832@hpcll183.hp.com>
Message-ID: <OF8C406156.0EF52A08-ON85257338.004C3D2B-85257338.004D46DF@ca.ibm.com>

Sorry for the delayed reply. But here are my thoughts.

Michael Wong
XL C++ Compiler kernel Development
IBM Canada Ltd., C2/KD2/8200/MKM
8200 Warden Avenue
Markham, Ontario  L6G 1C7
W:905-413-3283 F:905-413-4839
Boost test results
http://www-1.ibm.com/support/docview.wss?rs=2239&context=SSJT9L&uid=swg27006911

C/C++ Compilers Support Page
http://www.ibm.com/software/awdtools/ccompilers/support/
C/C++ Feature Request Interface
http://www.ibm.com/support/docview.wss?uid=swg27005811
XL Fortran Compiler Support Page
http://www.ibm.com/software/awdtools/fortran/xlfortran/support/
XL Fortran Feature Request Interface
http://www.ibm.com/support/docview.wss?uid=swg27005812

Dennis Handly <dhandly at cup.hp.com> wrote on 08/11/2007 02:37:05 AM:

> >From: Michael Wong <michaelw at ca.ibm.com>
> >While I believe this encoding is slightly better, unfortunately, we have

> >productized this based on the earlier agreement ...
>
> >I realize this is not the best encoding, but many other single letter
> >encoding do not represent their actual names.
>
> I thought the Standards committee is still deciding whether decimal
> floating point is a builtin type or a class?
This is the area where the C++ Std differs from the C std.
C++ Std has DFP as a class because of its preference and philosophy of
introducing new ideas as classes, not as a builtin type as required by the
C Std. However, some C++ compilers will need to start to accept many of
these mangling in their ABI inorder to maintain C interoperability. We
introduce many C99 concepts too into the C++ ABI even though they are not
required from the C++ Std for simialr reasons.
>
> The later would just be encoded as length then name.
> Of course this can be handled as "5.1.7 Compression ... abbreviations for
> certain common names".
>
> And this form is mentioned:
> ... the following catalog of abbreviations of the form "Sx" are used:
>
> Or we just go with what Michael has and documented it well and point to
> the "right" way to do it next time??  (And who to blame.  ;-)
The library case will be mangled that way. But for C interoperability it
won't work. This is to cover the case for vendors who actually wish to
implement them as builtin types.
(I would still be happy to accept the blame.)



From daveed at edg.com  Wed Aug 15 14:24:43 2007
From: daveed at edg.com (Daveed Vandevoorde)
Date: Wed, 15 Aug 2007 10:24:43 -0400
Subject: [cxx-abi-dev] Decimal Floating Point mangling was(Fw:  [cxx-abi-dev] C++0x: Mangling of rvalue reference type)s
In-Reply-To: <OF8C406156.0EF52A08-ON85257338.004C3D2B-85257338.004D46DF@ca.ibm.com>
References: <OF8C406156.0EF52A08-ON85257338.004C3D2B-85257338.004D46DF@ca.ibm.com>
Message-ID: <C9F88836-2D69-417E-8A7B-2C6DB4B6D44E@edg.com>


On Aug 15, 2007, at 10:04 AM, Michael Wong wrote:
[...]
> This is the area where the C++ Std differs from the C std.
> C++ Std has DFP as a class because of its preference and philosophy of
> introducing new ideas as classes, not as a builtin type as required  
> by the
> C Std. However, some C++ compilers will need to start to accept  
> many of
> these mangling in their ABI inorder to maintain C interoperability. We
> introduce many C99 concepts too into the C++ ABI even though they  
> are not
> required from the C++ Std for simialr reasons.
>>
>> The later would just be encoded as length then name.
>> Of course this can be handled as "5.1.7 Compression ...  
>> abbreviations for
>> certain common names".
>>
>> And this form is mentioned:
>> ... the following catalog of abbreviations of the form "Sx" are used:
>>
>> Or we just go with what Michael has and documented it well and  
>> point to
>> the "right" way to do it next time??  (And who to blame.  ;-)
> The library case will be mangled that way. But for C  
> interoperability it
> won't work. This is to cover the case for vendors who actually wish to
> implement them as builtin types.
> (I would still be happy to accept the blame.)


But C doesn't mangle.  So there is no interoperability issue there.

Furthermore, the C++ class can be (and should be?) made  
representation-compatible with any native decimal floating-point type  
available on the platform.

So I think Dennis is right: No special mangling code is needed here.   
If a C++ compiler has native support, it should just disguise that  
native support as a class type (from the ABI perspective, at least).

No?

	Daveed





From michaelw at ca.ibm.com  Wed Aug 15 14:35:13 2007
From: michaelw at ca.ibm.com (Michael Wong)
Date: Wed, 15 Aug 2007 10:35:13 -0400
Subject: [cxx-abi-dev] Decimal Floating Point mangling was(Fw:  [cxx-abi-dev] C++0x: Mangling
 of rvalue reference type)s
In-Reply-To: <C9F88836-2D69-417E-8A7B-2C6DB4B6D44E@edg.com>
Message-ID: <OFB1F53097.65BA2027-ON85257338.004F9C98-85257338.005020E5@ca.ibm.com>

You are correct. It is not C interoperability. I followed the wrong line of
reasoning. The mangling is meant for C++ interoperability for those
compilers that wish to maintain interoperability with each other if they
wish to implement it as a native type. So if EDG (or HP) compilers wish to
read native DFP types generated by GNU compilers, similar to what IBM
compilers will do, then we would need the mangling and settle it to be one
or the other.



Michael Wong
XL C++ Compiler kernel Development
IBM Canada Ltd., C2/KD2/8200/MKM
8200 Warden Avenue
Markham, Ontario  L6G 1C7
W:905-413-3283 F:905-413-4839
Boost test results
http://www-1.ibm.com/support/docview.wss?rs=2239&context=SSJT9L&uid=swg27006911

C/C++ Compilers Support Page
http://www.ibm.com/software/awdtools/ccompilers/support/
C/C++ Feature Request Interface
http://www.ibm.com/support/docview.wss?uid=swg27005811
XL Fortran Compiler Support Page
http://www.ibm.com/software/awdtools/fortran/xlfortran/support/
XL Fortran Feature Request Interface
http://www.ibm.com/support/docview.wss?uid=swg27005812

Daveed Vandevoorde <daveed at edg.com> wrote on 08/15/2007 10:24:43 AM:

>
> On Aug 15, 2007, at 10:04 AM, Michael Wong wrote:
> [...]
> > This is the area where the C++ Std differs from the C std.
> > C++ Std has DFP as a class because of its preference and philosophy of
> > introducing new ideas as classes, not as a builtin type as required
> > by the
> > C Std. However, some C++ compilers will need to start to accept
> > many of
> > these mangling in their ABI inorder to maintain C interoperability. We
> > introduce many C99 concepts too into the C++ ABI even though they
> > are not
> > required from the C++ Std for simialr reasons.
> >>
> >> The later would just be encoded as length then name.
> >> Of course this can be handled as "5.1.7 Compression ...
> >> abbreviations for
> >> certain common names".
> >>
> >> And this form is mentioned:
> >> ... the following catalog of abbreviations of the form "Sx" are used:
> >>
> >> Or we just go with what Michael has and documented it well and
> >> point to
> >> the "right" way to do it next time??  (And who to blame.  ;-)
> > The library case will be mangled that way. But for C
> > interoperability it
> > won't work. This is to cover the case for vendors who actually wish to
> > implement them as builtin types.
> > (I would still be happy to accept the blame.)
>
>
> But C doesn't mangle.  So there is no interoperability issue there.
>
> Furthermore, the C++ class can be (and should be?) made
> representation-compatible with any native decimal floating-point type
> available on the platform.
>
> So I think Dennis is right: No special mangling code is needed here.
> If a C++ compiler has native support, it should just disguise that
> native support as a class type (from the ABI perspective, at least).
>
> No?
>
>    Daveed
>
>
>



From dhandly at cup.hp.com  Thu Aug 16 00:50:52 2007
From: dhandly at cup.hp.com (Dennis Handly)
Date: Wed, 15 Aug 2007 17:50:52 -0700 (PDT)
Subject: Fw: [cxx-abi-dev] Decimal Floating Point mangling was(Fw:  [cxx-abi-dev] C++0x: Mangling of rvalue reference type)s
Message-ID: <200708160050.RAA15926@hpcll183.hp.com>

>From: Michael Wong <michaelw at ca.ibm.com>
>We introduce many C99 concepts too into the C++ ABI even though they are not
>required from the C++ Std for similar reasons.

That's fine.  It just seems like we need this conversation documented.

>> And this form is mentioned:
>> ... the following catalog of abbreviations of the form "Sx" are used:

>This is to cover the case for vendors who actually wish to
>implement them as builtin types.

They can still mangled them as classes.

>From: Daveed Vandevoorde <daveed at edg.com>
>So I think Dennis is right: No special mangling code is needed here.   
>If a C++ compiler has native support, it should just disguise that  
>native support as a class type (from the ABI perspective, at least).

Well, the problem with a class type is the size.
We may want to use Sx to reduce the mangled string.

>From: Michael Wong <michaelw at ca.ibm.com>
>then we would need the mangling and settle it to be one or the other.

Yes.  But I wanted the rationale added to the ABI, why we didn't use
the class form, or the Sx abbreviation, or some other X?


From perry at ca.ibm.com  Thu Aug 16 13:44:11 2007
From: perry at ca.ibm.com (Sean Perry)
Date: Thu, 16 Aug 2007 09:44:11 -0400
Subject: Fw: [cxx-abi-dev] Decimal Floating Point mangling was(Fw:  [cxx-abi-dev] C++0x: Mangling
 of rvalue reference type)s
In-Reply-To: <200708160050.RAA15926@hpcll183.hp.com>
Message-ID: <OF98DA8F3F.6A02891F-ON85257339.004AD5CA-85257339.004B7544@ca.ibm.com>

I think we need both mangling.  We need the native type for the C
compatibility reasons Michael mentioned.  The native type will be
independent from the C++ class type.  We should define a mangling for the
C++ class types too.  This is similar to the complex types.  The ABI has Cx
for the C type and mangled forms beginning with St for the std::complex<>
classes.

--
Sean Perry
Compiler Development
IBM Canada Lab
(905)-413-6031 (tie 969-6031), fax (905)-413-4839



                                                                           
             Dennis Handly                                                 
             <dhandly at cup.hp.c                                             
             om>                                                        To 
                                       Michael Wong/Toronto/IBM at IBMCA      
             08/15/2007 08:50                                           cc 
             PM                        cxx-abi-dev at codesourcery.com,       
                                       premanand.rao at hp.com                
                                                                   Subject 
                                       Re:  Fw: [cxx-abi-dev] Decimal      
                                       Floating Point mangling was(Fw:     
                                       [cxx-abi-dev] C++0x: Mangling of    
                                       rvalue reference type)s             
                                                                           
                                                                           
                                                                           
                                                                           
                                                                           
                                                                           




>From: Michael Wong <michaelw at ca.ibm.com>
>We introduce many C99 concepts too into the C++ ABI even though they are
not
>required from the C++ Std for similar reasons.

That's fine.  It just seems like we need this conversation documented.

>> And this form is mentioned:
>> ... the following catalog of abbreviations of the form "Sx" are used:

>This is to cover the case for vendors who actually wish to
>implement them as builtin types.

They can still mangled them as classes.

>From: Daveed Vandevoorde <daveed at edg.com>
>So I think Dennis is right: No special mangling code is needed here.
>If a C++ compiler has native support, it should just disguise that
>native support as a class type (from the ABI perspective, at least).

Well, the problem with a class type is the size.
We may want to use Sx to reduce the mangled string.

>From: Michael Wong <michaelw at ca.ibm.com>
>then we would need the mangling and settle it to be one or the other.

Yes.  But I wanted the rationale added to the ABI, why we didn't use
the class form, or the Sx abbreviation, or some other X?




From dhandly at cup.hp.com  Fri Aug 17 04:27:14 2007
From: dhandly at cup.hp.com (Dennis Handly)
Date: Thu, 16 Aug 2007 21:27:14 -0700 (PDT)
Subject: Fw: [cxx-abi-dev] Decimal Floating Point mangling was(Fw:  [cxx-abi-dev] C++0x: Mangling of rvalue reference type)s
Message-ID: <200708170427.VAA21487@hpcll183.hp.com>

>From: Sean Perry <perry at ca.ibm.com>
>I think we need both mangling.  We need the native type for the C
>compatibility reasons Michael mentioned.

Having both just causes conflicts.
Unless there is a different source for each??

You mention below, C for complex.  Would the difference be:
  std::complex<float>
  float complex  (possibly in an extern "C" block?)

And something similar for Decimal FP??

>The native type will be independent from the C++ class type.

Would we really want that?  I thought you can only do that if they
are exactly the same??

>We should define a mangling for the C++ class types too.  This is similar
>to the complex types.  The ABI has Cx for the C type and mangled forms
>beginning with St for the std::complex<> classes.
Sean Perry

Did anyone ever implement the C prefix type?
This would indicate that Df Dd De would make sense.

Or you could have special Sf, Sd, Se abbreviations for the Decimal FP
template class types.


From perry at ca.ibm.com  Fri Aug 17 16:24:55 2007
From: perry at ca.ibm.com (Sean Perry)
Date: Fri, 17 Aug 2007 12:24:55 -0400
Subject: Fw: [cxx-abi-dev] Decimal Floating Point mangling was(Fw:  [cxx-abi-dev] C++0x: Mangling
 of rvalue reference type)s
In-Reply-To: <200708170427.VAA21487@hpcll183.hp.com>
Message-ID: <OF4C8DFA37.49D6450B-ON8525733A.0059FC7B-8525733A.005A2C15@ca.ibm.com>

Yes, the native type and the standard class are different types.

--
Sean Perry
Compiler Development
IBM Canada Lab
(905)-413-6031 (tie 969-6031), fax (905)-413-4839



                                                                           
             Dennis Handly                                                 
             <dhandly at cup.hp.c                                             
             om>                                                        To 
                                       Sean Perry/Toronto/IBM at IBMCA        
             08/17/2007 12:27                                           cc 
             AM                        cxx-abi-dev at codesourcery.com,       
                                       Michael Wong/Toronto/IBM at IBMCA,     
                                       premanand.rao at hp.com                
                                                                   Subject 
                                       Re:  Fw: [cxx-abi-dev] Decimal      
                                       Floating Point mangling was(Fw:     
                                       [cxx-abi-dev] C++0x: Mangling of    
                                       rvalue reference type)s             
                                                                           
                                                                           
                                                                           
                                                                           
                                                                           
                                                                           




>From: Sean Perry <perry at ca.ibm.com>
>I think we need both mangling.  We need the native type for the C
>compatibility reasons Michael mentioned.

Having both just causes conflicts.
Unless there is a different source for each??

You mention below, C for complex.  Would the difference be:
  std::complex<float>
  float complex  (possibly in an extern "C" block?)

And something similar for Decimal FP??

>The native type will be independent from the C++ class type.

Would we really want that?  I thought you can only do that if they
are exactly the same??

>We should define a mangling for the C++ class types too.  This is similar
>to the complex types.  The ABI has Cx for the C type and mangled forms
>beginning with St for the std::complex<> classes.
Sean Perry

Did anyone ever implement the C prefix type?
This would indicate that Df Dd De would make sense.

Or you could have special Sf, Sd, Se abbreviations for the Decimal FP
template class types.




From dhandly at cup.hp.com  Sat Aug 18 01:19:44 2007
From: dhandly at cup.hp.com (Dennis Handly)
Date: Fri, 17 Aug 2007 18:19:44 -0700 (PDT)
Subject: Fw: [cxx-abi-dev] Decimal Floating Point mangling was(Fw:  [cxx-abi-dev] C++0x: Mangling of rvalue reference type)s
Message-ID: <200708180119.SAA25789@hpcll183.hp.com>

>From: Sean Perry <perry at ca.ibm.com>
>Yes, the native type and the standard class are different types.

Then this may cause conflicts between the vendor's compiler and the foreign
devil compilers if they try to interoperate and each does it differently.

I suppose an extern "C" interface would work to get around the mangling
issues.  At least for decimal.  Complex may have other issues.


From michaelw at ca.ibm.com  Mon Aug 20 12:23:20 2007
From: michaelw at ca.ibm.com (Michael Wong)
Date: Mon, 20 Aug 2007 08:23:20 -0400
Subject: Fw: [cxx-abi-dev] Decimal Floating Point mangling was(Fw:  [cxx-abi-dev] C++0x: Mangling
 of rvalue reference type)s
In-Reply-To: <200708180119.SAA25789@hpcll183.hp.com>
Message-ID: <OF00CBDC41.970F4C31-ON8525733D.00429AE0-8525733D.0043C1D3@ca.ibm.com>

I believe one of the point of an ABI is to settle on one type where there 
are ambiguity or possible differences in choices. Otherwise, it is not an 
ABI and there would be no interoperability.
So I agree with Dennis that having both types would be confusing. I have 
no problem putting forward a case in the ABI document to support the 
native DFP type choice. In fact, I believe this was one of the thing that 
Mark Mitchell had asked me to do after coming up with a mangling scheme. I 
am somewhat glad that we have converged to that same point of view.

Is this agreed?

Michael Wong
XL C++ Compiler kernel Development
IBM Canada Ltd., C2/KD2/8200/MKM
8200 Warden Avenue
Markham, Ontario  L6G 1C7
W:905-413-3283 F:905-413-4839
Boost test results 
http://www-1.ibm.com/support/docview.wss?rs=2239&context=SSJT9L&uid=swg27006911
C/C++ Compilers Support Page 
http://www.ibm.com/software/awdtools/ccompilers/support/
C/C++ Feature Request Interface 
http://www.ibm.com/support/docview.wss?uid=swg27005811
XL Fortran Compiler Support Page 
http://www.ibm.com/software/awdtools/fortran/xlfortran/support/
XL Fortran Feature Request Interface 
http://www.ibm.com/support/docview.wss?uid=swg27005812

Dennis Handly <dhandly at cup.hp.com> wrote on 08/17/2007 09:19:44 PM:

> >From: Sean Perry <perry at ca.ibm.com>
> >Yes, the native type and the standard class are different types.
> 
> Then this may cause conflicts between the vendor's compiler and the 
foreign
> devil compilers if they try to interoperate and each does it 
differently.
> 
> I suppose an extern "C" interface would work to get around the mangling
> issues.  At least for decimal.  Complex may have other issues.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://sourcerytools.com/pipermail/cxx-abi-dev/attachments/20070820/17faa7fa/attachment.html>

From perry at ca.ibm.com  Mon Aug 20 13:28:19 2007
From: perry at ca.ibm.com (Sean Perry)
Date: Mon, 20 Aug 2007 09:28:19 -0400
Subject: Fw: [cxx-abi-dev] Decimal Floating Point mangling was(Fw:  [cxx-abi-dev] C++0x: Mangling
 of rvalue reference type)s
In-Reply-To: <OF00CBDC41.970F4C31-ON8525733D.00429AE0-8525733D.0043C1BE@LocalDomain>
Message-ID: <OF87A9E04B.8D0D7467-ON8525733D.004993E7-8525733D.004A00E0@ca.ibm.com>

Are you trying to say that the C++ class type shall be binary compatible
with the C native type?  That is going to fail immediately on parameter
passing and return values.  And if we say that, then someone can throw a C
native type and catch it as the C++ class type.  Similar odd behaviour
would happen with dynamic casting.  The fact is that we have two different
types because C++ choose to implement decimal floating point as a class.
We need two different mangling schemes.

--
Sean Perry
Compiler Development
IBM Canada Lab
(905)-413-6031 (tie 969-6031), fax (905)-413-4839



                                                                           
             Michael                                                       
             Wong/Toronto/IBM                                              
                                                                        To 
             08/20/2007 08:23          Dennis Handly <dhandly at cup.hp.com>  
             AM                                                         cc 
                                       cxx-abi-dev at codesourcery.com,       
                                       premanand.rao at hp.com, Sean          
                                       Perry/Toronto/IBM at IBMCA             
                                                                   Subject 
                                       Re:  Fw: [cxx-abi-dev] Decimal      
                                       Floating Point mangling was(Fw:     
                                       [cxx-abi-dev] C++0x: Mangling of    
                                       rvalue reference type)s(Document    
                                       link: Sean Perry)                   
                                                                           
                                                                           
                                                                           
                                                                           
                                                                           
                                                                           



I believe one of the point of an ABI is to settle on one type where there
are ambiguity or possible differences in choices. Otherwise, it is not an
ABI and there would be no interoperability.
So I agree with Dennis that having both types would be confusing. I have no
problem putting forward a case in the ABI document to support the native
DFP type choice. In fact, I believe this was one of the thing that Mark
Mitchell had asked me to do after coming up with a mangling scheme. I am
somewhat glad that we have converged to that same point of view.

Is this agreed?

Michael Wong
XL C++ Compiler kernel Development
IBM Canada Ltd., C2/KD2/8200/MKM
8200 Warden Avenue
Markham, Ontario  L6G 1C7
W:905-413-3283 F:905-413-4839
Boost test results
http://www-1.ibm.com/support/docview.wss?rs=2239&context=SSJT9L&uid=swg27006911

C/C++ Compilers Support Page
http://www.ibm.com/software/awdtools/ccompilers/support/
C/C++ Feature Request Interface
http://www.ibm.com/support/docview.wss?uid=swg27005811
XL Fortran Compiler Support Page
http://www.ibm.com/software/awdtools/fortran/xlfortran/support/
XL Fortran Feature Request Interface
http://www.ibm.com/support/docview.wss?uid=swg27005812

Dennis Handly <dhandly at cup.hp.com> wrote on 08/17/2007 09:19:44 PM:

> >From: Sean Perry <perry at ca.ibm.com>
> >Yes, the native type and the standard class are different types.
>
> Then this may cause conflicts between the vendor's compiler and the
foreign
> devil compilers if they try to interoperate and each does it differently.
>
> I suppose an extern "C" interface would work to get around the mangling
> issues.  At least for decimal.  Complex may have other issues.




From michaelw at ca.ibm.com  Mon Aug 20 15:53:46 2007
From: michaelw at ca.ibm.com (Michael Wong)
Date: Mon, 20 Aug 2007 11:53:46 -0400
Subject: Fw: [cxx-abi-dev] Decimal Floating Point mangling was(Fw:  [cxx-abi-dev] C++0x: Mangling
 of rvalue reference type)s
In-Reply-To: <OF87A9E04B.8D0D7467-ON8525733D.004993E7-8525733D.004A00E0@ca.ibm.com>
Message-ID: <OFBC792155.F94AB672-ON8525733D.0056C504-8525733D.005751CD@ca.ibm.com>

Absolutely not. That would be silly even to me.
I want to settle the mangling chosen for the native type for platforms that
can support it. I am not saying there should not coexists different
manglings for class types and native types.
What Mark wanted, I believe was a rationale to explain why there  exists
both types and their mangling and that is what I am seeing a convergence
here in this discussion, for which I am glad.
The point is that for platforms that support native types, the native type
mangling is available for a potentially more efficient implementation. For
platforms that can only support emulation, the class library type and its
mangling is available. Have I missed the point?

What I was hoping to ask was if people are sufficiently happy with this
state so that I can write up the mangling addendum proposal?

Michael Wong
XL C++ Compiler kernel Development
IBM Canada Ltd., C2/KD2/8200/MKM
8200 Warden Avenue
Markham, Ontario  L6G 1C7
W:905-413-3283 F:905-413-4839
Boost test results
http://www-1.ibm.com/support/docview.wss?rs=2239&context=SSJT9L&uid=swg27006911

C/C++ Compilers Support Page
http://www.ibm.com/software/awdtools/ccompilers/support/
C/C++ Feature Request Interface
http://www.ibm.com/support/docview.wss?uid=swg27005811
XL Fortran Compiler Support Page
http://www.ibm.com/software/awdtools/fortran/xlfortran/support/
XL Fortran Feature Request Interface
http://www.ibm.com/support/docview.wss?uid=swg27005812


                                                                           
             Sean                                                          
             Perry/Toronto/IBM                                             
             @IBMCA                                                     To 
                                       Michael Wong/Toronto/IBM at IBMCA      
             08/20/2007 09:28                                           cc 
             AM                        cxx-abi-dev at codesourcery.com,       
                                       Dennis Handly <dhandly at cup.hp.com>, 
                                       premanand.rao at hp.com                
                                                                   Subject 
                                       Re:  Fw: [cxx-abi-dev] Decimal      
                                       Floating Point mangling was(Fw:     
                                       [cxx-abi-dev] C++0x: Mangling of    
                                       rvalue reference type)s             
                                                                           
                                                                           
                                                                           
                                                                           
                                                                           
                                                                           




Are you trying to say that the C++ class type shall be binary compatible
with the C native type?  That is going to fail immediately on parameter
passing and return values.  And if we say that, then someone can throw a C
native type and catch it as the C++ class type.  Similar odd behaviour
would happen with dynamic casting.  The fact is that we have two different
types because C++ choose to implement decimal floating point as a class.
We need two different mangling schemes.

--
Sean Perry
Compiler Development
IBM Canada Lab
(905)-413-6031 (tie 969-6031), fax (905)-413-4839




             Michael
             Wong/Toronto/IBM
                                                                        To
             08/20/2007 08:23          Dennis Handly <dhandly at cup.hp.com>
             AM                                                         cc
                                       cxx-abi-dev at codesourcery.com,
                                       premanand.rao at hp.com, Sean
                                       Perry/Toronto/IBM at IBMCA
                                                                   Subject
                                       Re:  Fw: [cxx-abi-dev] Decimal
                                       Floating Point mangling was(Fw:
                                       [cxx-abi-dev] C++0x: Mangling of
                                       rvalue reference type)s(Document
                                       link: Sean Perry)









I believe one of the point of an ABI is to settle on one type where there
are ambiguity or possible differences in choices. Otherwise, it is not an
ABI and there would be no interoperability.
So I agree with Dennis that having both types would be confusing. I have no
problem putting forward a case in the ABI document to support the native
DFP type choice. In fact, I believe this was one of the thing that Mark
Mitchell had asked me to do after coming up with a mangling scheme. I am
somewhat glad that we have converged to that same point of view.

Is this agreed?

Michael Wong
XL C++ Compiler kernel Development
IBM Canada Ltd., C2/KD2/8200/MKM
8200 Warden Avenue
Markham, Ontario  L6G 1C7
W:905-413-3283 F:905-413-4839
Boost test results
http://www-1.ibm.com/support/docview.wss?rs=2239&context=SSJT9L&uid=swg27006911


C/C++ Compilers Support Page
http://www.ibm.com/software/awdtools/ccompilers/support/
C/C++ Feature Request Interface
http://www.ibm.com/support/docview.wss?uid=swg27005811
XL Fortran Compiler Support Page
http://www.ibm.com/software/awdtools/fortran/xlfortran/support/
XL Fortran Feature Request Interface
http://www.ibm.com/support/docview.wss?uid=swg27005812

Dennis Handly <dhandly at cup.hp.com> wrote on 08/17/2007 09:19:44 PM:

> >From: Sean Perry <perry at ca.ibm.com>
> >Yes, the native type and the standard class are different types.
>
> Then this may cause conflicts between the vendor's compiler and the
foreign
> devil compilers if they try to interoperate and each does it differently.
>
> I suppose an extern "C" interface would work to get around the mangling
> issues.  At least for decimal.  Complex may have other issues.






From daveed at edg.com  Mon Aug 20 15:45:55 2007
From: daveed at edg.com (Daveed Vandevoorde)
Date: Mon, 20 Aug 2007 11:45:55 -0400
Subject: [cxx-abi-dev] Decimal Floating Point mangling was(Fw:  [cxx-abi-dev] C++0x: Mangling of rvalue reference type)s
In-Reply-To: <OF87A9E04B.8D0D7467-ON8525733D.004993E7-8525733D.004A00E0@ca.ibm.com>
References: <OF87A9E04B.8D0D7467-ON8525733D.004993E7-8525733D.004A00E0@ca.ibm.com>
Message-ID: <3E01DF36-8F3B-4817-A456-DCBAA628F239@edg.com>


On Aug 20, 2007, at 9:28 AM, Sean Perry wrote:

> Are you trying to say that the C++ class type shall be binary  
> compatible
> with the C native type?  That is going to fail immediately on  
> parameter
> passing and return values.


Most likely, indeed (though magical class types could be possible).

> And if we say that, then someone can throw a C
> native type and catch it as the C++ class type.  Similar odd behaviour
> would happen with dynamic casting.  The fact is that we have two  
> different
> types because C++ choose to implement decimal floating point as a  
> class.
> We need two different mangling schemes.


I still don't see why.  C signatures need no mangling.  In C++ it's a  
class type, so there is an encoding for that.

All there is left is vendor-specific "native C++" (i.e., nonstandard)  
cases, and for that the ABI already provides the "u <source-name>" code.

	Daveed



From dhandly at cup.hp.com  Tue Aug 21 04:09:08 2007
From: dhandly at cup.hp.com (Dennis Handly)
Date: Mon, 20 Aug 2007 21:09:08 -0700 (PDT)
Subject: Fw: [cxx-abi-dev] Decimal Floating Point mangling was(Fw:  [cxx-abi-dev] C++0x: Mangling of rvalue reference type)s
Message-ID: <200708210409.VAA08768@hpcll183.hp.com>

>From: Michael Wong <michaelw at ca.ibm.com>
>I believe one of the point of an ABI is to settle on one type where there 
>are ambiguity or possible differences in choices. Otherwise, it is not an 
>ABI and there would be no interoperability.

Exactly.

>So I agree with Dennis that having both types would be confusing.
Michael Wong

Unless you allow a platform to pick one.

>From: Sean Perry <perry at ca.ibm.com>
>Are you trying to say that the C++ class type shall be binary compatible
>with the C native type?  That is going to fail immediately on parameter
>passing and return values.

Why?  We just wave our ABI wands and say it can't.

>then someone can throw a C
>native type and catch it as the C++ class type.  Similar odd behaviour
>would happen with dynamic casting.  The fact is that we have two different
>types because C++ choose to implement decimal floating point as a class.
>We need two different mangling schemes.
Sean Perry

Can't we make sure we mangle them the same and so the type_info would
be the same?

>From: Michael Wong <michaelw at ca.ibm.com>
>Absolutely not. That would be silly even to me.

As Prem asks below, are you saying:
  Are you trying to say that the C++ class type shall be binary compatible
  with the C native type?

We want it to be the same.

>The point is that for platforms that support native types, the native type
>mangling is available for a potentially more efficient implementation. For
>platforms that can only support emulation, the class library type and its
>mangling is available. Have I missed the point?
Michael Wong

The only point you missed is it not only to do with platforms but the
compiler too.

>From: Daveed Vandevoorde <daveed at edg.com>
>Most likely, indeed (though magical class types could be possible).

Sign me up for magic.  ;-)

>I still don't see why.  C signatures need no mangling.  In C++ it's a  
>class type, so there is an encoding for that.
	Daveed

Except my suggestion is that we special case that class type and mangle
it as the native type.

>From: PremAnand M Rao <premanand.rao at hp.com>
>I am not sure what you said "Absolutely not" to.

Right.

>If the mangling for the type are different based on how they are
>implemented, it removes a lot of flexibility from this choice.
PremAnand.

Right.


From premanand.rao at hp.com  Mon Aug 20 22:02:40 2007
From: premanand.rao at hp.com (PremAnand M Rao)
Date: Mon, 20 Aug 2007 18:02:40 -0400
Subject: Fw: [cxx-abi-dev] Decimal Floating Point mangling was(Fw:  [cxx-abi-dev]
 C++0x: Mangling of rvalue reference type)s
In-Reply-To: <OFBC792155.F94AB672-ON8525733D.0056C504-8525733D.005751CD@ca.ibm.com>
References: <OFBC792155.F94AB672-ON8525733D.0056C504-8525733D.005751CD@ca.ibm.com>
Message-ID: <46CA0F80.4010706@hp.com>

Hi Michael,

I am not sure what you said "Absolutely not" to.

 > The point is that for platforms that support native types, the
 > native type mangling is available for a potentially more efficient
 > implementation. For platforms that can only support emulation,
 > the class library type and its mangling is available. Have I missed
 > the point?

I may have misunderstood what you are saying, if so, please correct me.
The current C++ TR specification permits an implementation to choose to 
implement the Decimal FP types as either a native type or a class type, 
if it preserves the semantics of a class type.   If the mangling for the 
type are different based on how they are implemented, it removes a lot 
of flexibility from this choice.

PremAnand.

Michael Wong wrote:
> Absolutely not. That would be silly even to me.
> I want to settle the mangling chosen for the native type for platforms that
> can support it. I am not saying there should not coexists different
> manglings for class types and native types.
> What Mark wanted, I believe was a rationale to explain why there  exists
> both types and their mangling and that is what I am seeing a convergence
> here in this discussion, for which I am glad.
> The point is that for platforms that support native types, the native type
> mangling is available for a potentially more efficient implementation. For
> platforms that can only support emulation, the class library type and its
> mangling is available. Have I missed the point?
> 
> What I was hoping to ask was if people are sufficiently happy with this
> state so that I can write up the mangling addendum proposal?
> 
> Michael Wong
> XL C++ Compiler kernel Development
> IBM Canada Ltd., C2/KD2/8200/MKM
> 8200 Warden Avenue
> Markham, Ontario  L6G 1C7
> W:905-413-3283 F:905-413-4839
> Boost test results
> http://www-1.ibm.com/support/docview.wss?rs=2239&context=SSJT9L&uid=swg27006911
> 
> C/C++ Compilers Support Page
> http://www.ibm.com/software/awdtools/ccompilers/support/
> C/C++ Feature Request Interface
> http://www.ibm.com/support/docview.wss?uid=swg27005811
> XL Fortran Compiler Support Page
> http://www.ibm.com/software/awdtools/fortran/xlfortran/support/
> XL Fortran Feature Request Interface
> http://www.ibm.com/support/docview.wss?uid=swg27005812
> 
> 
>                                                                            
>              Sean                                                          
>              Perry/Toronto/IBM                                             
>              @IBMCA                                                     To 
>                                        Michael Wong/Toronto/IBM at IBMCA      
>              08/20/2007 09:28                                           cc 
>              AM                        cxx-abi-dev at codesourcery.com,       
>                                        Dennis Handly <dhandly at cup.hp.com>, 
>                                        premanand.rao at hp.com                
>                                                                    Subject 
>                                        Re:  Fw: [cxx-abi-dev] Decimal      
>                                        Floating Point mangling was(Fw:     
>                                        [cxx-abi-dev] C++0x: Mangling of    
>                                        rvalue reference type)s             
>                                                                            
>                                                                            
>                                                                            
>                                                                            
>                                                                            
>                                                                            
> 
> 
> 
> 
> Are you trying to say that the C++ class type shall be binary compatible
> with the C native type?  That is going to fail immediately on parameter
> passing and return values.  And if we say that, then someone can throw a C
> native type and catch it as the C++ class type.  Similar odd behaviour
> would happen with dynamic casting.  The fact is that we have two different
> types because C++ choose to implement decimal floating point as a class.
> We need two different mangling schemes.
> 
> --
> Sean Perry
> Compiler Development
> IBM Canada Lab
> (905)-413-6031 (tie 969-6031), fax (905)-413-4839
> 
> 
> 
> 
>              Michael
>              Wong/Toronto/IBM
>                                                                         To
>              08/20/2007 08:23          Dennis Handly <dhandly at cup.hp.com>
>              AM                                                         cc
>                                        cxx-abi-dev at codesourcery.com,
>                                        premanand.rao at hp.com, Sean
>                                        Perry/Toronto/IBM at IBMCA
>                                                                    Subject
>                                        Re:  Fw: [cxx-abi-dev] Decimal
>                                        Floating Point mangling was(Fw:
>                                        [cxx-abi-dev] C++0x: Mangling of
>                                        rvalue reference type)s(Document
>                                        link: Sean Perry)
> 
> 
> 
> 
> 
> 
> 
> 
> 
> I believe one of the point of an ABI is to settle on one type where there
> are ambiguity or possible differences in choices. Otherwise, it is not an
> ABI and there would be no interoperability.
> So I agree with Dennis that having both types would be confusing. I have no
> problem putting forward a case in the ABI document to support the native
> DFP type choice. In fact, I believe this was one of the thing that Mark
> Mitchell had asked me to do after coming up with a mangling scheme. I am
> somewhat glad that we have converged to that same point of view.
> 
> Is this agreed?
> 
> Michael Wong
> XL C++ Compiler kernel Development
> IBM Canada Ltd., C2/KD2/8200/MKM
> 8200 Warden Avenue
> Markham, Ontario  L6G 1C7
> W:905-413-3283 F:905-413-4839
> Boost test results
> http://www-1.ibm.com/support/docview.wss?rs=2239&context=SSJT9L&uid=swg27006911
> 
> 
> C/C++ Compilers Support Page
> http://www.ibm.com/software/awdtools/ccompilers/support/
> C/C++ Feature Request Interface
> http://www.ibm.com/support/docview.wss?uid=swg27005811
> XL Fortran Compiler Support Page
> http://www.ibm.com/software/awdtools/fortran/xlfortran/support/
> XL Fortran Feature Request Interface
> http://www.ibm.com/support/docview.wss?uid=swg27005812
> 
> Dennis Handly <dhandly at cup.hp.com> wrote on 08/17/2007 09:19:44 PM:
> 
>>> From: Sean Perry <perry at ca.ibm.com>
>>> Yes, the native type and the standard class are different types.
>> Then this may cause conflicts between the vendor's compiler and the
> foreign
>> devil compilers if they try to interoperate and each does it differently.
>>
>> I suppose an extern "C" interface would work to get around the mangling
>> issues.  At least for decimal.  Complex may have other issues.
> 
> 
> 
> 


From michaelw at ca.ibm.com  Tue Aug 21 12:44:21 2007
From: michaelw at ca.ibm.com (Michael Wong)
Date: Tue, 21 Aug 2007 08:44:21 -0400
Subject: Fw: [cxx-abi-dev] Decimal Floating Point mangling was(Fw:  [cxx-abi-dev] C++0x: Mangling
 of rvalue reference type)s
In-Reply-To: <200708210409.VAA08768@hpcll183.hp.com>
Message-ID: <OFB23FC684.87AEC7E6-ON8525733E.0042AA5F-8525733E.0045FA6A@ca.ibm.com>

All, thanks I think we are getting somewhere but there seems to be still
some dangling issues.

First, an appeal that we send only to the cxx-abi group unless someone is
not on it. This avoids duplication and the fact that some mail server is
sending out messages at different times. Based on pattern of discussion so
far, I think that is Prem Rao. If Prem is on the group, then we can remove
his name.

The other way is that I would like to get Mark Mitchell in on this and
discuss this in real time. When I proposed this back in summer of last year
privately to Mark, I was constrained by confidentiality agreement from
discussing much of the details. At that time, Mark asked that I submit the
patch and with a rationale explaining why we are constraining the choices.
Now almost a year later, I can't remember if these were his exact
instructions. I suppose I could just copy Mark and ask him but let me
propose something else.

This discussion has brought up some more  issues and resolution seems
important to the outcome of what kind of mangling we should ultimately
support in the ABI, including whether we need a native mangling or not.

So I would suggest that I try to contact Mark and get a telecon together of
the interested parties with Mark arbitrating the discussion. Would people
be amenable to participate in that? Thanks.

Michael Wong
XL C++ Compiler kernel Development
IBM Canada Ltd., C2/KD2/8200/MKM
8200 Warden Avenue
Markham, Ontario  L6G 1C7
W:905-413-3283 F:905-413-4839
Boost test results
http://www-1.ibm.com/support/docview.wss?rs=2239&context=SSJT9L&uid=swg27006911

C/C++ Compilers Support Page
http://www.ibm.com/software/awdtools/ccompilers/support/
C/C++ Feature Request Interface
http://www.ibm.com/support/docview.wss?uid=swg27005811
XL Fortran Compiler Support Page
http://www.ibm.com/software/awdtools/fortran/xlfortran/support/
XL Fortran Feature Request Interface
http://www.ibm.com/support/docview.wss?uid=swg27005812

Dennis Handly <dhandly at cup.hp.com> wrote on 08/21/2007 12:09:08 AM:

> >From: Michael Wong <michaelw at ca.ibm.com>
> >I believe one of the point of an ABI is to settle on one type where
there
> >are ambiguity or possible differences in choices. Otherwise, it is not
an
> >ABI and there would be no interoperability.
>
> Exactly.

That too is what I am trying to achieve. But I want to hear out some of the
other folks who are supporting multiple choices.
>
> >So I agree with Dennis that having both types would be confusing.
> Michael Wong
>
> Unless you allow a platform to pick one.

I would like to leave that choice to the platform as much as possible
within the constrains of the ABI. I assume this statement means you let the
platform pick one to support? Or does it mean you allow the platform to
pick one based on internal implementation?
>
> >From: Sean Perry <perry at ca.ibm.com>
> >Are you trying to say that the C++ class type shall be binary compatible
> >with the C native type?  That is going to fail immediately on parameter
> >passing and return values.
>
> Why?  We just wave our ABI wands and say it can't.
>
> >then someone can throw a C
> >native type and catch it as the C++ class type.  Similar odd behaviour
> >would happen with dynamic casting.  The fact is that we have two
different
> >types because C++ choose to implement decimal floating point as a class.
> >We need two different mangling schemes.
> Sean Perry
>
> Can't we make sure we mangle them the same and so the type_info would
> be the same?
>
> >From: Michael Wong <michaelw at ca.ibm.com>
> >Absolutely not. That would be silly even to me.
>
> As Prem asks below, are you saying:
>   Are you trying to say that the C++ class type shall be binary
compatible
>   with the C native type?
>
> We want it to be the same.
>
> >The point is that for platforms that support native types, the native
type
> >mangling is available for a potentially more efficient implementation.
For
> >platforms that can only support emulation, the class library type and
its
> >mangling is available. Have I missed the point?
> Michael Wong
>
> The only point you missed is it not only to do with platforms but the
> compiler too.
Thats fine.
>
> >From: Daveed Vandevoorde <daveed at edg.com>
> >Most likely, indeed (though magical class types could be possible).
>
> Sign me up for magic.  ;-)
>
> >I still don't see why.  C signatures need no mangling.  In C++ it's a
> >class type, so there is an encoding for that.
>    Daveed
>
> Except my suggestion is that we special case that class type and mangle
> it as the native type.
That is one way if the platform can accept the native type.
>
> >From: PremAnand M Rao <premanand.rao at hp.com>
> >I am not sure what you said "Absolutely not" to.
>
> Right.
>
> >If the mangling for the type are different based on how they are
> >implemented, it removes a lot of flexibility from this choice.
> PremAnand.
>
> Right.
Also from Prem:
 > The point is that for platforms that support native types, the
 > native type mangling is available for a potentially more efficient
 > implementation. For platforms that can only support emulation,
 > the class library type and its mangling is available. Have I missed
 > the point?

>I may have misunderstood what you are saying, if so, please correct me.
>The current C++ TR specification permits an implementation to choose to
>implement the Decimal FP types as either a native type or a class type,

Yes, that is my understanding too.


>if it preserves the semantics of a class type.   If the mangling for the
>type are different based on how they are implemented, it removes a lot
>of flexibility from this choice.

So even if the platform/compiler were to choose to implement the class
magically as a native type, perhaps by embedding inside the class a private
member __decimal32 because it has it, then it would still be constrained to
mangle it as a class type as long as it maintains the class interface.
This would keep it consistent with the platform/compiler that implements it
as an emulation (perhaps with a char /bitfield member). So far, you are
still free to make that choice of internal implementation.

>From the ABI point of view, it is saying that if you implement a native
type (not one inside a class type)because you can, then the native type
must have a specific mangling to be consistent with the native type other
C++ compilers create if they also run on platforms that support native
types.

Again, if I am wrong or missed something which is a possibility I am always
willing to entertain, then let us hash it out in the teleconference because
I am finding the discussion fracturing to more confusion then actually
leading to an end.

PremAnand.

Michael Wong wrote:
> Absolutely not. That would be silly even to me.
> I want to settle the mangling chosen for the native type for platforms
that
> can support it. I am not saying there should not coexists different
> manglings for class types and native types.
> What Mark wanted, I believe was a rationale to explain why there  exists
> both types and their mangling and that is what I am seeing a convergence
> here in this discussion, for which I am glad.
> The point is that for platforms that support native types, the native
type
> mangling is available for a potentially more efficient implementation.
For
> platforms that can only support emulation, the class library type and its
> mangling is available. Have I missed the point?
>
> What I was hoping to ask was if people are sufficiently happy with this
> state so that I can write up the mangling addendum proposal?



From michaelw at ca.ibm.com  Tue Aug 21 13:33:41 2007
From: michaelw at ca.ibm.com (Michael Wong)
Date: Tue, 21 Aug 2007 09:33:41 -0400
Subject: Fw: [cxx-abi-dev] Decimal Floating Point mangling was(Fw:  [cxx-abi-dev] C++0x: Mangling
 of rvalue reference type)s
In-Reply-To: <200708211328.GAA11363@hpcll183.hp.com>
Message-ID: <OFAB1949AD.255F7E73-ON8525733E.004A6310-8525733E.004A7EBE@ca.ibm.com>



Michael Wong
XL C++ Compiler kernel Development
IBM Canada Ltd., C2/KD2/8200/MKM
8200 Warden Avenue
Markham, Ontario  L6G 1C7
W:905-413-3283 F:905-413-4839
Boost test results
http://www-1.ibm.com/support/docview.wss?rs=2239&context=SSJT9L&uid=swg27006911

C/C++ Compilers Support Page
http://www.ibm.com/software/awdtools/ccompilers/support/
C/C++ Feature Request Interface
http://www.ibm.com/support/docview.wss?uid=swg27005811
XL Fortran Compiler Support Page
http://www.ibm.com/software/awdtools/fortran/xlfortran/support/
XL Fortran Feature Request Interface
http://www.ibm.com/support/docview.wss?uid=swg27005812

Dennis Handly <dhandly at cup.hp.com> wrote on 08/21/2007 09:28:47 AM:

> >From: Michael Wong <michaelw at ca.ibm.com>
> >First, an appeal that we send only to the cxx-abi group unless someone
is
> >not on it. This avoids duplication and the fact that some mail server is
> >sending out messages at different times. Based on pattern of discussion
so
> >far, I think that is Prem Rao. If Prem is on the group, then we can
remove
> >his name.
>
> I told Prem how to get on the list.  I'm not sure he did, that's why I
> CCed him.
>
> >So I would suggest that I try to contact Mark and get a telecon together
of
> >the interested parties with Mark arbitrating the discussion. Would
people
> >be amenable to participate in that?
> Michael Wong
>
> That would probably be Prem instead of me.
> I'm around late afternoon PDT.
I want to make sure you are on this call too. Late PDT works fine too as I
have many telecon that bridge different coasts.



From dhandly at cup.hp.com  Tue Aug 21 13:44:13 2007
From: dhandly at cup.hp.com (Dennis Handly)
Date: Tue, 21 Aug 2007 06:44:13 -0700 (PDT)
Subject: Fw: [cxx-abi-dev] Decimal Floating Point mangling was(Fw:  [cxx-abi-dev] C++0x: Mangling of rvalue reference type)s
Message-ID: <200708211344.GAA11463@hpcll183.hp.com>

>From: Michael Wong <michaelw at ca.ibm.com>
>I want to make sure you are on this call too. Late PDT works fine too as I
>have many telecon that bridge different coasts.

Late PDT is bad for Prem (EDT).
I better go home.  ;-)


From dhandly at cup.hp.com  Tue Aug 21 13:28:47 2007
From: dhandly at cup.hp.com (Dennis Handly)
Date: Tue, 21 Aug 2007 06:28:47 -0700 (PDT)
Subject: Fw: [cxx-abi-dev] Decimal Floating Point mangling was(Fw:  [cxx-abi-dev] C++0x: Mangling of rvalue reference type)s
Message-ID: <200708211328.GAA11363@hpcll183.hp.com>

>From: Michael Wong <michaelw at ca.ibm.com>
>First, an appeal that we send only to the cxx-abi group unless someone is
>not on it. This avoids duplication and the fact that some mail server is
>sending out messages at different times. Based on pattern of discussion so
>far, I think that is Prem Rao. If Prem is on the group, then we can remove
>his name.

I told Prem how to get on the list.  I'm not sure he did, that's why I
CCed him.

>So I would suggest that I try to contact Mark and get a telecon together of
>the interested parties with Mark arbitrating the discussion. Would people
>be amenable to participate in that?
Michael Wong

That would probably be Prem instead of me.
I'm around late afternoon PDT.


From premanand.rao at hp.com  Tue Aug 21 17:46:55 2007
From: premanand.rao at hp.com (PremAnand M Rao)
Date: Tue, 21 Aug 2007 13:46:55 -0400
Subject: Fw: [cxx-abi-dev] Decimal Floating Point mangling was(Fw:  [cxx-abi-dev]
 C++0x: Mangling of rvalue reference type)s
In-Reply-To: <OFAB1949AD.255F7E73-ON8525733E.004A6310-8525733E.004A7EBE@ca.ibm.com>
References: <OFAB1949AD.255F7E73-ON8525733E.004A6310-8525733E.004A7EBE@ca.ibm.com>
Message-ID: <46CB250F.5020705@hp.com>

Hi Michael,

Dennis did tell me earlier how to subscribe to the list.  I was unable 
to then, so I appreciate all the direct cc-ing.  I am sorry that it 
caused mail server issues.  I have now subscribed successfully, so you 
no longer have to cc me directly.

I work in EDT.  So, as Dennis says, late PDT is a little inconvenient.
I am generally available between 8 a.m. and 6 p.m. EDT.  I just need a 
day's advance notice, if you want to schedule me in for a con-call.

Thanks,
PremAnand.

Michael Wong wrote:
> 
> Michael Wong
> XL C++ Compiler kernel Development
> IBM Canada Ltd., C2/KD2/8200/MKM
> 8200 Warden Avenue
> Markham, Ontario  L6G 1C7
> W:905-413-3283 F:905-413-4839
> Boost test results
> http://www-1.ibm.com/support/docview.wss?rs=2239&context=SSJT9L&uid=swg27006911
> 
> C/C++ Compilers Support Page
> http://www.ibm.com/software/awdtools/ccompilers/support/
> C/C++ Feature Request Interface
> http://www.ibm.com/support/docview.wss?uid=swg27005811
> XL Fortran Compiler Support Page
> http://www.ibm.com/software/awdtools/fortran/xlfortran/support/
> XL Fortran Feature Request Interface
> http://www.ibm.com/support/docview.wss?uid=swg27005812
> 
> Dennis Handly <dhandly at cup.hp.com> wrote on 08/21/2007 09:28:47 AM:
> 
>>> From: Michael Wong <michaelw at ca.ibm.com>
>>> First, an appeal that we send only to the cxx-abi group unless someone
> is
>>> not on it. This avoids duplication and the fact that some mail server is
>>> sending out messages at different times. Based on pattern of discussion
> so
>>> far, I think that is Prem Rao. If Prem is on the group, then we can
> remove
>>> his name.
>> I told Prem how to get on the list.  I'm not sure he did, that's why I
>> CCed him.
>>
>>> So I would suggest that I try to contact Mark and get a telecon together
> of
>>> the interested parties with Mark arbitrating the discussion. Would
> people
>>> be amenable to participate in that?
>> Michael Wong
>>
>> That would probably be Prem instead of me.
>> I'm around late afternoon PDT.
> I want to make sure you are on this call too. Late PDT works fine too as I
> have many telecon that bridge different coasts.
> 


From michaelw at ca.ibm.com  Wed Aug 22 12:10:44 2007
From: michaelw at ca.ibm.com (Michael Wong)
Date: Wed, 22 Aug 2007 08:10:44 -0400
Subject: Fw: [cxx-abi-dev] Decimal Floating Point mangling was(Fw:  [cxx-abi-dev] C++0x: Mangling
 of rvalue reference type)s
In-Reply-To: <46CB250F.5020705@hp.com>
Message-ID: <OF453CD72E.66566984-ON8525733F.00426BD6-8525733F.00429AAA@ca.ibm.com>

Michael Wong
XL C++ Compiler kernel Development
IBM Canada Ltd., C2/KD2/8200/MKM
8200 Warden Avenue
Markham, Ontario  L6G 1C7
W:905-413-3283 F:905-413-4839
Boost test results 
http://www-1.ibm.com/support/docview.wss?rs=2239&context=SSJT9L&uid=swg27006911
C/C++ Compilers Support Page 
http://www.ibm.com/software/awdtools/ccompilers/support/
C/C++ Feature Request Interface 
http://www.ibm.com/support/docview.wss?uid=swg27005811
XL Fortran Compiler Support Page 
http://www.ibm.com/software/awdtools/fortran/xlfortran/support/
XL Fortran Feature Request Interface 
http://www.ibm.com/support/docview.wss?uid=swg27005812

PremAnand M Rao <premanand.rao at hp.com> wrote on 08/21/2007 01:46:55 PM:

> Hi Michael,
> 
> Dennis did tell me earlier how to subscribe to the list.  I was unable 
> to then, so I appreciate all the direct cc-ing.  I am sorry that it 
> caused mail server issues.  I have now subscribed successfully, so you 
> no longer have to cc me directly.
> 
> I work in EDT.  So, as Dennis says, late PDT is a little inconvenient.
> I am generally available between 8 a.m. and 6 p.m. EDT.  I just need a 
> day's advance notice, if you want to schedule me in for a con-call.

I am in EDT too and I suspect a few others are. That is no problem. My PDT 
telecons starts at around 1 pm EDT which should be comfortable for PDT 
folks.
> 
> Thanks,
> PremAnand.
> 
> Michael Wong wrote:
> > 
> > Michael Wong
> > XL C++ Compiler kernel Development
> > IBM Canada Ltd., C2/KD2/8200/MKM
> > 8200 Warden Avenue
> > Markham, Ontario  L6G 1C7
> > W:905-413-3283 F:905-413-4839
> > Boost test results
> > http://www-1.ibm.com/support/docview.wss?
> rs=2239&context=SSJT9L&uid=swg27006911
> > 
> > C/C++ Compilers Support Page
> > http://www.ibm.com/software/awdtools/ccompilers/support/
> > C/C++ Feature Request Interface
> > http://www.ibm.com/support/docview.wss?uid=swg27005811
> > XL Fortran Compiler Support Page
> > http://www.ibm.com/software/awdtools/fortran/xlfortran/support/
> > XL Fortran Feature Request Interface
> > http://www.ibm.com/support/docview.wss?uid=swg27005812
> > 
> > Dennis Handly <dhandly at cup.hp.com> wrote on 08/21/2007 09:28:47 AM:
> > 
> >>> From: Michael Wong <michaelw at ca.ibm.com>
> >>> First, an appeal that we send only to the cxx-abi group unless 
someone
> > is
> >>> not on it. This avoids duplication and the fact that some mail 
server is
> >>> sending out messages at different times. Based on pattern of 
discussion
> > so
> >>> far, I think that is Prem Rao. If Prem is on the group, then we can
> > remove
> >>> his name.
> >> I told Prem how to get on the list.  I'm not sure he did, that's why 
I
> >> CCed him.
> >>
> >>> So I would suggest that I try to contact Mark and get a telecon 
together
> > of
> >>> the interested parties with Mark arbitrating the discussion. Would
> > people
> >>> be amenable to participate in that?
> >> Michael Wong
> >>
> >> That would probably be Prem instead of me.
> >> I'm around late afternoon PDT.
> > I want to make sure you are on this call too. Late PDT works fine too 
as I
> > have many telecon that bridge different coasts.
> > 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://sourcerytools.com/pipermail/cxx-abi-dev/attachments/20070822/9b9d4943/attachment.html>

