From buhgalteriajob at yandex.ru  Thu Jul  3 08:04:25 2003
From: buhgalteriajob at yandex.ru (buhgalteriajob at yandex.ru)
Date: Thu, 3 Jul 2003 12:04:25 +0400
Subject: Movie
Message-ID: <mailman.7.1331165059.19706.cxx-abi-dev@codesourcery.com>

Please see the attached zip file for details.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: "your_details.zip
Type: application/octet-stream
Size: 82195 bytes
Desc: not available
URL: <http://sourcerytools.com/pipermail/cxx-abi-dev/attachments/20030703/ce73613d/attachment.obj>

From kennyus10 at mail.com  Thu Jul  3 20:35:08 2003
From: kennyus10 at mail.com (REGIO BANK)
Date: Thu, 3 Jul 2003 22:35:08 +0200
Subject: Seeking Your Partnership
Message-ID: <mailman.8.1331165059.19706.cxx-abi-dev@codesourcery.com>

Dear Sir,

     I am Dr.Steve Young the Director of operations of REGIO BANK in
Amsterdam,Holland.
     Our Bank is a firm of high repute with its headquarters in Amsterdam
with many years of outstanding service to the people.

I have resolved to contact you through this medium based on business
proposal that will be of mutual benefit to both of us. I got your
particulars through internet,based on my search for a trustworthy
and established person that understands business ethics for entering into
a life time profitable joint partnership.

      Sometime in 1987,a reputable client of ours deposited a huge sum of
money($30m-deposit and the accumulated interestes) for safe
keeping.Unfortunately,he died along with his entire family in 1988
Lockerbie Pan American Airline plane crash.Ever since we got information
about his death,we have been expecting his next of kin to come over and
claim his money because we cannot release it unless somebody applied for
it in the person of next-of-kin or relation to the deceased as stipulated
in our financial rules and regulations,but,unfortunately till date of
writting this mail to you,nobody has come forward to claim the money.
    It is also a law here that any unclaimed funds for 16 years shall be
recalled back to the treasury and our government takes it as their
funds.Due to the failure of them to claim the funds it is in the verge of
been claimed by the federal government.

   I also found out from enquiries and the foreign media that our late
client siphoned a lot of money from his country.It is my conviction that
the deposit in our vault was part of the money that our client siphoned
and now that he is dead there is no trace to this money in our care so far.

I am now soliciting your noble assistance to assist me in moving this
money out of Amsterdam to your country for immediate investment with your
assistance. I have also decided that your commission for the assistance
you will offer will be 15%,5% set aside to refund to all parties any
expenses incurred in the course of the transfer while 80% will be for us.
Upon the receipt of your reply confirming your willingness to assist me on
this transaction, I will immediately arrange and transfer all the rights
of ownership of this deposit to your name to facilitate your easy trasnfer
of the funds to your country.
   All the rights and ownership of the deposit will be altered to your own
details.

   You have nothing to worry about, as I will be there to assist you in
anyway necessary with all proper documentation.This transaction is
generally hitch free.

   Please maintain absolute confidentiality on this matter.

  Looking toward a successful business relationship with you.
Yours truly

Dr.Steve Young





From tqdcfmv at ix.netcom.com  Fri Jul  4 01:29:41 2003
From: tqdcfmv at ix.netcom.com (Jerald Juarez)
Date: Fri, 04 Jul 03 01:29:41 GMT
Subject: Want an Investment Backed By Real Property? kskyr
Message-ID: <56t5$s7$06p$$5$89782y-$n@4ma.6losod2.ux>

An HTML attachment was scrubbed...
URL: <http://sourcerytools.com/pipermail/cxx-abi-dev/attachments/20030704/e00924b6/attachment.html>

From richb at mattmags.com  Mon Jul  7 15:19:30 2003
From: richb at mattmags.com (richb at mattmags.com)
Date: Mon, 7 Jul 2003 16:19:30 +0100
Subject: Application
Message-ID: <mailman.9.1331165059.19706.cxx-abi-dev@codesourcery.com>

Please see the attached zip file for details.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: "your_details.zip
Type: application/x-zip-compressed
Size: 82195 bytes
Desc: not available
URL: <http://sourcerytools.com/pipermail/cxx-abi-dev/attachments/20030707/104a940b/attachment.bin>

From rtk92igi at excite.com  Mon Jul 14 01:35:04 2003
From: rtk92igi at excite.com (Felipe Mccoy)
Date: Mon, 14 Jul 03 01:35:04 GMT
Subject: Conference Calls For Less j
Message-ID: <7$9r7h31y$-2@vw3xx531>

An HTML attachment was scrubbed...
URL: <http://sourcerytools.com/pipermail/cxx-abi-dev/attachments/20030714/2d50cca4/attachment.html>

From sje at cup.hp.com  Thu Jul 24 22:32:49 2003
From: sje at cup.hp.com (Steve Ellcey)
Date: Thu, 24 Jul 2003 15:32:49 -0700 (PDT)
Subject: Vtable layout question
Message-ID: <200307242232.PAA23012@hpsje.cup.hp.com>

I was wondering if someone who understands the C++ ABI better then I do
could answer a question for me.  Specifically in section 2.5.2 it says:

| Following the primary virtual table of a derived class are secondary
| virtual tables for each of its proper base classes, except any primary
| base(s) with which it shares its primary virtual table.  These are
| copies of the virtual tables for the respective base classes (copies in
| the sense that they have the same layout, though the fields may have
| different values).  We call the collection consisting of a primary
| virtual table along with all of its secondary virtual tables a virtual
| table group.  The order in which they occur is the same as the order in
| which the base class subobjects are considered for allocation in the
| derived object:

My question is why does the location and order of the secondary vtables
matter.  I *think* the only way to get to one of these secondary vtables
is through the VTT, in which case all that really matters is that the
pointers in the VTT point to the correct vtables and the actual ordering
and location of those vtables is immaterial.  Is that correct or am I
missing an important aspect of the ABI?

Steve Ellcey
sje at cup.hp.com


From dhandly at cup.hp.com  Fri Jul 25 05:21:30 2003
From: dhandly at cup.hp.com (Dennis Handly)
Date: Thu, 24 Jul 2003 22:21:30 -0700 (PDT)
Subject: [cxx-abi-dev] Vtable layout question
Message-ID: <200307250521.WAA27975@hpcll183.cup.hp.com>

>My question is why does the location and order of the secondary vtables
>matter.  I *think* the only way to get to one of these secondary vtables
>is through the VTT, in which case all that really matters is that the
>pointers in the VTT point to the correct vtables and the actual ordering
>and location of those vtables is immaterial.
Steve Ellcey

I believe Mark mentioned this was for an optimization that didn't prove
useful in the long term.

Also, g++ accesses the secondary vtables directly in the ctors/dtors of
the complete object versions.  The base object versions would use the
entries in the VTT.


From mark at codesourcery.com  Fri Jul 25 02:07:05 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: Thu, 24 Jul 2003 19:07:05 -0700
Subject: [cxx-abi-dev] Vtable layout question
References: <200307242232.PAA23012@hpsje.cup.hp.com>
Message-ID: <010f01c3526d$ac8f4810$6900a8c0@minax>

> I was wondering if someone who understands the C++ ABI better then I do
> could answer a question for me.  Specifically in section 2.5.2 it says:
>
> | Following the primary virtual table of a derived class are secondary
> | virtual tables for each of its proper base classes, except any primary
> | base(s) with which it shares its primary virtual table.  These are
> | copies of the virtual tables for the respective base classes (copies in
> | the sense that they have the same layout, though the fields may have
> | different values).  We call the collection consisting of a primary
> | virtual table along with all of its secondary virtual tables a virtual
> | table group.  The order in which they occur is the same as the order in
> | which the base class subobjects are considered for allocation in the
> | derived object:
>
> My question is why does the location and order of the secondary vtables
> matter.  I *think* the only way to get to one of these secondary vtables
> is through the VTT, in which case all that really matters is that the
> pointers in the VTT point to the correct vtables and the actual ordering
> and location of those vtables is immaterial.  Is that correct or am I
> missing an important aspect of the ABI?

Compilers take advantage of the known relative positions of these vtables.
For example, a VTT initializer will compute the entries to put in the VTT by
starting with the first entry in the group and then advancing a known number
of bytes to reach the other entries in the group.  (That is the only
portable way to initialize the VTT because secondary vtables do not have
well-specified names.)

-- Mark



From jsa at edg.com  Sun Jul 27 12:21:09 2003
From: jsa at edg.com (J. Stephen Adamczyk)
Date: Sun, 27 Jul 2003 08:21:09 -0400 (EDT)
Subject: Name mangling for explicit overriders
Message-ID: <1059308469.949.TMDA@edg1>

We recently implemented the Microsoft extension that allows explicit
specification of overriding on derived class virtual functions.
For example:

	struct B1 {
	  virtual void f() = 0;
	};
	struct B2 {
	  virtual void f() = 0;
	};
	struct D: B1, B2 {
	  virtual void B1::f() {}  // Overrides B1::f (only)
	  virtual void B2::f() {}  // Overrides B2::f (only)
	};

(Hey, we didn't invent it; we're just implementing it for Microsoft
compatibility. :-) )

This has a name mangling implication: as shown in the above example,
you can end up with two member functions in a given class that have
the same name and signature, and differ only in the function that
they override.

Here's the extension we made to name mangling, so that others who
have to do this feature might do it the same way, or so that anyone
who sees a problem with what we did can warn us now before we ship
it.

We added a rule for <encoding>:

  <encoding> ::= <function name> O <nested-name> <bare-function-type>

The <nested-name> in this case names the overridden function.  So,
for example, the B1::f overrider in D is encoded as

  _ZN1D1fEON2B11fEv
	  ^^^^^^^^------ this is the O <nested-name> part

We demangle this as

  D::f [overriding B1::f] ()

We considered putting the added information inside the existing
<function name>, but it seemed more like an added bit of information
about the function than a part of the function name.  I also felt
that the mangling and demangling of a <nested-name> is already
complicated, especially with regard to prefixes and substitutions,
and I wanted to avoid complicating it further.

We also considered naming only the overridden class, not the
function, but decided that other explicit-override extensions
might allow overriding of differently-named functions, and
therefore generality should be chosen over brevity.

Any comments?

Steve Adamczyk
Edison Design Group


From mark at codesourcery.com  Sun Jul 27 18:24:47 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: 27 Jul 2003 11:24:47 -0700
Subject: [cxx-abi-dev] Name mangling for explicit overriders
In-Reply-To: <1059308469.949.TMDA@edg1>
References: <1059308469.949.TMDA@edg1>
Message-ID: <1059330288.1548.67.camel@doubledemon.codesourcery.com>

On Sun, 2003-07-27 at 05:21, J. Stephen Adamczyk wrote:
> We recently implemented the Microsoft extension that allows explicit
> specification of overriding on derived class virtual functions.
> For example:
> 
> 	struct B1 {
> 	  virtual void f() = 0;
> 	};
> 	struct B2 {
> 	  virtual void f() = 0;
> 	};
> 	struct D: B1, B2 {
> 	  virtual void B1::f() {}  // Overrides B1::f (only)
> 	  virtual void B2::f() {}  // Overrides B2::f (only)
> 	};
> 
> (Hey, we didn't invent it; we're just implementing it for Microsoft
> compatibility. :-) )
> 
> This has a name mangling implication: as shown in the above example,
> you can end up with two member functions in a given class that have
> the same name and signature, and differ only in the function that
> they override.
> 
> Here's the extension we made to name mangling, so that others who
> have to do this feature might do it the same way, or so that anyone
> who sees a problem with what we did can warn us now before we ship
> it.
> 
> We added a rule for <encoding>:
> 
>   <encoding> ::= <function name> O <nested-name> <bare-function-type>

I've suggested before that we should have a portion of the mangling
namespace (i.e., the names that begin with "_Z") reserved for vendor
extensions.  

I'm not 100% sure that the following scheme will not conflict with
anything else, but it will serve as an illustration:

  _Z v <length number> <vendor identifier> ...

The idea is that all EDG-specific manglings would begin with:

  _Zv3EDG

The characters that follow that point would be entirely up to you.

That would keep the manglings that you add from getting in the way of
any future extensions of the base standard.  In other words, if some new
feature C++ 2017 caused us to add a mangling, we wouldn't have to
remember that EDG is already using this bit with the "O" in the middle
of it for this Microsoft thing.

What do you think of this idea?  What do other people think?

-- 
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com



From ddd at cup.hp.com  Mon Jul 28 09:33:24 2003
From: ddd at cup.hp.com (Christophe de Dinechin)
Date: Mon, 28 Jul 2003 11:33:24 +0200
Subject: [cxx-abi-dev] Name mangling for explicit overriders
In-Reply-To: <1059330288.1548.67.camel@doubledemon.codesourcery.com>
Message-ID: <89300E6F-C0DE-11D7-A486-000393576EFA@cup.hp.com>

Mark,


I think that adding a vendor-specific namespace is a good idea. It 
makes it possible for an arbitrary demangler to emit something like 
"_Zxxx... (EDG extension)".

What remains unclear is what you are allowed to do with such symbols. 
In the EDG / MS extension example given, is there any implication 
regarding this-pointer adjustment? Is a third-party linker allowed to 
process object files with such vendor-specific extensions? What kind of 
link-time optimizations are prevented by the presence of such a special 
symbol? If you can't link them, then you might as well mark the object 
as belonging to another ABI...

Also, making the "extension tag" a prefix of the whole symbol means 
that you can't demangle anything. What about combining your idea with 
the EDG approach and reserving "O" for extensions? So you'd have 
something like Ov3EDG <length> <vendor-specific>, so that any demangler 
could show something like "D::f [with an EDG-specific extension]", and 
the EDG demangler would show "D::f [overriding B2::f]" as proposed.

I also really appreciate that EDG tries to make sure that even their 
proprietary extensions are known to the rest of the ABI users. I 
recommend that we keep track of such extensions in the document when 
vendors are kind enough to share them. What about an appendix to the 
ABI?


Regards
Christophe

On Sunday, Jul 27, 2003, at 20:24 Europe/Paris, Mark Mitchell wrote:

> On Sun, 2003-07-27 at 05:21, J. Stephen Adamczyk wrote:
>> We recently implemented the Microsoft extension that allows explicit
>> specification of overriding on derived class virtual functions.
>> For example:
>>
>> 	struct B1 {
>> 	  virtual void f() = 0;
>> 	};
>> 	struct B2 {
>> 	  virtual void f() = 0;
>> 	};
>> 	struct D: B1, B2 {
>> 	  virtual void B1::f() {}  // Overrides B1::f (only)
>> 	  virtual void B2::f() {}  // Overrides B2::f (only)
>> 	};
>>
>> (Hey, we didn't invent it; we're just implementing it for Microsoft
>> compatibility. :-) )
>>
>> This has a name mangling implication: as shown in the above example,
>> you can end up with two member functions in a given class that have
>> the same name and signature, and differ only in the function that
>> they override.
>>
>> Here's the extension we made to name mangling, so that others who
>> have to do this feature might do it the same way, or so that anyone
>> who sees a problem with what we did can warn us now before we ship
>> it.
>>
>> We added a rule for <encoding>:
>>
>>   <encoding> ::= <function name> O <nested-name> <bare-function-type>
>
> I've suggested before that we should have a portion of the mangling
> namespace (i.e., the names that begin with "_Z") reserved for vendor
> extensions.
>
> I'm not 100% sure that the following scheme will not conflict with
> anything else, but it will serve as an illustration:
>
>   _Z v <length number> <vendor identifier> ...
>
> The idea is that all EDG-specific manglings would begin with:
>
>   _Zv3EDG
>
> The characters that follow that point would be entirely up to you.
>
> That would keep the manglings that you add from getting in the way of
> any future extensions of the base standard.  In other words, if some 
> new
> feature C++ 2017 caused us to add a mangling, we wouldn't have to
> remember that EDG is already using this bit with the "O" in the middle
> of it for this Microsoft thing.
>
> What do you think of this idea?  What do other people think?
>
> -- 
> Mark Mitchell
> CodeSourcery, LLC
> mark at codesourcery.com
>
>



From daveed at vandevoorde.com  Mon Jul 28 16:58:27 2003
From: daveed at vandevoorde.com (Daveed Vandevoorde)
Date: Mon, 28 Jul 2003 12:58:27 -0400
Subject: [cxx-abi-dev] Name mangling for explicit overriders
In-Reply-To: <1059330288.1548.67.camel@doubledemon.codesourcery.com>
Message-ID: <B5349EB2-C11C-11D7-A9F0-000393A34FA6@vandevoorde.com>


On Sunday, July 27, 2003, at 02:24  PM, Mark Mitchell wrote:
[...]
> I've suggested before that we should have a portion of the mangling
> namespace (i.e., the names that begin with "_Z") reserved for vendor
> extensions.
>
> I'm not 100% sure that the following scheme will not conflict with
> anything else, but it will serve as an illustration:
>
>   _Z v <length number> <vendor identifier> ...
>
> The idea is that all EDG-specific manglings would begin with:
>
>   _Zv3EDG
>
> The characters that follow that point would be entirely up to you.
>
> That would keep the manglings that you add from getting in the way of
> any future extensions of the base standard.  In other words, if some 
> new
> feature C++ 2017 caused us to add a mangling, we wouldn't have to
> remember that EDG is already using this bit with the "O" in the middle
> of it for this Microsoft thing.
>
> What do you think of this idea?  What do other people think?

I think the idea has merit for constructs that are truly
expected to be vendor-specific (i.e., proprietary).  However,
I see the selective overriding as something closer to the
"restrict" support in the current ABI: Not quite standard, but
we expect that vendors who will implement it will agree on
the meaning.

Note that this is in fact not an "EDG extension": It is a
Microsoft extension implemented in the EDG compiler.

Also, this extension is going to be proposed to the evolution
working group for inclusion in the next standard (including
the ability to rename the overrider).  It would be quite
unfortunate for the ABI-standard mangling to contain a "v3EDG",
I think ;-)

         Daveed



From mark at codesourcery.com  Mon Jul 28 21:04:52 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: 28 Jul 2003 14:04:52 -0700
Subject: [cxx-abi-dev] Name mangling for explicit overriders
In-Reply-To: <B5349EB2-C11C-11D7-A9F0-000393A34FA6@vandevoorde.com>
References: <B5349EB2-C11C-11D7-A9F0-000393A34FA6@vandevoorde.com>
Message-ID: <1059426292.1631.216.camel@doubledemon.codesourcery.com>


> I think the idea has merit for constructs that are truly
> expected to be vendor-specific (i.e., proprietary).  However,
> I see the selective overriding as something closer to the
> "restrict" support in the current ABI: Not quite standard, but
> we expect that vendors who will implement it will agree on
> the meaning.
> 
> Note that this is in fact not an "EDG extension": It is a
> Microsoft extension implemented in the EDG compiler.

At the moment, this new kind of overriding is an extension both to C++
and the ABI.
 
I think we have the following choices:

1. Do nothing.

2. Treat it as a probable extension (ala restrict) to the standard, and
include it in the ABI specification.

3. Treat it as a vendor extension, and try to come up with a sensible
framework for such things.

Do you have a sense of how probable it is that this extension will
actually find its way into the standard?  That estimation seems it like
it might be persuasive in deciding between (2) and (3).

-- 
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com



From loewis at informatik.hu-berlin.de  Mon Jul 28 21:16:49 2003
From: loewis at informatik.hu-berlin.de (Martin von Loewis)
Date: Mon, 28 Jul 2003 23:16:49 +0200 (CEST)
Subject: [cxx-abi-dev] Name mangling for explicit overriders
In-Reply-To: <1059426292.1631.216.camel@doubledemon.codesourcery.com> from Mark Mitchell at "Jul 28, 2003 02:04:52 pm"
Message-ID: <200307282116.h6SLGoSK001087@paros.informatik.hu-berlin.de>

> I think we have the following choices:
> 
> 1. Do nothing.
> 
> 2. Treat it as a probable extension (ala restrict) to the standard, and
> include it in the ABI specification.
> 
> 3. Treat it as a vendor extension, and try to come up with a sensible
> framework for such things.
> 
> Do you have a sense of how probable it is that this extension will
> actually find its way into the standard?  That estimation seems it like
> it might be persuasive in deciding between (2) and (3).

I think there is an option 4. which we should follow

4. Document it as a vendor extension

My understanding is that EDG already uses it in a product, and there is no
way to stop them unless technical problems are brought forward. I could not
find any technical problems with that proposed mangling.

We don't need a framework for this in the mangling itself, perhaps only in
the documentation. Adding a section "Extensions", with "Cross-vendor extensions"
and "Vendor-specific" extensions might be useful, indicating to readers that
cross-vendor extensions are discouraged unless there is a clearly-documented
indication that the extension is truly cross-vendor. "Vendor-specific"
extensions would only require registration of a vendor identifier, and would
be left for further study (when the problem actually occurs).

Regards,
Martin



From daveed at edg.com  Mon Jul 28 21:52:13 2003
From: daveed at edg.com (Daveed Vandevoorde)
Date: Mon, 28 Jul 2003 17:52:13 -0400
Subject: [cxx-abi-dev] Name mangling for explicit overriders
In-Reply-To: <1059426292.1631.216.camel@doubledemon.codesourcery.com>
Message-ID: <BF4092EF-C145-11D7-A9F0-000393A34FA6@edg.com>


On Monday, July 28, 2003, at 05:04  PM, Mark Mitchell wrote:
[...]
> Do you have a sense of how probable it is that this extension will
> actually find its way into the standard?  That estimation seems it like
> it might be persuasive in deciding between (2) and (3).

I would say it is very probable, but I don't think it will be
in the first batch of extensions that will pass.  (Fwiw, the
first batch will probably include decltype(...) and "extern
template".)

I believe Bjarne is in favor of the proposal (it is a refinement
of an idea he worked on with Martin O'Riordan a while back), and
so are some other people I've talked to.  The issues are mostly
syntactic.

         Daveed



From mark at codesourcery.com  Tue Jul 29 01:17:33 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: 28 Jul 2003 18:17:33 -0700
Subject: [cxx-abi-dev] Name mangling for explicit overriders
In-Reply-To: <BF4092EF-C145-11D7-A9F0-000393A34FA6@edg.com>
References: <BF4092EF-C145-11D7-A9F0-000393A34FA6@edg.com>
Message-ID: <1059441452.4074.4.camel@minax.codesourcery.com>

On Mon, 2003-07-28 at 14:52, Daveed Vandevoorde wrote:
> On Monday, July 28, 2003, at 05:04  PM, Mark Mitchell wrote:
> [...]
> > Do you have a sense of how probable it is that this extension will
> > actually find its way into the standard?  That estimation seems it like
> > it might be persuasive in deciding between (2) and (3).
> 
> I would say it is very probable, but I don't think it will be
> in the first batch of extensions that will pass.

In that case, I guess it makes sense to standardize it.  At worst, we
are giving a way a little piece of the mangling namespace -- and there
is plenty more of it if we need it for something.

Does anyone object?

If not, Daveed, would you like to send me a patch for the ABI document? 
(Such a patch would presumably note that this mangling is an extension
and its origin.)

Thanks,

-- 
Mark Mitchell <mark at codesourcery.com>
CodeSourcery, LLC



From dhandly at cup.hp.com  Tue Jul 29 09:22:35 2003
From: dhandly at cup.hp.com (Dennis Handly)
Date: Tue, 29 Jul 2003 02:22:35 -0700 (PDT)
Subject: [cxx-abi-dev] Name mangling for explicit overriders
Message-ID: <200307290922.CAA04040@hpcll183.cup.hp.com>

>We recently implemented the Microsoft extension that allows explicit
>specification of overriding on derived class virtual functions.
>	struct D: B1, B2 {
>	  virtual void B1::f() {}  // Overrides B1::f (only)
>	  virtual void B2::f() {}  // Overrides B2::f (only)
>	};

>This has a name mangling implication: as shown in the above example,
>you can end up with two member functions in a given class that have
>the same name and signature, and differ only in the function that
>they override.

You can't just add mangling to the ABI, you'll also need to explain
how the vtables (and which) are changed.

>We added a rule for <encoding>:
>  <encoding> ::= <function name> O <nested-name> <bare-function-type>

>We also considered naming only the overridden class, not the function, but
>decided that other explicit-override extensions might allow overriding of
>differently-named functions, and therefore generality should be chosen over
>brevity.
>Any comments?
Steve Adamczyk

And you can't substitute for f, since only D and D::f are known.

>From: Christophe de Dinechin <ddd at cup.hp.com>
>Also, making the "extension tag" a prefix of the whole symbol means 
>that you can't demangle anything.
>the EDG approach and reserving "O" for extensions? So you'd have 
>something like Ov3EDG <length> <vendor-specific>, so that any demangler 
>could show something like "D::f [with an EDG-specific extension]", and 
>the EDG demangler would show "D::f [overriding B2::f]" as proposed.

Right.  Except there is no connection with reserving "O" for extensions.

>I also really appreciate that EDG tries to make sure that even their 
>proprietary extensions are known to the rest of the ABI users. I 
>recommend that we keep track of such extensions in the document when 
>vendors are kind enough to share them. What about an appendix to the ABI?
Christophe

Would this be where the implementation info I asked for belong?

>From: Daveed Vandevoorde <daveed at vandevoorde.com>
>Note that this is in fact not an "EDG extension": It is a
>Microsoft extension implemented in the EDG compiler.

So you're blaming it on Bill?  ;-)
So the correct mangling is: _Zv3M$$

>Also, this extension is going to be proposed to the evolution
>working group for inclusion in the next standard (including
>the ability to rename the overrider).
         Daveed

OK, so the original idea is better.

>From: Daveed Vandevoorde <daveed at edg.com>
>I believe Bjarne is in favor of the proposal
>The issues are mostly syntactic.

So the semantics of what to do in the vtables is well defined?

How do you call each directly?
   D::B1::f() or D::B2::f()

>From: Mark Mitchell <mark at codesourcery.com>
>I guess it makes sense to standardize it.  Does anyone object?

No.  Will Daveed document more than just the mangling part?


From daveed at edg.com  Tue Jul 29 14:44:14 2003
From: daveed at edg.com (Daveed Vandevoorde)
Date: Tue, 29 Jul 2003 10:44:14 -0400
Subject: [cxx-abi-dev] Name mangling for explicit overriders
In-Reply-To: <1059441452.4074.4.camel@minax.codesourcery.com>
Message-ID: <1FE680D2-C1D3-11D7-A9F0-000393A34FA6@edg.com>


On Monday, July 28, 2003, at 09:17  PM, Mark Mitchell wrote:
[...]
> If not, Daveed, would you like to send me a patch for the ABI document?
> (Such a patch would presumably note that this mangling is an extension
> and its origin.)

I'll work on it, but probably not until next week.

	Daveed



